import { CPU } from "../JOHNNIAC/CPU.js";
import { CardStackBuilder } from "../JOHNNIAC/CardStackBuilder.js";
import { Drums } from "../JOHNNIAC/Components/Drum.js";
import { j136e } from "./J136E-Modified.js";

self.onmessage = async (event) => {
    const builder = new CardStackBuilder();
    // Region defs
    builder.addCardString('                W             ,4340');
    builder.addCardString('                L             ,4360');
    builder.addCardString('                U             ,4400');
    builder.addCardString('                J             ,4530');
    builder.addCardString('                I             ,4560');
    builder.addCardString('                H             ,4600');
    builder.addCardString('                E             ,4640');
    builder.addCardString('                K             ,4700');
    builder.addCardString('                N             ,4760');
    builder.addCardString('                A             ,5000');
    builder.addCardString('                M             ,5220');
    builder.addCardString('                D             ,5540');
    builder.addCardString('                B             ,5554');
    builder.addCardString('                =             ,5600');
    builder.addCardString('                F             ,5720');
    builder.addCardString('                G             ,5740');
    builder.addCardString('                X             ,5760');
    builder.addCardString('                P             ,6000');
    builder.addCardString('                Q             ,6040');
    builder.addCardString('                Z             ,6060');
    builder.addCardString('                T             ,6070');
    builder.addCardString('                S             ,6100');
    builder.addCardString('                V             ,6213');
    builder.addCardString('                R             ,6300');

    // Drum loader
    builder.addCardString('D-LDR000+       $             ,7000     LOAD ROUTINES STYLE F TO DRUM');
    builder.addCardString('                  020    / 052 * 89     TAKE NAME FROM LEFT ADDR OF /');
    builder.addCardString('                  020    $ 025    M     CALCULATE LENGTH');
    builder.addCardString('                  056 * 89 020 * 89');
    builder.addCardString('D-LDR010     *  1 050 * 86 020 * 80');
    builder.addCardString('D-LDR020          071   21 052 * 88');
    builder.addCardString('D-LDR030          020 * 86 124 * 87');
    builder.addCardString('D-LDR040          024 * 80 050 * 80');
    builder.addCardString('D-LDR050          025 * 83 001 *  2');
    builder.addCardString('D-LDR060          120    0 050 * 80');
    builder.addCardString('D-LDR070          020 * 88 024 * 82');
    builder.addCardString('D-LDR080          050 * 88 014 *  1');
    builder.addCardString('D-LDR090     *  2 020 * 80 025 * 81');
    builder.addCardString('D-LDR100          056 * 88 020 * 86');
    builder.addCardString('D-LDR110          052 *  3 020 * 84');
    builder.addCardString('D-LDR120     *  3 050 ---- 052 *  4     STORE HEADER WORD FROM DRUM STORE');
    builder.addCardString('D-LDR130          024 * 85 050 * 84');
    builder.addCardString('D-LDR140          004 * 88 111 M  0');
    builder.addCardString('D-LDR150     *  4 060 ---- 010    0     STORE DRUM CONTROL WORD, EXIT TO F-LD');
    builder.addCardString('D-LDR160     * 80                 0     INITIAL NEXT AVAILABLE DRUM ADDRESS');
    builder.addCardString('D-LDR170     * 81                 1');
    builder.addCardString('D-LDR180     * 82 000,0000,001,0000     BAND COUNTER');
    builder.addCardString('D-LDR190     * 83 000,0000,000,2000     1024');
    builder.addCardString('D-LDR200     * 84 004 B  0 010 X 15     INITIAL HEADER WORD');
    builder.addCardString('D-LDR210     * 85        1');
    builder.addCardString('D-LDR220     * 86     ----     ----     PARAMETER WORD (NAME,LENGTH)');
    builder.addCardString('D-LDR230     * 87             ,7777     MASK');
    builder.addCardString('D-LDR240     * 88 000 ---- 010 ----     INITIAL DRUM CONTROL WORD');
    builder.addCardString('             * 89     ----     ----,    PARAMETER SCRATCH');

    builder.addCardString('A---E000+    A  0 100 0000 000,0000     TERMINATION SIGNAL');
    builder.addCardString('A---E001     A  1 000 0000 001,6001     1');
    builder.addCardString('A---E002     A  2 000 0000 001,6002     2');
    builder.addCardString('A---E003     A  3 000 0000 001,5003     3');
    builder.addCardString('A---E004     A  4 000 0000 001,6004     4');
    builder.addCardString('A---E005     A  5 000 0000 001,5005     5');
    builder.addCardString('A---E006     A  6 000 0000 001,5006     6');
    builder.addCardString('A---E007     A  7 000 0000 001,4007     7');
    builder.addCardString('A---E008     A  8 000 0000 001,6010     8');
    builder.addCardString('A---E009     A  9 000 0000 001,5011     9');
    builder.addCardString('A---E010     A 10 000 0000 000,3161');
    builder.addCardString('A---E011     A 11 000 0000 000,3161');
    builder.addCardString('A---E012     A 12 000 0000 000,3161');
    builder.addCardString('A---E013     A 13 000 0000 000,3161');
    builder.addCardString('A---E014     A 14 000 0000 000,4016     SPACE');
    builder.addCardString('A---E015     A 15 000 0000 000,3161');
    builder.addCardString('A---E016     A 16 000 0000 000,6020     SEMICOLON');
    builder.addCardString('A---E017     A 17 001 V  1 002,5021     LCA');
    builder.addCardString('A---E018     A 18 002 V  2 002,5022     LCB');
    builder.addCardString('A---E019     A 19 003 V  3 002,4023     LCC');
    builder.addCardString('A---E020     A 20 004 V  4 002,5024     LCD');
    builder.addCardString('A---E021     A 21 005 V  5 002,4025     LCE');
    builder.addCardString('A---E022     A 22 006 V  6 002,4026     LCF');
    builder.addCardString('A---E023     A 23 007 V  7 002,3027     LCG');
    builder.addCardString('A---E024     A 24 010 V  8 002,5030     LCH');
    builder.addCardString('A---E025     A 25 011 V  9 002,4031     LCI');
    builder.addCardString('A---E026     A 26 000 0000 000,3161');
    builder.addCardString('A---E027     A 27 000 0000 000,3033     .');
    builder.addCardString('A---E028     A 28 000 0000 000,3161');
    builder.addCardString('A---E029     A 29 000 0000 000,3161');
    builder.addCardString('A---E030     A 30 000 0000 000,3036     EJECT+CR+EOM');
    builder.addCardString('A---E031     A 31 000 0000 000,2037     EJECT+CR');
    builder.addCardString('A---E032     A 32 000 = 33 240,6040     MULTIPLY DOT');
    builder.addCardString('A---E033     A 33 012 V 10 002,5041     LCJ');
    builder.addCardString('A---E034     A 34 013 V 11 002,5042     LCK');
    builder.addCardString('A---E035     A 35 014 V 12 002,4043     LCL');
    builder.addCardString('A---E036     A 36 015 V 13 002,5044     LCM');
    builder.addCardString('A---E037     A 37 016 V 14 002,4045     LCN');
    builder.addCardString('A---E038     A 38 017 V 15 002,4046     LCO');
    builder.addCardString('A---E039     A 39 020 V 16 002,3047     LCP');
    builder.addCardString('A---E040     A 40 021 V 17 002,5050     LCQ');
    builder.addCardString('A---E041     A 41 022 V 18 002,4051     LCR');
    builder.addCardString('A---E042     A 42 100 0000 000,4052     CR+EOM+TERMINAL SIGNAL IN SIGN');
    builder.addCardString('A---E043     A 43 002 0000 004,3053     =');
    builder.addCardString('A---E044     A 44 000 = 32 140,4054     -');
    builder.addCardString('A---E045     A 45 100 0000 000,3416     SPECIAL SPACE');
    builder.addCardString('A---E046     A 46 000 0000 000,3161');
    builder.addCardString('A---E047     A 47 000 0000 000,3161');
    builder.addCardString('A---E048     A 48 000 0000 001,5060     ZERO');
    builder.addCardString('A---E049     A 49 000 = 34 240,4061     /');
    builder.addCardString('A---E050     A 50 023 V 19 002,4062     LCS');
    builder.addCardString('A---E051     A 51 024 V 20 002,3063     LCT');
    builder.addCardString('A---E052     A 52 025 V 21 002,4064     LCU');
    builder.addCardString('A---E053     A 53 026 V 22 002,3065     LCV');
    builder.addCardString('A---E054     A 54 027 V 23 002,3066     LCW');

    builder.addCardString('A---E055     A 55 030 V 24 002,2067     LCX');
    builder.addCardString('A---E056     A 56 031 V 25 002,4070     LCY');
    builder.addCardString('A---E057     A 57 032 V 26 002,3071     LCZ');
    builder.addCardString('A---E058     A 58 000 0000 000,3161');
    builder.addCardString('A---E059     A 59 000 0000 000,2073     ,');
    builder.addCardString('A---E060     A 60 000 = 31 140,3074     +');
    builder.addCardString('A---E061     A 61 000 0000 000,2075     TAB');
    builder.addCardString('A---E062     A 62 000 0000 000,3161');
    builder.addCardString('A---E063     A 63 000 0000 000,3161');
    builder.addCardString('A---E064     A 64 000 0000 000,3161');
    builder.addCardString('A---E065     A 65 000 0000 000,5101     PRIME');
    builder.addCardString('A---E066     A 66 000 0000 000,5102     QUOTE MARKS');
    builder.addCardString('A---E067     A 67 000 0000 000,4016     STRIKE OUT CHARACTER = SPACE');
    builder.addCardString('A---E068     A 68 000 0000 000,5104     $');
    builder.addCardString('A---E069     A 69 003 0000 004,4105     LESS THAN OR =');
    builder.addCardString('A---E070     A 70 006 0000 004,4106     GREATER THAN OR =');
    builder.addCardString('A---E071     A 71 001 0000 004,3107     LESS THAN');
    builder.addCardString('A---E072     A 72 004 0000 004,5110     GREATER THAN');
    builder.addCardString('A---E073     A 73 000 A112 020,4111     (');
    builder.addCardString('A---E074     A 74 000 0000 000,3161');
    builder.addCardString('A---E075     A 75 000 0000 000,3161');
    builder.addCardString('A---E076     A 76 000 0000 000,3161');
    builder.addCardString('A---E077     A 77 000 0000 000,3161');
    builder.addCardString('A---E078     A 78 000 0000 000,3161');
    builder.addCardString('A---E079     A 79 000 0000 000,3161');
    builder.addCardString('A---E080     A 80 000 0000 000,5120     COLON');
    builder.addCardString('A---E081     A 81 041 V 27 002,4121     A');
    builder.addCardString('A---E082     A 82 042 V 28 002,4122     B');
    builder.addCardString('A---E083     A 83 043 V 29 002,3123     C');
    builder.addCardString('A---E084     A 84 044 V 30 002,4124     D');
    builder.addCardString('A---E085     A 85 045 V 31 002,3125     E');
    builder.addCardString('A---E086     A 86 046 V 32 002,3126     F');
    builder.addCardString('A---E087     A 87 047 V 33 002,2127     G');
    builder.addCardString('A---E088     A 88 050 V 34 002,4130     H');
    builder.addCardString('A---E089     A 89 051 V 35 002,3131     I');
    builder.addCardString('A---E090     A 90 000 0000 000,3161');
    builder.addCardString('A---E091     A 91 000 A123 010,2133     RIGHT BRACKET');
    builder.addCardString('A---E092     A 92 000 0000 000,3161');
    builder.addCardString('A---E093     A 93 000 0000 000,3161');
    builder.addCardString('A---E094     A 94 000 0000 000,3161');
    builder.addCardString('A---E095     A 95 000 0000 000,3161');
    builder.addCardString('A---E096     A 96 000 A 96 030,5140     ABS VAL BAR');
    builder.addCardString('A---E097     A 97 052 V 36 002,4141     J');
    builder.addCardString('A---E098     A 98 053 V 37 002,4142     K');
    builder.addCardString('A---E099     A 99 054 V 38 002,3143     L');
    builder.addCardString('A---E100     A100 055 V 39 002,4144     M');
    builder.addCardString('A---E101     A101 056 V 40 002,3145     N');
    builder.addCardString('A---E102     A102 057 V 41 002,3146     O');
    builder.addCardString('A---E103     A103 060 V 42 002,2147     P');
    builder.addCardString('A---E104     A104 061 V 43 002,4150     Q');
    builder.addCardString('A---E105     A105 062 V 44 002,3151     R');
    builder.addCardString('A---E106     A106 000 0000 002,3161');
    builder.addCardString('A---E107     A107 005 0000 004,2153     NOT =');
    builder.addCardString('A---E108     A108 000 0000 000,3154     UNDERSCORE');
    builder.addCardString('A---E109     A109 000 0000 000,2433     PERIOD WITH FLAG (CHAR 155 CAN\'T GET IN)');

    builder.addCardString('A---E110     A110 000 0000 000,3161');
    builder.addCardString('A---E111     A111 000 0000 000,3161');
    builder.addCardString('A---E112     A112 000 A 73 010,4160     )');
    builder.addCardString('A---E113     A113 000 0000 000,3161     QUESTION MARK');
    builder.addCardString('A---E114     A114 063 V 45 002,3162     S');
    builder.addCardString('A---E115     A115 064 V 46 002,2163     T');
    builder.addCardString('A---E116     A116 065 V 47 002,3164     U');
    builder.addCardString('A---E117     A117 066 V 48 002,2165     V');
    builder.addCardString('A---E118     A118 067 V 49 002,2166     W');
    builder.addCardString('A---E119     A119 070 V 50 002,1167     X');
    builder.addCardString('A---E120     A120 071 V 51 002,3170     Y');
    builder.addCardString('A---E121     A121 072 V 52 002,2171     Z');
    builder.addCardString('A---E122     A122 000 0000 000,3161');
    builder.addCardString('A---E123     A123 000 A091 020,1173     LEFT BRACKET');
    builder.addCardString('A---E124     A124 000 = 35 440,2174     *');
    builder.addCardString('A---E125     A125 000 0000 000,1175     TAB');
    builder.addCardString('A---E126     A126 000 0000 000,3161');
    builder.addCardString('A---E127     A127 000 0000 000,3161');
    builder.addCardString('A---E128     A128 000 0000 000,0037     EJECT');
    builder.addCardString('A---E129     A129 000 0000 000,0056     CARRIAGE RETURN');
    builder.addCardString('A---E130     A130 000 0000 000,0155     PSEUDO PERIOD');
    builder.addCardString('A---E131     A131 000 0000 000,0055     PSEUDO SPACE');

    builder.addCardString('D000E000+       $              M  0     BODY OF ERROR ROUTINE');
    builder.addCardString('D000E010     *  1 020 S  0 050 P 12     SET POINTER');
    builder.addCardString('D000E015          020 P 18 124 K  6');
    builder.addCardString('D000E020          025 * 90 050 T  0');
    builder.addCardString('D000E025          024 * 91 052 *  6');
    builder.addCardString('D000E030          021 T  0 002 *  8     JUMP IF EO');
    builder.addCardString('D000E035          072   21 050 P 18');
    builder.addCardString('D000E040          020 Q  8 002 * 23     JUMP IF INDIRECT');
    builder.addCardString('D000E045          020 P 18 024 I  6');
    builder.addCardString('D000E050          050 T  0 023 T  0');
    builder.addCardString('D000E055          002 *  8 010 * 24     JUMP IF DIRECT AND E6');
    builder.addCardString('D000E060     * 23 020 P 23 001 * 24     JUMP UNLESS TROUBLE IN X7');
    builder.addCardString('D000E062          021 T  0 024 K  2');
    builder.addCardString('D000E064          001 * 24 010 $  1     JUMP IF NOT OVERFLOW IN X7');
    builder.addCardString('D000E066          020 $  0 010 = 13     POP Q3');
    builder.addCardString('D000E068          014 X  7              BACK TO X7 IGNORING OVERFLOW');
    builder.addCardString('D000E070     * 24 020 $  0 010 = 64     \'ERROR-\'');
    builder.addCardString('D000E080              * 81     * 81');
    builder.addCardString('D000E085          020 Q  8 001 *  4     JUMP IF AT TOP LEVEL');
    builder.addCardString('D000E090          020 P 23 001 *  2     JUMP IF NO TROUBLE IN X7');
    builder.addCardString('D000E100          020 $  0 010 = 64     \'DURING-\'');
    builder.addCardString('D000E110              * 82     * 82');
    builder.addCardString('D000E120          020 Q  8 024 K  1');
    builder.addCardString('D000E125          056 *  9 014 *  9');
    builder.addCardString('D000E130     *  9          020 ----');
    builder.addCardString('D000E135          001 *  4 050 P 21     JUMP IF TROUBLE IN TOP LEVEL DO-FOR');
    builder.addCardString('D000E140          010 *  3');
    builder.addCardString('D000E160     *  2 020 $  0 010 = 64     \'AT-\'');
    builder.addCardString('D000E170              * 83     * 83');
    builder.addCardString('D000E180     *  3 020 $  0 010 = 64');
    builder.addCardString('D000E190              * 84     * 84     \'STEP-\'');
    builder.addCardString('D000E200          020 K  4 050 P 16     CLEAR P16');
    builder.addCardString('D000E205          020 P 23 002 * 10     JUMP IF TROUBLE IN X7');
    builder.addCardString('D000E210          020 Q  9 050 P 21');
    builder.addCardString('D000E220     * 10 020 $  0 010 = 51     FIND STEP');
    builder.addCardString('D000E230          001 *  7 056 P  3');
    builder.addCardString('D000E240          020 $  0 010 =  7     UNPACK');
    builder.addCardString('D000E242          020 J 12 050 P  2     COPY STEP NUMBER FROM R TO S');
    builder.addCardString('D000E244     * 31 020 $  0 010 =  2');
    builder.addCardString('D000E246          124 K 35 025 K 35');
    builder.addCardString('D000E248          002 * 32 010 $  1');
    builder.addCardString('D000E250          020 P  1 124 A 27');
    builder.addCardString('D000E252          025 A 27 001 *  5');
    builder.addCardString('D000E254     * 32 020 P 12 024 K  3');
    builder.addCardString('D000E256          050 P 12 056 * 33');
    builder.addCardString('D000E258     * 33 020 P  1 050 ----');
    builder.addCardString('D000E260          020 * 31 010 =  1');
    builder.addCardString('D000E270     *  4 020 $  0 010 = 64     \'ABOVE\'');
    builder.addCardString('D000E280              * 85     * 85');
    builder.addCardString('D000E290     *  5 020 $  0 010 = 64     COLON AND TWO SPACES');
    builder.addCardString('D000E300              * 86     * 86');
    builder.addCardString('D000E302          020 P 18 024 I  2');
    builder.addCardString('D000E304          050 T  0 023 T  0');
    builder.addCardString('D000E306          002 * 94 010 $  1     JUMP IF E2');

    builder.addCardString('D000E310     *  8 004 H 31 110 * 80');
    builder.addCardString('D000E320     *  6 004 ---- 110 * 80');
    builder.addCardString('D000E330          020 $  0 010 = 64     ERROR MESSAGE');
    builder.addCardString('D000E340              * 80     * 80');
    builder.addCardString('D000E350          010 * 11');
    builder.addCardString('D000E360     *  7 020 S  0 050 P 12');
    builder.addCardString('D000E365          020 $  0 010 = 64     \'IT\'S A MESS.  LET\'S START OVER.\'');
    builder.addCardString('D000E370              * 87     * 87');
    builder.addCardString('D000E380          020 Q  8 001 * 22     JUMP IF NO CONTROL STRUCTURE');
    builder.addCardString('D000E385     * 21 020 $  0 010 = 76     ERASE ONE LEVEL OF CONTROL STRUCTURE');
    builder.addCardString('D000E390          020 Q  8 002 * 21     LOOP IF MORE');
    builder.addCardString('D000E395     * 22 020 K  4 050 P 23     RESET P23 FLAG');
    builder.addCardString('D000E400     * 11 020 Q  2 001 * 12     CLEAN UP OPERAND STACK');
    builder.addCardString('D000E410          020 $  0 010 = 13');
    builder.addCardString('D000E420          010 * 11');
    builder.addCardString('D000E430     * 12 020 Q  4 001 * 13     CLEAN UP OPERATOR STACK');
    builder.addCardString('D000E440          020 $  0 010 = 15');
    builder.addCardString('D000E450          010 * 12');
    builder.addCardString('D000E460     * 13 020 Q  6 001 * 14     CLEAN UP AUXILIARY STACK');
    builder.addCardString('D000E470          020 $  0 010 = 17');
    builder.addCardString('D000E480          010 * 13');
    builder.addCardString('D000E490     * 14 020 Q 14 052 * 15     CLEAN UP Q14');
    builder.addCardString('D000E500     * 15 020 ---- 005 * 16');
    builder.addCardString('D000E510          052 * 15 071   40');
    builder.addCardString('D000E520          020 $  0 010 = 29');
    builder.addCardString('D000E530     * 16 010 * 15 004 Q 14');
    builder.addCardString('D000E540          020 $  0 010 = 28');
    builder.addCardString('D000E550          120    0 050 Q 14');
    builder.addCardString('D000E560          004 Q 15 010 $  1     CLEAN UP Q15');
    builder.addCardString('D000E570          020 $  0 010 = 29');
    builder.addCardString('D000E580          120    0 050 Q 15');
    builder.addCardString('D000E590          020 Q  1 002 * 20');
    builder.addCardString('D000E600          020 Q  0 056 * 17     REFILL SPARE TANK');
    builder.addCardString('D000E610     * 17 050 Q  1 020 ----');
    builder.addCardString('D000E620          056 * 18 004 K  4');
    builder.addCardString('D000E630     * 18 056 * 19 020 ----');
    builder.addCardString('D000E640     * 19 050 Q  0 060 ----');
    builder.addCardString('D000E650     * 20 010 X 12              EXIT TO TRANSMIT AND SWITCH');
    builder.addCardString('D000E680     * 80                       ERROR MSG INDEX AND TEXT BLOCK');
    builder.addCardString('D000E690        $              $ 31');
    builder.addCardString('D000E700     * 81 052,4511,222,3051     \'ERROR-\'');
    builder.addCardString('D000E710          007,2000,000,0000');
    builder.addCardString('D000E720     * 82 012,0641,221,4445     \'DURING-\'');
    builder.addCardString('D000E730          013,4164,000,0000');
    builder.addCardString('D000E740     * 83 010,4630,350,0000     \'AT-\'');
    builder.addCardString('D000E750     * 84 031,0630,522,3416     \'STEP-\'');
    builder.addCardString('D000E760          100,0000,000,0000');
    builder.addCardString('D000E770     * 85 010,4221,143,2425     \'ABOVE\'');
    builder.addCardString('D000E780          100,0000,000,0000');
    builder.addCardString('D000E790     * 86 050,0160,350,0000     COLON AND TWO SPACES');
    builder.addCardString('D000E800     * 87 054,4632,023,1016     \'IT\'S A MESS. LET\'S START OVER.\'');
    builder.addCardString('D000E810          010,4161,101,2462');
    builder.addCardString('D000E820          031,0330,340,7143');
    builder.addCardString('D000E830          012,4632,023,1016');
    builder.addCardString('D000E840          031,0630,422,4463');

    builder.addCardString('D000E850          007,0461,521,2451');
    builder.addCardString('D000E860          015,4524,000,0000');
    builder.addCardString('D000E870     * 90     E  0');
    builder.addCardString('D000E880     * 91     * 80');
    builder.addCardString('D000E900     * 94 020 H 27 050 P 11     CONSTRUCT UNDEFINED MESSAGE');
    builder.addCardString('D000E902          020 $  0 010 = 66     PLACE LETTER');
    builder.addCardString('D000E904          020 H 28 001 *  8     JUMP IF NO INDICES TO COMPLETE MESSAGE');
    builder.addCardString('D000E906          072   12 050 H 20');
    builder.addCardString('D000E908          020 J 20 052 * 96     =77 LEFT RIGHT GROUPER IN J20');
    builder.addCardString('D000E909     * 96 020 ---- 050 P 11');
    builder.addCardString('D000E910          020 $  0 010 = 66     PLACE LEFT GROUPER');
    builder.addCardString('D000E912          020 $  0 010 = 36     CONVERT FIRST INDEX');
    builder.addCardString('D000E914                 1        2');
    builder.addCardString('D000E916          020 H 29 001 * 95     JUMP IF NOT SECOND INDEX');
    builder.addCardString('D000E918          072   12 050 H 20');
    builder.addCardString('D000E920          020 A 59 050 P 11');
    builder.addCardString('D000E922          020 $  0 010 = 66     PLACE COMMA');
    builder.addCardString('D000E924          020 $  0 010 = 36     CONVERT SECOND INDEX');
    builder.addCardString('D000E926                 1        2');
    builder.addCardString('D000E928     * 95 020 J 20 050 P 11     =77 LEFT RIGHT GROUPER IN J20');
    builder.addCardString('D000E930          020 $  0 010 = 66     PLACE RIGHT GROUPER');
    builder.addCardString('D000E932          010 *  8         ,    JUMP BACK TO COMPLETE MESSAGE');
    builder.addCardString('D000E999        /     D  0 010,7000/');

    builder.addCardString('D001E000+       $              M  0     BRANCH OF G5 DELETE');
    builder.addCardString('D001E010          020 P  1 124 K 19');
    builder.addCardString('D001E020          025 K 19 002 * 40     JUMP IF TERMINAL');
    builder.addCardString('D001E030          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('D001E040          020 P  1 124 K 19');
    builder.addCardString('D001E050          025 K 19 002 * 40     JUMP IF TERMINAL');
    builder.addCardString('D001E060          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('D001E070          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D001E080          124 K 19 025 K 19');
    builder.addCardString('D001E090          001 $  1 004 H 19     MALFORMED IF NOT TERMINAL');
    builder.addCardString('D001E100          020 W 12 065 T  0');
    builder.addCardString('D001E110          023 T  0 002 * 10     JUMP IF \'VALUES\'');
    builder.addCardString('D001E120          020 W 10 065 T  0');
    builder.addCardString('D001E130          023 T  0 002 * 20     JUMP IF \'STEPS\'');
    builder.addCardString('D001E140          020 W  8 065 T  0');
    builder.addCardString('D001E150          023 T  0 002 * 20     JUMP IF \'PARTS\'');
    builder.addCardString('D001E160          020 W  4 065 T  0');
    builder.addCardString('D001E170          023 T  0 002 * 30     JUMP IF \'FORMS\'');
    builder.addCardString('D001E180          010 E  6              ELSE MALFORMED');
    builder.addCardString('D001E190     * 10 020 $  0 010 * 50     ERASE ALL VALUES');
    builder.addCardString('D001E200          010 X  5');
    builder.addCardString('D001E210     * 20 020 Q  8 002 E  9     ERASE ALL STEPS (OR PARTS) - ILLEGAL');
    builder.addCardString('D001E220          020 $  0 010 * 60');
    builder.addCardString('D001E230          010 X  5');
    builder.addCardString('D001E240     * 30 020 Q  8 002 E  9     ERASE ALL FORMS - ILLEGAL INDIRECT');
    builder.addCardString('D001E250          020 $  0 010 * 70');
    builder.addCardString('D001E260          010 X  5');
    builder.addCardString('D001E270     * 40 020 Q  8 002 E  9     ERASE ALL - ILLEGAL INDIRECT');
    builder.addCardString('D001E280          020 $  0 010 * 50');
    builder.addCardString('D001E290          020 $  0 010 * 60');
    builder.addCardString('D001E300          020 $  0 010 * 70');
    builder.addCardString('D001E310          010 X  5');
    builder.addCardString('D001E320     * 50 024 K  2 052 * 59     ERASE ALL VALUES (SUBROUTINE)');
    builder.addCardString('D001E330          020 * 58 052 * 51');
    builder.addCardString('D001E340     * 51 020 ---- 050 H 27');
    builder.addCardString('D001E350          124 K 34 025 K 34');
    builder.addCardString('D001E360          001 * 52 010 $  1');
    builder.addCardString('D001E370          020 $  0 010 = 75');
    builder.addCardString('D001E380     * 52 020 * 51 024 K  2');
    builder.addCardString('D001E390          052 * 51 020 H 27');
    builder.addCardString('D001E400          124 A121 025 A121');
    builder.addCardString('D001E410     * 59 002 ---- 010 * 51');
    builder.addCardString('D001E420     * 58     A 17');
    builder.addCardString('D001E430     * 60 024 K  2 052 * 69     ERASE ALL STEPS (SUBROUTINE)');
    builder.addCardString('D001E440          020 Q 10 050 * 90');
    builder.addCardString('D001E450     * 61 020 * 90 056 * 62');
    builder.addCardString('D001E460          124 K  5 025 K  1');
    builder.addCardString('D001E470     * 62 005 * 66 020 ----');
    builder.addCardString('D001E480          050 * 90 050 * 91');
    builder.addCardString('D001E490     * 63 020 * 91 052 * 64');
    builder.addCardString('D001E500          124 K  6 025 K  1');
    builder.addCardString('D001E510          005 * 65 010 $  1');
    builder.addCardString('D001E520     * 64 004 ---- 060 * 91');
    builder.addCardString('D001E530          020 $  0 010 = 29');

    builder.addCardString('D001E540     * 65 010 * 63 004 * 90');
    builder.addCardString('D001E550          020 $  0 010 = 28');
    builder.addCardString('D001E560     * 66 010 * 61 004 Q 10');
    builder.addCardString('D001E570          020 $  0 010 = 29');
    builder.addCardString('D001E580          120    0 050 Q 10');
    builder.addCardString('D001E582          020 Q 12 001 * 69     JUMP IF NO SUSPENDED TASK');
    builder.addCardString('D001E584          050 Q  8 020 K  4');
    builder.addCardString('D001E586          050 Q 12 050 Q 13');
    builder.addCardString('D001E588          050 P 17 050 P 23     RESET P17 AND P23 FLAGS');
    builder.addCardString('D001E590     * 67 020 $  0 010 = 76     ERASE ONE LEVEL');
    builder.addCardString('D001E592          020 Q  8 002 * 67');
    builder.addCardString('D001E600     * 69 010 ----');
    builder.addCardString('D001E610     * 70 024 K  2 052 * 79     ERASE ALL FORMS (SUBROUTINE)');
    builder.addCardString('D001E620          020 Q 11 050 * 91');
    builder.addCardString('D001E630     * 71 020 * 91 052 * 72');
    builder.addCardString('D001E640          124 K  6 025 K  1');
    builder.addCardString('D001E650          005 * 73 010 $  1');
    builder.addCardString('D001E660     * 72 004 ---- 060 * 91');
    builder.addCardString('D001E670          020 $  0 010 = 29');
    builder.addCardString('D001E680     * 73 010 * 71 004 Q 11');
    builder.addCardString('D001E690          020 $  0 010 = 28');
    builder.addCardString('D001E700          120    0 050 Q 11');
    builder.addCardString('D001E710     * 79 010 ----');
    builder.addCardString('D001E720     * 90                       LOCAL STORAGE');
    builder.addCardString('D001E730     * 91                  ,    LOCAL STORAGE');
    builder.addCardString('D001E999        /     D001 010,7000/');

    builder.addCardString('D002E000+       $              M  0     BRANCH OF G5 DELETE');
    builder.addCardString('D002E005          020 $  0 010 * 70     BORROW SPARE TANK');
    builder.addCardString('D002E010     *  0 020 P  1 124 K 34');
    builder.addCardString('D002E020          025 K 34 001 E  6     VERIFY LETTER');
    builder.addCardString('D002E030          020 P  1 050 H 27     SAVE IT');
    builder.addCardString('D002E040          020 $  0 010 =  1     ADVANCE ONE');
    builder.addCardString('D002E050          020 P  1 124 K 31');
    builder.addCardString('D002E060          025 K 31 002 *  1     JUMP IF LEFT GROUPER');
    builder.addCardString('D002E070          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D002E080          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('D002E090          020 K  4 050 H 28');
    builder.addCardString('D002E100          050 H 29 010 $  1');
    builder.addCardString('D002E102          020 H 27 052 * 22');
    builder.addCardString('D002E104     * 22 022 ---- 002 *  3     JUMP IF VALUE FOUND');
    builder.addCardString('D002E106          010 E  2              ELSE ERROR');
    builder.addCardString('D002E110     *  1 020 H 27 050 * 90     SAVE LETTER');
    builder.addCardString('D002E120          020 $  0 010 = 26     EVALUATE SUBSCRIPTS');
    builder.addCardString('D002E130          020 * 90 050 H 27     SET UP LETTER AGAIN');
    builder.addCardString('D002E140          020 Q  7 050 H 29');
    builder.addCardString('D002E150          020 Q  6 001 *  2     JUMP IF Q7 EMPTY');
    builder.addCardString('D002E160          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D002E170          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES');
    builder.addCardString('D002E180     *  2 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX');
    builder.addCardString('D002E190          020 Q  3 050 H 28     SET UP FIRST INDEX');
    builder.addCardString('D002E200          020 H 29 002 * 21     JUMP IF DOUBLE INDEXED');
    builder.addCardString('D002E201          020 H 27 052 * 23');
    builder.addCardString('D002E202     * 23 020 ---- 002 E  2');
    builder.addCardString('D002E203          071    6 002 E  2');
    builder.addCardString('D002E204          020 $  0 010 = 71');
    builder.addCardString('D002E205          002 *  3 010 E  2');
    builder.addCardString('D002E210     * 21 050 Q  3 010 $  1');
    builder.addCardString('D002E220          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX');
    builder.addCardString('D002E230          020 Q  3 050 H 29     SET UP SECOND INDEX');
    builder.addCardString('D002E232          020 $  0 010 = 72     FIND VALUE');
    builder.addCardString('D002E234          002 $  1 010 E  2     JUMP IF FOUND, ELSE ERROR');
    builder.addCardString('D002E240     *  3 020 H 27 124 K 17     PACK INFO INTO Q3 FOR LATER DELETE');
    builder.addCardString('D002E250          050 Q  3 020 H 28');
    builder.addCardString('D002E260          001 *  4 024 K 26');
    builder.addCardString('D002E270          024 Q  3 050 Q  3');
    builder.addCardString('D002E280          020 H 29 001 *  4');
    builder.addCardString('D002E290          071    9 024 K 26');
    builder.addCardString('D002E300          024 Q  3 050 Q  3');
    builder.addCardString('D002E310     *  4 020 P  1 124 A 59');
    builder.addCardString('D002E320          025 A 59 001 *  5     JUMP IF NOT COMMA');
    builder.addCardString('D002E330          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('D002E340          010 *  0              LOOP BACK');
    builder.addCardString('D002E350     *  5 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D002E360          124 K 19 025 K 19     VERIFY TERMINAL');
    builder.addCardString('D002E370          001 E  6 010 $  1');
    builder.addCardString('D002E380     *  6 020 Q  3 024 J 13     UNPACK AND DELETE');
    builder.addCardString('D002E390          056 *  7 010 $  1');
    builder.addCardString('D002E400          020 K  4 050 H 28');
    builder.addCardString('D002E410     *  7 050 H 29 020 ----');
    builder.addCardString('D002E420          050 H 27 020 Q  3');

    builder.addCardString('D002E430          025 K 26 002 *  8     JUMP IF INDEXED');
    builder.addCardString('D002E440          020 $  0 010 = 75     DELETE VALUE(S) FOR LETTER');
    builder.addCardString('D002E450          010 * 19');
    builder.addCardString('D002E460     *  8 124 K 42 050 H 28');
    builder.addCardString('D002E470          020 Q  3 025 K 26');
    builder.addCardString('D002E480          025 K 26 002 * 13     JUMP IF DOUBLE INDEX');
    builder.addCardString('D002E490          020 H 27 052 * 14     SINGLE INDEX');
    builder.addCardString('D002E500     * 14 020 ---- 002 * 19     JUMP IF NOT A VECTOR');
    builder.addCardString('D002E510          071    6 002 * 19');
    builder.addCardString('D002E520          020 $  0 010 = 71     FIND VALUE');
    builder.addCardString('D002E530          001 * 19 010 $  1     JUMP IF CAN\'T');
    builder.addCardString('D002E540     * 20 020 H 21 056 *  9');
    builder.addCardString('D002E550          020 H 22 056 * 10');
    builder.addCardString('D002E560     *  9 020 H 23 056 ----');
    builder.addCardString('D002E570     * 10 020 Q  0 050 ----');
    builder.addCardString('D002E580          020 H 22 124 K  5');
    builder.addCardString('D002E590          050 Q  0 020 H 27');
    builder.addCardString('D002E600          052 * 11 052 * 12');
    builder.addCardString('D002E610     * 11 020 ---- 124 K  5');
    builder.addCardString('D002E620          025 K  1 020 * 19     JUMP IF DONE');
    builder.addCardString('D002E630          020 K  4 010 $  1');
    builder.addCardString('D002E640     * 12 050 ---- 010 * 19     UNDEFINE LETTER IF NO VALUES AND JUMP');
    builder.addCardString('D002E650     * 13 070    9 124 K 42     DOUBLE INDEX');
    builder.addCardString('D002E660          050 H 29 010 $  1');
    builder.addCardString('D002E670          020 H 27 052 * 15');
    builder.addCardString('D002E680     * 15 020 ---- 002 * 19     JUMP IF NOT A MATRIX');
    builder.addCardString('D002E690          071    5 002 * 19');
    builder.addCardString('D002E700          020 $  0 010 = 72     FIND VALUE');
    builder.addCardString('D002E710          001 * 19 020 H 24     JUMP IF CAN\'T');
    builder.addCardString('D002E720          052 * 16 020 H 25');
    builder.addCardString('D002E730          052 * 17 020 H 26');
    builder.addCardString('D002E740     * 16 052 ---- 020 Q  0');
    builder.addCardString('D002E750     * 17 050 ---- 020 H 25');
    builder.addCardString('D002E760          070   21 050 Q  0');
    builder.addCardString('D002E770          020 H 22 056 * 18');
    builder.addCardString('D002E780     * 18 020 K  6 124 ----');
    builder.addCardString('D002E790          025 K  1 001 * 20     JUMP IF NO MORE VALUES IN ROW');
    builder.addCardString('D002E800     * 19 020 $  0 010 = 13     POP Q3');
    builder.addCardString('D002E810          020 Q  2 002 *  6     LOOP IF MORE TO DELETE');
    builder.addCardString('D002E815          020 $  0 010 * 80     REFILL SPARE TANK');
    builder.addCardString('D002E820          010 X  5              EXIT');
    builder.addCardString('D002E830     * 70 024 K  2 052 * 79     BORROW SPARE TANK (SUBROUTINE)');
    builder.addCardString('D002E835          020 Q  1 056 * 71');
    builder.addCardString('D002E840     * 71          020 ----');
    builder.addCardString('D002E845          056 * 72 010 $  1');
    builder.addCardString('D002E850     * 72 020 Q  0 050 ----');
    builder.addCardString('D002E855          020 Q  1 050 Q  0');
    builder.addCardString('D002E860          020 K  4 050 Q  1');
    builder.addCardString('D002E865     * 79 010 ----');
    builder.addCardString('D002E870     * 80 024 K  2 052 * 89     REFILL SPARE TANK');
    builder.addCardString('D002E875          020 Q  0 056 * 81');
    builder.addCardString('D002E880     * 81 050 Q  1 020 ----');
    builder.addCardString('D002E885          056 * 82 004 K  4');
    builder.addCardString('D002E890     * 82 056 * 83 020 ----');
    builder.addCardString('D002E895     * 83 050 Q  0 060 ----');

    builder.addCardString('D002E900     * 89 010 ----');
    builder.addCardString('D002E910     * 90                  ,    LOCAL STORAGE');
    builder.addCardString('D002E999        /     D002 010,7000/');

    builder.addCardString('D003E000+       $              M  0     EXTENSION OF G6 FOR \'ALL ----\'');
    builder.addCardString('D003E010          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D003E020          020 P  1 124 K 19');
    builder.addCardString('D003E030          025 K 19 002 * 10     JUMP IF TERMINAL');
    builder.addCardString('D003E040          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('D003E050          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D003E060          124 K 19 025 K 19     VERIFY TERMINAL');
    builder.addCardString('D003E070          001 E  6 004 H 19');
    builder.addCardString('D003E080          020 W 10 065 T  0');
    builder.addCardString('D003E090          023 T  0 002 * 20     JUMP IF \'STEPS\'');
    builder.addCardString('D003E100          020 W  8 065 T  0');
    builder.addCardString('D003E110          023 T  0 002 * 20     JUMP IF \'PARTS\'');
    builder.addCardString('D003E120          020 W  4 065 T  0');
    builder.addCardString('D003E130          023 T  0 002 * 30     JUMP IF \'FORMS\'');
    builder.addCardString('D003E140          020 W 12 065 T  0');
    builder.addCardString('D003E150          023 T  0 002 * 40     JUMP IF \'VALUES\'');
    builder.addCardString('D003E160          010 E  6              ELSE MALFORMED OR ILLEGAL');
    builder.addCardString('D003E170     * 10 020 $  0 010 * 50     TYPE ALL (STEPS FIRST)');
    builder.addCardString('D003E180          020 $  0 010 * 60     THEN FORMS');
    builder.addCardString('D003E190          010 D  4              THEN WADE INTO D4 FOR VALUES');
    builder.addCardString('D003E200     * 20 020 $  0 010 * 50     TYPE ALL STEPS (OR PARTS)');
    builder.addCardString('D003E210          010 X  5');
    builder.addCardString('D003E220     * 30 020 $  0 010 * 60     TYPE ALL FORMS');
    builder.addCardString('D003E230          010 X  5');
    builder.addCardString('D003E240     * 40 010 D  4              WADE INTO D4 FOR VALUES');
    builder.addCardString('D003E250     * 50 024 K  2 052 P 26     TYPE ALL STEPS (SUBROUTINE)');
    builder.addCardString('D003E260          020 Q 10 050 P 18     INITIALIZE P18');
    builder.addCardString('D003E270     * 51 020 A 42 050 S  1');
    builder.addCardString('D003E280          020 $  0 010 = 78     LINE FEED');
    builder.addCardString('D003E290          020 P 18 056 * 52');
    builder.addCardString('D003E300     * 52          020 ----');
    builder.addCardString('D003E310          001 P 26 050 P 18     EXIT VIA P26 WHEN DONE');
    builder.addCardString('D003E320          050 P 19 010 $  1');
    builder.addCardString('D003E330     * 53 020 P 19 052 * 54     TYPE STEPS WITHIN PART');
    builder.addCardString('D003E340     * 54 020 ---- 001 * 51');
    builder.addCardString('D003E350          050 P 19 056 P  3');
    builder.addCardString('D003E360          020 $  0 014 =  7     UNPACK TO S');
    builder.addCardString('D003E380          020 P 15 002 * 70     JUMP IF INTERRUPT SIGNAL');
    builder.addCardString('D003E390          020 $  0 010 = 78     TRANSMIT STEP');
    builder.addCardString('D003E400          010 * 53');
    builder.addCardString('D003E410     * 60 024 K  2 052 P 26     TYPE ALL FORMS (SUBROUTINE)');
    builder.addCardString('D003E430          020 Q 11 050 P 19');
    builder.addCardString('D003E440     * 61 020 A 42 050 S  1');
    builder.addCardString('D003E450          020 $  0 010 = 78     LINE FEED');
    builder.addCardString('D003E460          020 P 19 052 * 62');
    builder.addCardString('D003E470          024 K  2 052 * 63');
    builder.addCardString('D003E480     * 62 020 ---- 001 P 26     EXIT VIA P26 IF NO MORE FORMS');
    builder.addCardString('D003E490          050 P 19 056 P  3');
    builder.addCardString('D003E500          020 S  0 050 P 12     INITIALIZE OUTPUT STRING POINTER');
    builder.addCardString('D003E510          020 $  0 010 = 64     INSERT \'FORM\' IN OUTPUT STRING');
    builder.addCardString('D003E520              * 66     * 66');
    builder.addCardString('D003E525          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D003E530     * 63 020 ---- 050 T  0');
    builder.addCardString('D003E540          124 K 13 050 T  1');

    builder.addCardString('D003E550          020 T  0 124 K 11');
    builder.addCardString('D003E560          070   10 050 T  2');
    builder.addCardString('D003E570          020 J 14 025 T  2');
    builder.addCardString('D003E580          052 * 64 010 $  1');
    builder.addCardString('D003E590          120    0 004 T  1');
    builder.addCardString('D003E600     * 64 044 ---- 060 H 20');
    builder.addCardString('D003E610          020 $  0 010 = 36     CONVERT FROM NUMBER TO OUTPUT STRING');
    builder.addCardString('D003E620                 1        9');
    builder.addCardString('D003E630          020 A 80 050 P 11     INSERT COLON');
    builder.addCardString('D003E640          020 $  0 010 = 66');
    builder.addCardString('D003E650          020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('D003E660          020 $  0 010 = 66');
    builder.addCardString('D003E670          020 P 15 002 * 70     JUMP IF INTERRUPT SIGNAL');
    builder.addCardString('D003E680          020 $  0 010 = 78     TRANSMIT FORM NUMBER LINE');
    builder.addCardString('D003E690          020 $  0 014 =  7     UNPACK TO S');
    builder.addCardString('D003E710          020 $  0 010 = 78     TRANSMIT FORM');
    builder.addCardString('D003E720          010 * 61              LOOP');
    builder.addCardString('D003E760     * 66 053,0461,222,2200     \'FORM\'');
    builder.addCardString('D003E770     * 70 020 H 12 024 K 32     FAKE AN \'RI\'');
    builder.addCardString('D003E780          050 H  9 010 X 10,      IN H9 AND JUMP');
    builder.addCardString('D003E999        /     D003 010,7000/');

    builder.addCardString('D004E000+       $              M  0     EXTENSION OF G6 VIA D3 FOR \'ALL VALUE');
    builder.addCardString('D004E010          120    0 050 P 18     INITIALIZE PHASE TO 0');
    builder.addCardString('D004E015          020 A 42 050 S  1');
    builder.addCardString('D004E020          020 $  0 010 = 78     LINE FEED');
    builder.addCardString('D004E025     *  0 020 K  4 050 P 19     RESET LINE FEED FLAG');
    builder.addCardString('D004E030          020 * 90 050 P 30     INITIALIZE POINTER');
    builder.addCardString('D004E040     *  1 020 P 30 052 *  2');
    builder.addCardString('D004E050     *  2 020 ---- 050 H 27     PICK UP NEXT CHARACTER WORD');
    builder.addCardString('D004E060          052 *  3 124 K 34');
    builder.addCardString('D004E070          025 K 34 001 *  5     JUMP IF NOT LETTER');
    builder.addCardString('D004E080     *  3 020 ---- 050 H 30     PICK UP HEAD OR VALUE');
    builder.addCardString('D004E090          002 *  4 071    5     JUMP IF SCALAR');
    builder.addCardString('D004E100          001 * 20 071    1     JUMP IF MATRIX');
    builder.addCardString('D004E110          001 * 10 010 *  5     JUMP IF VECTOR ELSE UNDEFINED');
    builder.addCardString('D004E120     *  4 023 P 18 001 *  5     JUMP UNLESS SCALAR PHASE');
    builder.addCardString('D004E125          050 P 19 020 K  4     SET LF FLAG');
    builder.addCardString('D004E130          050 H 28 050 H 29');
    builder.addCardString('D004E140          020 $  0 010 * 50     TYPE SCALAR VALUE');
    builder.addCardString('D004E150     *  5 020 P 30 024 K  3     ADVANCE SCANNER');
    builder.addCardString('D004E152          050 P 30 025 * 91');
    builder.addCardString('D004E154          001 *  1 010 $  1     LOOP IF MORE');
    builder.addCardString('D004E156          020 P 19 001 *  6     JUMP IF NO LINE FEED FLAG');
    builder.addCardString('D004E158          020 A 42 050 S  1');
    builder.addCardString('D004E160          020 $  0 010 = 78     LINE FEED');
    builder.addCardString('D004E165     *  6 020 P 18 024 K 26     ADVANCE PHASE');
    builder.addCardString('D004E170          050 P 18 025 K 36');
    builder.addCardString('D004E175          001 *  0 010 X  5     JUMP IF MORE PHASES, ELSE EXIT');
    builder.addCardString('D004E180     * 10 020 P 18 071    6     VECTOR');
    builder.addCardString('D004E185          002 *  5 020 H 27     JUMP IF NOT VECTOR PHASE');
    builder.addCardString('D004E190          050 P 27 020 H 30');
    builder.addCardString('D004E200     * 11 050 P 28 020 P 28');
    builder.addCardString('D004E205          056 * 12 024 K  1');
    builder.addCardString('D004E210     * 12 056 * 13 020 ----');
    builder.addCardString('D004E215          001 * 30 010 $  1');
    builder.addCardString('D004E220          050 P 28 124 K 42');
    builder.addCardString('D004E230     * 13 050 H 28 020 ----');
    builder.addCardString('D004E235          050 H 30 010 $  1');
    builder.addCardString('D004E240          020 P 27 050 H 27');
    builder.addCardString('D004E245          020 K  4 050 H 29');
    builder.addCardString('D004E250          020 $  0 010 * 50     TYPE VECTOR ELEMENT');
    builder.addCardString('D004E255          014 * 11              LOOP');
    builder.addCardString('D004E260     * 20 020 P 18 071    5     MATRIX');
    builder.addCardString('D004E265          002 *  5 010 $  1');
    builder.addCardString('D004E270          020 H 27 050 P 27');
    builder.addCardString('D004E275          020 H 30 050 P 28');
    builder.addCardString('D004E280     * 21 020 P 28 056 * 22');
    builder.addCardString('D004E290     * 22          020 ----');
    builder.addCardString('D004E300          001 * 30 050 P 28');
    builder.addCardString('D004E310          050 P 29 010 $  1');
    builder.addCardString('D004E320     * 23 020 P 29 052 * 24');
    builder.addCardString('D004E330          024 K  2 052 * 25');
    builder.addCardString('D004E340     * 24 020 ---- 001 * 21');
    builder.addCardString('D004E350          050 P 29 124 K 42');
    builder.addCardString('D004E360          050 H 29 020 P 28');

    builder.addCardString('D004E370          124 K 42 050 H 28');
    builder.addCardString('D004E380          020 P 27 050 H 27');
    builder.addCardString('D004E390     * 25 020 ---- 050 H 30');
    builder.addCardString('D004E400          020 $  0 010 * 50     TYPE MATRIX ELEMENT');
    builder.addCardString('D004E410          010 * 23              LOOP');
    builder.addCardString('D004E420     * 30 020 A 42 050 S  1');
    builder.addCardString('D004E430          020 $  0 010 = 78     LINE FEED');
    builder.addCardString('D004E440          010 *  5');
    builder.addCardString('D004E500     * 50 050 P 31 010 $  1     SAVE LINK');
    builder.addCardString('D004E502          021 I  7 050 * 93');
    builder.addCardString('D004E504          020 H 28 001 * 53');
    builder.addCardString('D004E506          025 * 92 002 * 51');
    builder.addCardString('D004E508          020 I  3 014 * 51');
    builder.addCardString('D004E510     * 51 020 I  4 024 * 93');
    builder.addCardString('D004E512          050 * 93 010 $  1');
    builder.addCardString('D004E514          020 H 29 001 * 53');
    builder.addCardString('D004E516          025 * 92 002 * 52');
    builder.addCardString('D004E518          020 I  2 014 * 52');
    builder.addCardString('D004E520     * 52 020 I  3 024 * 93');
    builder.addCardString('D004E522          050 * 93 010 $  1');
    builder.addCardString('D004E524     * 53 020 S  0 050 P 12     INITIALIZE OUTPUT LINE');
    builder.addCardString('D004E526     * 69 020 * 93 002 * 54     JUMP WHEN ALL SPACES ARE IN');
    builder.addCardString('D004E528          024 I  1 050 * 93');
    builder.addCardString('D004E530          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D004E532          010 * 69              LOOP');
    builder.addCardString('D004E534     * 54 020 H 27 050 P 11');
    builder.addCardString('D004E536          020 $  0 010 = 66     INSERT LETTER');
    builder.addCardString('D004E538          020 H 28 001 * 56     JUMP IF NO SUBSCRIPTS');
    builder.addCardString('D004E540          020 A 73 050 P 11');
    builder.addCardString('D004E542          020 $  0 010 = 66     INSERT LEFT PARENTHESIS');
    builder.addCardString('D004E544          020 H 28 070   12');
    builder.addCardString('D004E546          050 H 20 010 $  1');
    builder.addCardString('D004E548          020 $  0 010 = 36     CONVERT FIRST SUBSCRIPT');
    builder.addCardString('D004E550                 1        2');
    builder.addCardString('D004E552          020 H 29 001 * 55     JUMP IF NO 2ND SUBSCRIPT');
    builder.addCardString('D004E554          020 A 59 050 P 11');
    builder.addCardString('D004E556          020 $  0 010 = 66     INSERT COMMA');
    builder.addCardString('D004E558          020 H 29 070   12');
    builder.addCardString('D004E560          050 H 20 010 $  1');
    builder.addCardString('D004E562          020 $  0 010 = 36     CONVERT SECOND SUBSCRIPT');
    builder.addCardString('D004E564                 1        2');
    builder.addCardString('D004E566     * 55 020 A112 050 P 11');
    builder.addCardString('D004E568          020 $  0 010 = 66     INSERT RIGHT PAREN');
    builder.addCardString('D004E570     * 56 020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D004E572          020 A 43 050 P 11');
    builder.addCardString('D004E574          020 $  0 010 = 66     INSERT \'=\'');
    builder.addCardString('D004E576          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D004E578          020 H 30 124 K 11');
    builder.addCardString('D004E580          071    1 072   32');
    builder.addCardString('D004E582          050 * 94 024 I  3');
    builder.addCardString('D004E584          001 * 65 025 I  9     JUMP IF SCIENTIFIC NOTATION REQUIRED');
    builder.addCardString('D004E586          002 * 65 020 * 94     JUMP IF SCIENTIFIC NOTATION REQUIRED');
    builder.addCardString('D004E588          002 * 71 021 I  1     JUMP IF NEGATIVE XP');
    builder.addCardString('D004E589     * 71 025 I  6 050 * 93     SET SPACE COUNTER');
    builder.addCardString('D004E590          020 H 30 071    9');

    builder.addCardString('D004E592          002 * 57 020 * 93');
    builder.addCardString('D004E594          024 I  1 050 * 93     ALLOW FOR MINUS SIGN');
    builder.addCardString('D004E596     * 57 020 * 93 002 * 58');
    builder.addCardString('D004E598          024 K  1 050 * 93');
    builder.addCardString('D004E600          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D004E602          010 * 57');
    builder.addCardString('D004E604     * 58 020 H 30 124 K 12');
    builder.addCardString('D004E606          025 K 12 001 * 59     JUMP IF PLUS');
    builder.addCardString('D004E608          020 A 44 050 P 11');
    builder.addCardString('D004E610          020 $  0 010 = 66     INSERT MINUS SIGN');
    builder.addCardString('D004E612     * 59 020 * 94 001 * 63');
    builder.addCardString('D004E614          024 I  1 056 * 61');
    builder.addCardString('D004E616          020 J 14 025 * 94');
    builder.addCardString('D004E618          056 * 60 020 I  8');
    builder.addCardString('D004E620          025 * 94 056 * 62');
    builder.addCardString('D004E622          020 H 30 124 K 13');
    builder.addCardString('D004E624     * 60 071   40 044 ----');
    builder.addCardString('D004E626          050 * 94 060 H 20');
    builder.addCardString('D004E628          020 $  0 010 = 36     CONVERT INTEGRAL PART');
    builder.addCardString('D004E630     * 61        1     ----');
    builder.addCardString('D004E632          023 * 94 002 * 68     JUMP IF NO FRACTIONAL PART');
    builder.addCardString('D004E634     * 64 020 A 27 050 P 11');
    builder.addCardString('D004E636          020 $  0 010 = 66     INSERT DECIMAL POINT');
    builder.addCardString('D004E638          020 * 94 050 H 20');
    builder.addCardString('D004E640          020 $  0 010 = 36     CONVERT FRACTIONAL PART');
    builder.addCardString('D004E642     * 62        4     ----');
    builder.addCardString('D004E644          010 * 68              JUMP TO PUT IN CR+EOM');
    builder.addCardString('D004E646     * 63 020 I  8 025 * 94');
    builder.addCardString('D004E647          056 * 62 010 $  1');
    builder.addCardString('D004E648          020 H 30 124 K 13');
    builder.addCardString('D004E650          050 * 94 010 * 64');
    builder.addCardString('D004E652     * 65 020 $  0 010 = 64     SCIENTIFIC NOTATION');
    builder.addCardString('D004E653              * 96     * 96     INSERT 5 SPACE');
    builder.addCardString('D004E654          020 H 30 124 K 12');
    builder.addCardString('D004E655          025 K 12 001 * 66     JUMP IF NO MINUS SIGN');
    builder.addCardString('D004E656          020 A 44 014 * 66     INSERT MINUS');
    builder.addCardString('D004E658     * 66 020 A 14 050 P 11     INSERT SPACE');
    builder.addCardString('D004E660          020 $  0 010 = 66');
    builder.addCardString('D004E662          020 H 30 124 K 13');
    builder.addCardString('D004E664          071   40 044 N  8');
    builder.addCardString('D004E666          050 * 93 060 H 20');
    builder.addCardString('D004E668          020 $  0 010 = 36     CONVERT WHOLE NUMBER OF COEF');
    builder.addCardString('D004E670                 1        1');
    builder.addCardString('D004E671          023 * 93 002 * 70     JUMP IF NO FRACTIONAL PART');
    builder.addCardString('D004E672          020 A 27 050 P 11');
    builder.addCardString('D004E674          020 $  0 010 = 66     INSERT DECIMAL PT');
    builder.addCardString('D004E676          020 * 93 050 H 20');
    builder.addCardString('D004E678          020 $  0 010 = 36     CONVERT FRACTION OF COEF');
    builder.addCardString('D004E680                 4        8');
    builder.addCardString('D004E682     * 70 020 $  0 010 = 64     INSERT .10*');
    builder.addCardString('D004E684              * 95     * 95');
    builder.addCardString('D004E686          020 * 94 006 * 67     JUMP IF SFX PLUS');
    builder.addCardString('D004E688          020 A 73 050 P 11     INSERT (');
    builder.addCardString('D004E690          020 $  0 010 = 66');
    builder.addCardString('D004E692          020 A 44 050 P 11     INSERT -');

    builder.addCardString('D004E694          020 $  0 010 = 66');
    builder.addCardString('D004E696     * 67 021 * 94 050 H 20');
    builder.addCardString('D004E698          020 $  0 010 = 36     CONVERT SFX');
    builder.addCardString('D004E700                 1        2');
    builder.addCardString('D004E702          020 * 94 002 * 68     JUMP IF SFX PLUS');
    builder.addCardString('D004E704          020 A112 050 P 11     INSERT )');
    builder.addCardString('D004E706          020 $  0 010 = 66');
    builder.addCardString('D004E708     * 68 020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('D004E710          020 $  0 010 = 66');
    builder.addCardString('D004E712          020 P 15 001 * 72     JUMP IF NO INTERRUPT');
    builder.addCardString('D004E713          020 H 12 024 K 32     FAKE AN \'RI\'');
    builder.addCardString('D004E714          050 H  9 010 X 10       IN H9 AND JUMP');
    builder.addCardString('D004E715     * 72 020 P 31 010 = 78     TRANSMIT (PASS LINK ON TO =80)');
    builder.addCardString('D004E716     * 90     A 17     A 17');
    builder.addCardString('D004E718     * 91     A122     A122');
    builder.addCardString('D004E720     * 92+          10   27');
    builder.addCardString('D004E722     * 93                       LOCAL STORAGE');
    builder.addCardString('D004E724     * 94                       LOCAL STORAGE');
    builder.addCardString('D004E726     * 95 020,0011,407,6200     .10*');
    builder.addCardString('D004E728     * 96 007,0160,340,7016     FIVE SPACES');
    builder.addCardString('D004E730          100,0000,000,0000,');
    builder.addCardString('D004E999        /     D  4 010,7000/');

    builder.addCardString('D005E000+       $              M  0     OCTAL IN AND OUT');
    builder.addCardString('D005E010          020 $  0 010 =  1');
    builder.addCardString('D005E020          020 P  1 124 A 14');
    builder.addCardString('D005E030          025 A 14 001 E  6');
    builder.addCardString('D005E040          020 $  0 010 =  1');
    builder.addCardString('D005E050          020 P  1 124 A 61');
    builder.addCardString('D005E060          025 A 61 001 E  6');
    builder.addCardString('D005E065          020 $  0 010 =  1');
    builder.addCardString('D005E070          120    0 050 P 18');
    builder.addCardString('D005E080     *  0 020 P  1 124 K 35');
    builder.addCardString('D005E090          025 K 35 001 *  4');
    builder.addCardString('D005E100          020 P  1 072    3');
    builder.addCardString('D005E110          020 P 18 077    3');
    builder.addCardString('D005E120          050 P 18 010 $  1');
    builder.addCardString('D005E130          020 $  0 010 =  1');
    builder.addCardString('D005E140          010 *  0');
    builder.addCardString('D005E150     *  4 020 $  0 010 =  3');
    builder.addCardString('D005E160          001 * 10 010 $  1');
    builder.addCardString('D005E170          120    0 050 P 19');
    builder.addCardString('D005E180     *  1 020 P  1 124 K 35');
    builder.addCardString('D005E190          025 K 35 001 *  2');
    builder.addCardString('D005E200          020 P  1 072    3');
    builder.addCardString('D005E210          020 P 19 077    3');
    builder.addCardString('D005E220          050 P 19 010 $  1');
    builder.addCardString('D005E230          020 $  0 010 =  2');
    builder.addCardString('D005E240          010 *  1');
    builder.addCardString('D005E250     *  2 020 P 18 056 *  3');
    builder.addCardString('D005E260     *  3 020 P 19 050 ----');
    builder.addCardString('D005E270          014 X 12');
    builder.addCardString('D005E280     * 10 020 P 18 056 * 11');
    builder.addCardString('D005E290     * 11          020 ----');
    builder.addCardString('D005E300          050 P 19 010 $  1');
    builder.addCardString('D005E310          020 A 61 050 S  1');
    builder.addCardString('D005E320          050 S  3 020 A 14');
    builder.addCardString('D005E330          050 S  2 020 S  0');
    builder.addCardString('D005E340          024 K 43 050 P 12');
    builder.addCardString('D005E360          020 P 18 071   68');
    builder.addCardString('D005E370          020 $  0 010 * 50');
    builder.addCardString('D005E380                          4');
    builder.addCardString('D005E390          020 $  0 010 = 62');
    builder.addCardString('D005E400          020 $  0 010 = 62');
    builder.addCardString('D005E410          020 P 19 071   38');
    builder.addCardString('D005E420          020 $  0 010 * 50');
    builder.addCardString('D005E430                          3');
    builder.addCardString('D005E440          020 $  0 010 = 62');
    builder.addCardString('D005E450          020 $  0 010 * 50');
    builder.addCardString('D005E460                          4');
    builder.addCardString('D005E470          020 $  0 010 = 62');
    builder.addCardString('D005E480          020 $  0 010 * 50');
    builder.addCardString('D005E490                          3');
    builder.addCardString('D005E500          020 $  0 010 = 62');
    builder.addCardString('D005E510          020 P 19 071   68');
    builder.addCardString('D005E520          020 $  0 010 * 50');
    builder.addCardString('D005E530                          4');

    builder.addCardString('D005E540          020 A 42 050 P 11');
    builder.addCardString('D005E550          020 $  0 010 = 66');
    builder.addCardString('D005E560          010 X 14');
    builder.addCardString('D005E570     * 50 024 K  2 052 * 51');
    builder.addCardString('D005E580          024 K  2 052 * 59');
    builder.addCardString('D005E590     * 51 021 ---- 050 P 27');
    builder.addCardString('D005E600     * 53 120    0 075    3');
    builder.addCardString('D005E610          025 K  1 002 * 52');
    builder.addCardString('D005E620          020 A 48 014 * 52');
    builder.addCardString('D005E630     * 52 024 K  1 050 P 11');
    builder.addCardString('D005E640          020 $  0 010 = 66');
    builder.addCardString('D005E650          020 P 27 024 K  1');
    builder.addCardString('D005E660          050 P 27 001 * 53');
    builder.addCardString('D005E670     * 59 010 ----         ,');
    builder.addCardString('D005E999        /     D005 010,7000/');

    builder.addCardString('D006E000+       $              M  0     EXTENSION OF G6 FOR VALUES');
    builder.addCardString('D006E005     *  0 020 Q  6 001 X  5     QUIT WHEN Q6-Q7 EMPTY');
    builder.addCardString('D006E015          020 Q  7 002 * 20     JUMP IF EXPRESSION + VALUE');
    builder.addCardString('D006E020          022 Q  7 001 * 10     JUMP IF -1 FOR BLANK');
    builder.addCardString('D006E025          020 Q  7 052 *  1');
    builder.addCardString('D006E030     *  1 020 ---- 071    5');
    builder.addCardString('D006E035          001 * 40 010 * 30     JUMP IF MATRIX ELSE VECTOR');
    builder.addCardString('D006E040     * 10 020 A 42 050 S  1     UNDERLINE CALLS FOR LINE FEED');
    builder.addCardString('D006E045          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D006E050          020 P 15 002 * 80     JUMP IF INTERRUPT');
    builder.addCardString('D006E052     * 11 020 Q  6 001 X 14     EXIT VIA X14 IF LAST ITEM');
    builder.addCardString('D006E055          020 $  0 010 = 78     TRANSMIT');
    builder.addCardString('D006E060          010 *  0');
    builder.addCardString('D006E062     * 20 020 S  0 050 P 12');
    builder.addCardString('D006E065          020 Q  7 050 H 30     MOVE VALUE');
    builder.addCardString('D006E066          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D006E067          020 Q  7 124 K  5');
    builder.addCardString('D006E070          025 I  7 002 * 22     JUMP IF EXPRESSION IS 8 OR MORE CHARA');
    builder.addCardString('D006E075          020 Q  7 124 K  5');
    builder.addCardString('D006E080          025 I  7 050 P 18');
    builder.addCardString('D006E085     * 21 020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D006E090          020 P 18 024 K  1');
    builder.addCardString('D006E095          050 P 18 001 * 21     LOOP UNTIL ALL LEADING SPACE INSERTE');
    builder.addCardString('D006E100     * 22 020 Q  7 052 * 23');
    builder.addCardString('D006E105     * 23 020 ---- 050 P 11');
    builder.addCardString('D006E110          020 $  0 010 = 66     INSERT CHARACTER');
    builder.addCardString('D006E115          020 * 23 024 K  2');
    builder.addCardString('D006E120          052 * 23 020 Q  7');
    builder.addCardString('D006E125          124 K  5 025 K  1');
    builder.addCardString('D006E130          056 Q  7 002 * 23     LOOP UNTIL EXPRESSION COPIED TO S');
    builder.addCardString('D006E135          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D006E145          020 $  0 010 * 60     CONVERT VALUE ETC');
    builder.addCardString('D006E160          010 * 11');
    builder.addCardString('D006E165     * 30 020 Q  7 125 K  4     VECTOR');
    builder.addCardString('D006E170          050 P 21 052 * 31');
    builder.addCardString('D006E175          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D006E180     * 31 020 ---- 050 P 19');
    builder.addCardString('D006E185     * 32 020 P 19 056 * 33');
    builder.addCardString('D006E190          024 K  1 010 $  1');
    builder.addCardString('D006E195     * 33 056 * 34 020 ----');
    builder.addCardString('D006E200          001 *  0 010 $  1     JUMP WHEN DONE');
    builder.addCardString('D006E205          050 P 19 124 K 42');
    builder.addCardString('D006E210     * 34 050 H 28 020 ----');
    builder.addCardString('D006E215          050 H 30 010 $  1');
    builder.addCardString('D006E220          020 K  4 050 H 29');
    builder.addCardString('D006E225          020 $  0 010 * 50     CONVERT LABEL');
    builder.addCardString('D006E230          020 $  0 010 * 60     CONVERT VALUE');
    builder.addCardString('D006E235          020 $  0 010 = 78     TRANSMIT');
    builder.addCardString('D006E240          010 * 32              LOOP');
    builder.addCardString('D006E245     * 40 020 Q  7 125 K  4     MATRIX');
    builder.addCardString('D006E250          050 P 21 052 * 41');
    builder.addCardString('D006E255          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D006E260     * 41 020 ---- 050 P 18');
    builder.addCardString('D006E265     * 42 020 P 18 056 * 43');

    builder.addCardString('D006E270     * 43          020 ----');
    builder.addCardString('D006E275          001 *  0 050 P 18     JUMP WHEN DONE');
    builder.addCardString('D006E280          050 P 19 010 $  1');
    builder.addCardString('D006E285     * 44 020 P 19 052 * 45');
    builder.addCardString('D006E290          024 K  2 052 * 46');
    builder.addCardString('D006E295     * 45 020 ---- 001 * 42     JUMP IF DONE WITH ROW');
    builder.addCardString('D006E300          050 P 19 124 K 42');
    builder.addCardString('D006E305          050 H 29 020 P 18');
    builder.addCardString('D006E310          124 K 42 050 H 28');
    builder.addCardString('D006E315     * 46 020 ---- 050 H 30');
    builder.addCardString('D006E320          020 $  0 010 * 50     CONVERT LABEL');
    builder.addCardString('D006E325          020 $  0 010 * 60     CONVERT VALUE');
    builder.addCardString('D006E330          020 $  0 010 = 78     TRANSMIT');
    builder.addCardString('D006E335          010 * 44');
    builder.addCardString('D006E340     * 50 024 K  2 052 * 59     CONVERT LABEL SUBROUTINE');
    builder.addCardString('D006E342          020 S  0 050 P 12');
    builder.addCardString('D006E345          020 H 28 025 * 92     COMPUTE AND INSERT INITIAL SPACES');
    builder.addCardString('D006E350          006 * 51 021 I  4');
    builder.addCardString('D006E355     * 51 010 * 52 021 I  3');
    builder.addCardString('D006E360     * 52 050 * 90 020 H 29');
    builder.addCardString('D006E365          001 * 55 025 * 92');
    builder.addCardString('D006E370          006 * 53 020 I  2');
    builder.addCardString('D006E375     * 53 010 * 54 020 I  3');
    builder.addCardString('D006E380     * 54 024 * 90 050 * 90');
    builder.addCardString('D006E385     * 55 020 * 90 002 * 56     JUMP WHEN ALL SPACES ARE IN');
    builder.addCardString('D006E390          024 I  1 050 * 90');
    builder.addCardString('D006E395          020 $  0 010 = 62');
    builder.addCardString('D006E400          010 * 55');
    builder.addCardString('D006E405     * 56 020 P 21 050 P 11     INSERT LETTER');
    builder.addCardString('D006E410          020 $  0 010 = 66');
    builder.addCardString('D006E415          020 A 73 050 P 11     INSERT LEFT PARENTHESIS');
    builder.addCardString('D006E420          020 $  0 010 = 66');
    builder.addCardString('D006E425          020 H 28 070   12');
    builder.addCardString('D006E430          050 H 20 010 $  1');
    builder.addCardString('D006E435          020 $  0 010 = 36     CONVERT FIRST INDEX');
    builder.addCardString('D006E440                 1        2');
    builder.addCardString('D006E445          020 H 29 001 * 57     JUMP IF NO SECOND INDEX');
    builder.addCardString('D006E450          020 A 59 050 P 11     INSERT COMMA');
    builder.addCardString('D006E455          020 $  0 010 = 66');
    builder.addCardString('D006E460          020 H 29 070   12');
    builder.addCardString('D006E465          050 H 20 010 $  1');
    builder.addCardString('D006E470          020 $  0 010 = 36     CONVERT SECOND INDEX');
    builder.addCardString('D006E475                 1        2');
    builder.addCardString('D006E480     * 57 020 A112 050 P 11');
    builder.addCardString('D006E485          020 $  0 010 = 66     INSERT RIGHT PARENTHESIS');
    builder.addCardString('D006E490     * 59 010 ----');
    builder.addCardString('D006E495     * 60 024 K  2 052 P 26     CONVERT VALUE ETC');
    builder.addCardString('D006E500          020 P 15 002 * 80     JUMP IF INTERRUPT');
    builder.addCardString('D006E505          020 P 12 025 * 93');
    builder.addCardString('D006E510          001 * 61 010 $  1     JUMP IF VALUE WILL FIT ON SAME LINE');
    builder.addCardString('D006E515          020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('D006E520          020 $  0 010 = 66');
    builder.addCardString('D006E522          020 H 30 050 P 30     SAVE VALUE AGAINST POSSIBLE CHOKE');
    builder.addCardString('D006E525          020 $  0 010 = 78     TRANSMIT FIRST PART');
    builder.addCardString('D006E527          020 P 30 050 H 30     RESTORE VALUE AFTER POSSIBLE CHOKE');

    builder.addCardString('D006E530          020 S  0 050 P 12');
    builder.addCardString('D006E535          020 $  0 010 = 64');
    builder.addCardString('D006E540              * 94     * 94');
    builder.addCardString('D006E545     * 61 020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D006E550          020 A 43 050 P 11     INSERT \'=\'');
    builder.addCardString('D006E555          020 $  0 010 = 66');
    builder.addCardString('D006E556          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D006E560          020 * 96 050 * 90     SET POTENTIAL SIGN POSITION');
    builder.addCardString('D006E565          020 H 30 124 K 11');
    builder.addCardString('D006E570          071    1 072   32');
    builder.addCardString('D006E575          050 * 91 024 I  3');
    builder.addCardString('D006E580          001 * 62 025 I  9     JUMP IF SCI NOTATION REQUIRED');
    builder.addCardString('D006E585          002 * 62 020 * 91     JUMP IF SCI NOTATION REQUIRED');
    builder.addCardString('D006E590          002 * 65 021 I  1');
    builder.addCardString('D006E592     * 65 050 T  0 020 * 90     ADJUST SIGN POSITION FOR SCALE FACTOR');
    builder.addCardString('D006E594          025 T  0 050 * 90');
    builder.addCardString('D006E596          071   21 052 * 90');
    builder.addCardString('D006E600     * 62 020 P 12 024 K  3');
    builder.addCardString('D006E605          025 * 90 002 * 63     JUMP IF SIGN POSITION IS NEXT');
    builder.addCardString('D006E610          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D006E615          010 * 62              LOOP');
    builder.addCardString('D006E620     * 63 020 H 30 124 K 12');
    builder.addCardString('D006E625          025 K 12 001 * 64     JUMP IF PLUS');
    builder.addCardString('D006E630          020 A 44 014 * 64     INSERT MINUS');
    builder.addCardString('D006E635     * 64 020 A 14 050 P 11     INSERT SPACE');
    builder.addCardString('D006E640          020 $  0 010 = 66');
    builder.addCardString('D006E642          020 * 91 024 I  3');
    builder.addCardString('D006E644          001 * 75 025 I  9     JUMP IF SCI NOTATION REQUIRED');
    builder.addCardString('D006E646          002 * 75 010 $  1     JUMP IF SCI NOTATION REQUIRED');
    builder.addCardString('D006E650          020 * 91 001 * 73');
    builder.addCardString('D006E655          024 I  1 056 * 71');
    builder.addCardString('D006E660          020 J 14 025 * 91');
    builder.addCardString('D006E665          056 * 70 020 I  8');
    builder.addCardString('D006E670          025 * 91 056 * 72');
    builder.addCardString('D006E675          020 H 30 124 K 13');
    builder.addCardString('D006E680     * 70 071   40 044 ----');
    builder.addCardString('D006E685          050 * 91 060 H 20');
    builder.addCardString('D006E690          020 $  0 010 = 36     CONVERT INTEGRAL PART');
    builder.addCardString('D006E695     * 71        1     ----');
    builder.addCardString('D006E700          023 * 91 002 * 78     JUMP IF NO FRACTIONAL PART');
    builder.addCardString('D006E705     * 74 020 A 27 050 P 11     INSERT DECIMAL POINT');
    builder.addCardString('D006E710          020 $  0 010 = 66');
    builder.addCardString('D006E715          020 * 91 050 H 20');
    builder.addCardString('D006E720          020 $  0 010 = 36     CONVERT FRACTIONAL PART');
    builder.addCardString('D006E725     * 72        4     ----');
    builder.addCardString('D006E730          010 * 78              JUMP TO CLOSE LINE');
    builder.addCardString('D006E735     * 73 020 I  8 025 * 91');
    builder.addCardString('D006E740          056 * 72 020 H 30');
    builder.addCardString('D006E745          124 K 13 050 * 91');
    builder.addCardString('D006E750          010 * 74');
    builder.addCardString('D006E775     * 75 020 H 30 124 K 13');
    builder.addCardString('D006E780          071   40 044 N  8');
    builder.addCardString('D006E785          050 * 90 060 H 20');
    builder.addCardString('D006E790          020 $  0 010 = 36     CONVERT WHOLE NUMBER OF COEF');
    builder.addCardString('D006E795                 1        1');

    builder.addCardString('D006E797          023 * 90 002 * 79     JUMP IF NO FRACTIONAL PART');
    builder.addCardString('D006E800          020 A 27 050 P 11     INSERT DECIMAL PT');
    builder.addCardString('D006E805          020 $  0 010 = 66');
    builder.addCardString('D006E810          020 * 90 050 H 20');
    builder.addCardString('D006E815          020 $  0 010 = 36     CONVERT FRACTION OF COEF');
    builder.addCardString('D006E820                 4        8');
    builder.addCardString('D006E825     * 79 020 $  0 010 = 64     INSERT .10*');
    builder.addCardString('D006E830              * 95     * 95');
    builder.addCardString('D006E835          020 * 91 006 * 77     JUMP IF SFX PLUS');
    builder.addCardString('D006E840          020 A 73 050 P 11     INSERT (');
    builder.addCardString('D006E845          020 $  0 010 = 66');
    builder.addCardString('D006E850          020 A 44 050 P 11     INSERT -');
    builder.addCardString('D006E855          020 $  0 010 = 66');
    builder.addCardString('D006E860     * 77 021 * 91 050 H 20');
    builder.addCardString('D006E865          020 $  0 010 = 36     CONVERT SFX');
    builder.addCardString('D006E870                 1        2');
    builder.addCardString('D006E875          020 * 91 002 * 78     JUMP IF SFX PLUS');
    builder.addCardString('D006E880          020 A112 050 P 11     INSERT )');
    builder.addCardString('D006E885          020 $  0 010 = 66');
    builder.addCardString('D006E890     * 78 020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('D006E895          020 $  0 010 = 66');
    builder.addCardString('D006E900          010 P 26              EXIT VIA P26');
    builder.addCardString('D006E902     * 81 020 $  0 010 = 17     POP Q6-Q7');
    builder.addCardString('D006E904     * 80 020 Q  6 002 * 81     JUMP IF Q6 HAS SOMETHING');
    builder.addCardString('D006E906          020 H 12 024 K 32     FAKE AN \'RI\'');
    builder.addCardString('D006E908          050 H  9 010 X 10       IN H9 AND JUMP');
    builder.addCardString('D006E910     * 90                       LOCAL STORAGE');
    builder.addCardString('D006E915     * 91                       LOCAL STORAGE');
    builder.addCardString('D006E920     * 92+          10   27');
    builder.addCardString('D006E925     * 93     S 50     S 50');
    builder.addCardString('D006E930     * 94 007,0160,340,7016     EIGHT SPACE MSG');
    builder.addCardString('D006E935          007,0160,350,0000');
    builder.addCardString('D006E940     * 95 020,0011,407,6200     .10*');
    builder.addCardString('D006E945     * 96     S 17     S 17,');
    builder.addCardString('D006E999        /     D006 010,7000/');

    builder.addCardString('D007E000+       $              M  0     EXTENSION OF G6 FOR VALUES IN A FORM');
    builder.addCardString('D007E002     *  0 020 S  0 050 P 12     SET POINTER FOR FORM');
    builder.addCardString('D007E004     *  1 020 K  4 050 H 21     RESET POINTERS TO -1');
    builder.addCardString('D007E006          050 H 22 050 H 23');
    builder.addCardString('D007E008     *  2 020 $  0 010 * 85     ADVANCE (OK EVEN AT RIGHT MARGIN)');
    builder.addCardString('D007E010          002 * 10 010 *  5     JUMP IF UNDERLINE, JUMP IF OTHER');
    builder.addCardString('D007E020          020 P 12 050 H 22     PERIOD--RECORD LOC\'N OF POINT');
    builder.addCardString('D007E022          020 $  0 010 * 85     ADVANCE (PERIOD SO FAR)');
    builder.addCardString('D007E024          002 * 12 010 *  1     JUMP IF UNDERLINE, LOOP IF OTHER');
    builder.addCardString('D007E026          020 H 22 050 H 23     PERIOD--RECORD SCI NOTATION BEGINNING');
    builder.addCardString('D007E028     *  3 020 $  0 010 * 85     ADVANCE');
    builder.addCardString('D007E030          005 *  4 010 E 30     JUMP IF OTHER, ELSE ERROR');
    builder.addCardString('D007E032     *  4 010 *  3 020 P 12     LOOP IF PERIOD');
    builder.addCardString('D007E034          025 H 23 025 * 97');
    builder.addCardString('D007E036          002 * 20 010 E 15     JUMP IF 7 OR MORE PERIODS, ELSE ERROR');
    builder.addCardString('D007E038     *  5 020 P 11 002 *  2     JUMP UNLESS END OF FORM');
    builder.addCardString('D007E040     *  6 020 Q  6 001 X 14     EXIT TO TRANSMIT IF NO EXCESS VALUES');
    builder.addCardString('D007E042          010 E  8              ELSE ERROR');
    builder.addCardString('D007E050     * 10 020 P 12 050 H 21     RECORD WHOLE (UNDERLINE SO FAR)');
    builder.addCardString('D007E052     * 11 020 $  0 010 * 85     ADVANCE');
    builder.addCardString('D007E054          002 * 11 010 * 20     LOOP IF UNDERLINE, JUMP IF OTHER');
    builder.addCardString('D007E056          020 P 12 050 H 22     RECORD LOC\'N OF POINT');
    builder.addCardString('D007E058          020 $  0 010 * 85     ADVANCE (AFTER THE POINT)');
    builder.addCardString('D007E060          002 * 12 010 * 20     JUMP IF UNDERLINE, JUMP IF OTHER');
    builder.addCardString('D007E062          010 E 30              ERROR IF ANOTHER PERIOD');
    builder.addCardString('D007E064     * 12 020 $  0 010 * 85     ADVANCE');
    builder.addCardString('D007E066          002 * 12 010 * 20     LOOP IF UNDERLINE, JUMP IF OTHER');
    builder.addCardString('D007E068          020 P 12 050 P 30     SAVE POINTER IF PERIOD');
    builder.addCardString('D007E070          020 $  0 010 * 85     ADVANCE TO CHECK NEXT CHARACTER');
    builder.addCardString('D007E072          002 E 30 010 * 17     ERROR IF UNDERLINE, JUMP IF OTHER');
    builder.addCardString('D007E074          010 E 30              ERROR IF PERIOD');
    builder.addCardString('D007E100     * 20 020 P 12 050 P 30     SAVE POINTER FOR END OF FIELD');
    builder.addCardString('D007E101     * 17 020 Q  6 001 E 24     ERROR IF NO ENTRY FOR THE FIELD');
    builder.addCardString('D007E102          020 Q  7 002 * 22     JUMP IF NOT VACUOUS');
    builder.addCardString('D007E104          022 Q  7 002 E 25     ERROR IF NOT SIMPLY -1 VACUOUS FLAG');
    builder.addCardString('D007E106          020 H 21 002 * 19');
    builder.addCardString('D007E108          020 H 22 010 * 19');
    builder.addCardString('D007E112     * 18 020 A 14 050 ----');
    builder.addCardString('D007E114     * 21 020 P 12 024 K  3');
    builder.addCardString('D007E116     * 19 050 P 12 056 * 18');
    builder.addCardString('D007E118          025 P 30 001 * 18     LOOP TILL FIELD FILLED WITH SPACES');
    builder.addCardString('D007E120          010 * 56              JUMP TO POP Q7 AND CARRY ON');
    builder.addCardString('D007E122     * 22 020 H 23 002 * 60     JUMP IF SCIENTIFIC NOTATION');
    builder.addCardString('D007E124          120    0 050 P 18     CLEAR W,D TO ZERO');
    builder.addCardString('D007E126          050 P 19 020 H 21');
    builder.addCardString('D007E128          001 * 24 020 H 22     JUMP IF NO WHOLE NUMBER');
    builder.addCardString('D007E130          002 * 23 020 P 30     JUMP IF THERE WAS A POINT');
    builder.addCardString('D007E132     * 23 025 H 21 050 P 18     SET W');
    builder.addCardString('D007E134          020 H 22 001 * 25     JUMP IF NO POINT');
    builder.addCardString('D007E136     * 24 020 P 30 025 K  3');
    builder.addCardString('D007E138          025 H 22 050 P 19     SET D');
    builder.addCardString('D007E140     * 25 020 Q  7 124 K 11');
    builder.addCardString('D007E142          071    1 072   11');
    builder.addCardString('D007E144          050 P 27 072   21');

    builder.addCardString('D007E146          024 P 27 050 P 27     SET S (+ OR -) IN P27');
    builder.addCardString('D007E148          020 Q  7 124 K 13');
    builder.addCardString('D007E150          050 H 26 020 * 98');
    builder.addCardString('D007E152          025 P 27 025 P 19     (NOTE MQ IS CLEAR FOR FOLLOWING)');
    builder.addCardString('D007E154          002 $  1 120    0     JUMP IF DIGITS TO BE ROUNDED');
    builder.addCardString('D007E156          025 * 95 005 $  1     JUMP IF LESS THAN 10 TO BE ROUNDED');
    builder.addCardString('D007E158          120    0 024 * 94');
    builder.addCardString('D007E160          052 * 26 056 * 27');
    builder.addCardString('D007E162     * 26 020 ---- 072    1');
    builder.addCardString('D007E164          024 H 26 050 T  0');
    builder.addCardString('D007E166     * 27 072   39 044 ----     ROUND');
    builder.addCardString('D007E168     * 28 060 H 26 050 P 28');
    builder.addCardString('D007E170          050 P 29 023 H 26');
    builder.addCardString('D007E171          001 * 34 050 P 27     JUMP IF NONZERO AFTER ROUNDING');
    builder.addCardString('D007E172          050 H 24 020 H 21');
    builder.addCardString('D007E173          002 * 36 010 * 50     JUMP IF WHOLE PART ELSE FOR FRACTION');
    builder.addCardString('D007E174     * 34 020 T  0 025 N  9');
    builder.addCardString('D007E176          001 * 30 020 P 27     JUMP UNLESS ROUNDED TO EXTRA DIGIT');
    builder.addCardString('D007E178          024 K  3 050 P 27     INCREASE S BY ONE');
    builder.addCardString('D007E180     * 30 020 Q  7 124 K 12');
    builder.addCardString('D007E182          071    9 006 * 31');
    builder.addCardString('D007E186     * 31 020 K  3 050 H 24     SET Z A/C SIGN OF NUMBER');
    builder.addCardString('D007E192     * 36 021 P 27 025 K  3');
    builder.addCardString('D007E194     * 39 001 * 32 120    0     JUMP IF S NONNEGATIVE');
    builder.addCardString('D007E196     * 32 025 H 24 024 P 18');
    builder.addCardString('D007E198          001 E 31 024 H 21     ERROR IF NUMBER WON\'T FIT FIELD');
    builder.addCardString('D007E200          001 * 50 050 H 25     JUMP IF NO WHOLE PART TO FIELD');
    builder.addCardString('D007E202          020 H 21 025 K  3');
    builder.addCardString('D007E204          050 P 12 014 * 35');
    builder.addCardString('D007E206     * 33 020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('D007E208     * 35 020 P 12 024 K  3');
    builder.addCardString('D007E210          025 H 25 001 * 33     LOOP UNTIL ALL SPACES ARE IN');
    builder.addCardString('D007E212     * 37 021 H 24 002 * 40     JUMP IF NUMBER NON NEGATIVE (Z=0)');
    builder.addCardString('D007E214          020 A 44 050 P 11');
    builder.addCardString('D007E216          020 $  0 010 = 66     INSERT MINUS SIGN');
    builder.addCardString('D007E218     * 40 020 P 27 001 * 50     JUMP IF S NEGATIVE');
    builder.addCardString('D007E220          025 * 98 005 * 41     JUMP IF S LESS THAN 8');
    builder.addCardString('D007E222          120    0 050 P 29     SET FRACTION TO ZERO');
    builder.addCardString('D007E224     * 41 120    0 024 * 98');
    builder.addCardString('D007E226          024 K  3 056 * 45     SET TO CONVERT S+1(LIMIT 9) WHOLE DIG');
    builder.addCardString('D007E228          020 * 98 025 P 27');
    builder.addCardString('D007E230          001 * 44 025 P 19     JUMP IF S EXCEEDS 8');
    builder.addCardString('D007E232          001 * 42 120    0');
    builder.addCardString('D007E234     * 42 024 P 19 024 J 11');
    builder.addCardString('D007E236          056 * 43 120    0');
    builder.addCardString('D007E238     * 43 004 H 26 044 ----     SPLIT OFF FRACTIONAL DIGITS');
    builder.addCardString('D007E240          050 P 29 060 P 28');
    builder.addCardString('D007E242     * 44 020 P 28 050 H 20');
    builder.addCardString('D007E244          020 $  0 010 = 36     CONVERT WHOLE NUMBER DIGITS');
    builder.addCardString('D007E245     * 45        3     ----');
    builder.addCardString('D007E246          023 H 26 001 * 47     JUMP IF NONZERO OUTPUT');
    builder.addCardString('D007E247          023 P 19 002 * 47     JUMP IF NO FRACTION FIELD');
    builder.addCardString('D007E248          020 P 12 056 * 48');
    builder.addCardString('D007E249     * 48 020 A 14 050 ----     REPLACE ZERO BY SPACE');
    builder.addCardString('D007E250     * 47 020 H 22 001 * 54     JUMP IF NO POINT');

    builder.addCardString('D007E251          050 H 25 010 $  1');
    builder.addCardString('D007E252          020 $  0 010 * 80     FILL WITH ZEROS TO POINT');
    builder.addCardString('D007E256     * 50 020 H 22 050 P 12     SET POINTER AT DECIMAL POINT');
    builder.addCardString('D007E258          023 P 29 002 * 54     JUMP IF ZERO FRACTION');
    builder.addCardString('D007E260          020 P 27 024 K  3');
    builder.addCardString('D007E262          002 * 51 020 H 22');
    builder.addCardString('D007E264          025 P 27 050 H 25');
    builder.addCardString('D007E266          020 $  0 010 * 80     FILL LEAD ZEROS OF FRACTION FIELD');
    builder.addCardString('D007E268     * 51 020 P 27 002 * 58     JUMP IF S NONNEGATIVE');
    builder.addCardString('D007E270          024 P 19 025 * 98');
    builder.addCardString('D007E271          001 * 52 120    0     JUMP IF D+S EXCEEDS 8, ELSE SET 9 DIG');
    builder.addCardString('D007E272     * 52 024 * 99 014 * 57     SET D+S+1 DIGITS');
    builder.addCardString('D007E273     * 58 020 * 98 025 P 27');
    builder.addCardString('D007E274          025 P 19 002 * 57     JUMP IF 8-S EXCEEDS D');
    builder.addCardString('D007E275          024 P 19 014 * 57     SET 8-S DIGITS');
    builder.addCardString('D007E276     * 57 020 P 19 056 * 53     SET D DIGITS');
    builder.addCardString('D007E278          020 P 19 050 H 20');
    builder.addCardString('D007E280          020 $  0 010 = 36     CONVERT FRACTION DIGITS');
    builder.addCardString('D007E282     * 53        3     ----');
    builder.addCardString('D007E284     * 54 020 P 30 050 H 25');
    builder.addCardString('D007E286          020 $  0 010 * 80     FILL TRAILING ZEROS');
    builder.addCardString('D007E288     * 55 020 $  0 010 = 17     POP Q  7');
    builder.addCardString('D007E290     * 56 020 $  0 010 = 17     POP Q  7');
    builder.addCardString('D007E292          020 P 30 056 * 59');
    builder.addCardString('D007E294     * 59 050 P 12 020 ----     SET P12');
    builder.addCardString('D007E296          001 *  6 010 *  1     JUMP IF END OF FORM, ELSE LOOP BACK');
    builder.addCardString('D007E300     * 60 050 P 12 056 * 64     SCIENTIFIC NOTATION');
    builder.addCardString('D007E302          023 Q  7 001 * 62     JUMP IF NONZERO');
    builder.addCardString('D007E304          020 P 12 056 * 61     ZERO TREATMENT');
    builder.addCardString('D007E306     * 61 020 A 14 050 ----     OUTPUT SPACE');
    builder.addCardString('D007E308          020 A 48 050 P 11');
    builder.addCardString('D007E310          020 $  0 010 = 66     OUTPUT ZERO');
    builder.addCardString('D007E312          020 $  0 010 = 17     POP Q7');
    builder.addCardString('D007E314          010 * 21              JUMP TO FILL WITH SPACES ETC');
    builder.addCardString('D007E316     * 62 020 Q  7 124 K 12');
    builder.addCardString('D007E318          025 K 12 002 * 64');
    builder.addCardString('D007E320     * 63 020 A 14 014 * 64');
    builder.addCardString('D007E322     * 64 020 A 44 050 ----');
    builder.addCardString('D007E323          020 P 30 025 P 12');
    builder.addCardString('D007E324          025 * 96 024 * 98');
    builder.addCardString('D007E326          001 * 65 120    0');
    builder.addCardString('D007E328     * 65 024 * 98 056 * 70');
    builder.addCardString('D007E330          050 T  0 010 $  1');
    builder.addCardString('D007E332          020 J 14 025 T  0');
    builder.addCardString('D007E334          056 * 67 052 * 69');
    builder.addCardString('D007E336     * 66 020 Q  7 124 K 13');
    builder.addCardString('D007E338     * 67 071    1 024 ----');
    builder.addCardString('D007E340          070    1 025 N  9');
    builder.addCardString('D007E342          001 * 68 020 Q  7     JUMP UNLESS ROUNDS TO EXTRA DIGIT');
    builder.addCardString('D007E344          024 K 14 124 K 11');
    builder.addCardString('D007E346          024 N  8 050 Q  7');
    builder.addCardString('D007E348          071    1 025 * 93');
    builder.addCardString('D007E350          001 * 66 010 E 31     ERROR IF OVERFLOW ON EXPONENT');
    builder.addCardString('D007E352     * 68 024 N  9 071   40');
    builder.addCardString('D007E354          044 N  8 050 P 29');

    builder.addCardString('D007E356          060 H 20 010 $  1');
    builder.addCardString('D007E358          020 $  0 010 = 36     OUTPUT FIRST DIGIT');
    builder.addCardString('D007E360                 3        1');
    builder.addCardString('D007E362          020 P 12 024 K  3');
    builder.addCardString('D007E364          050 P 12 010 $  1     SKIP OVER DECIMAL POINT');
    builder.addCardString('D007E366          120    0 004 P 29');
    builder.addCardString('D007E368     * 69 044 ---- 060 H 20');
    builder.addCardString('D007E370          020 $  0 010 = 36     OUTPUT FRACTION');
    builder.addCardString('D007E372     * 70        3     ----');
    builder.addCardString('D007E374          020 P 30 025 K 43');
    builder.addCardString('D007E376          050 H 25 010 $  1');
    builder.addCardString('D007E378          020 $  0 010 * 80     FILL TRAILING ZEROS OF DIGITS FIELD');
    builder.addCardString('D007E380          020 Q  7 071    1');
    builder.addCardString('D007E382          072   32 050 H 20');
    builder.addCardString('D007E384          002 * 71 010 * 72');
    builder.addCardString('D007E386     * 71 020 A 14 014 * 73');
    builder.addCardString('D007E388     * 72 021 H 20 050 H 20');
    builder.addCardString('D007E390     * 73 020 A 44 050 P 11');
    builder.addCardString('D007E391          020 $  0 010 = 66     OUTPUT SIGN OF EXPONENT PART');
    builder.addCardString('D007E392          020 $  0 010 = 36     OUTPUT EXPONENT');
    builder.addCardString('D007E394                 3        2');
    builder.addCardString('D007E396          010 * 55              JUMP TO POP Q7 TWICE AND LOOP');
    builder.addCardString('D007E400     * 80 024 K  2 052 * 82     SUBROUTINE TO FILL ZEROS UP TO (T2)');
    builder.addCardString('D007E402     * 81 020 P 12 024 K  3       LEAVES P12 AT (T2)-1');
    builder.addCardString('D007E404          025 H 25 004 A 48');
    builder.addCardString('D007E406     * 82 002 ---- 024 H 25');
    builder.addCardString('D007E408          054 P 12 052 * 83');
    builder.addCardString('D007E410     * 83 060 ---- 010 * 81');
    builder.addCardString('D007E450     * 85 024 K  2 052 * 89     LOCAL SUBROUTINE TO ADVANCE ONE IN FO');
    builder.addCardString('D007E452          024 K  2 052 * 87       EXIT TO $1 WITH ACC + IF UNDERLINE');
    builder.addCardString('D007E454          020 P 12 024 K  3       EXIT TO $1 WITH ACC - IF OTHER');
    builder.addCardString('D007E456          054 P 12 052 * 86       EXIT TO $2 IF PERIOD');
    builder.addCardString('D007E458     * 86 020 ---- 050 P 11');
    builder.addCardString('D007E460          124 A 27 025 A 27');
    builder.addCardString('D007E462     * 87 002 ---- 020 P 11');
    builder.addCardString('D007E464          124 A108 025 A108');
    builder.addCardString('D007E466     * 89 010 ----');
    builder.addCardString('D007E500     * 93          100    7     OVERFLOW TEST VALUE');
    builder.addCardString('D007E502     * 94     N 10     N 10');
    builder.addCardString('D007E504     * 95       10       10');
    builder.addCardString('D007E506     * 96        6        6');
    builder.addCardString('D007E508     * 97        7        7');
    builder.addCardString('D007E510     * 98        8        8');
    builder.addCardString('D007E512     * 99        9        9,');
    builder.addCardString('D007E999        /     D  7 010,7000/');

    builder.addCardString('D008E000+       $              M  0     EXTENSION OF G6');
    builder.addCardString('D008E010          004 H 19 010 $  1');
    builder.addCardString('D008E015          063 T  0 002 * 30     JUMP IF H19=0=QUOTES');
    builder.addCardString('D008E020          020 W  9 065 T  0');
    builder.addCardString('D008E030          023 T  0 002 * 10     JUMP IF \'STEP\'');
    builder.addCardString('D008E040          020 W  7 065 T  0');
    builder.addCardString('D008E050          023 T  0 002 *  5     JUMP IF \'PART\'');
    builder.addCardString('D008E060          020 W  3 065 T  0');
    builder.addCardString('D008E070          023 T  0 002 * 15     JUMP IF \'FORM\'');
    builder.addCardString('D008E080          020 W 13 065 T  0');
    builder.addCardString('D008E090          023 T  0 002 * 20     JUMP IF \'SIZE\'');
    builder.addCardString('D008E100          020 W 11 065 T  0');
    builder.addCardString('D008E110          023 T  0 002 * 40     JUMP IF \'USERS\'');
    builder.addCardString('D008E112          020 W  1 065 T  0');
    builder.addCardString('D008E114          023 T  0 002 * 50     JUMP IF \'TIME\'');
    builder.addCardString('D008E120          130 $  0 130 $  0     ELSE MACHINE ERROR');
    builder.addCardString('D008E130     *  5 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('D008E140          020 $  0 010 = 21     EVALUATE PART NUMBER');
    builder.addCardString('D008E150          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('D008E160          025 K 19 001 E  6');
    builder.addCardString('D008E170          020 $  0 010 = 44     VALIDATE PART NUMBER');
    builder.addCardString('D008E180          020 Q  3 050 P 20     SET PART CONTEXT');
    builder.addCardString('D008E190          020 $  0 010 = 13     POP Q3');
    builder.addCardString('D008E200          020 $  0 010 = 50     FIND PART');
    builder.addCardString('D008E210          002 *  8 010 E 17     ERROR IF CAN\'T');
    builder.addCardString('D008E220     *  8 020 H 23 050 P 19');
    builder.addCardString('D008E230     *  6 020 P 19 052 *  7');
    builder.addCardString('D008E240     *  7 020 ---- 001 X  5     TO ADVANCE WHEN DONE');
    builder.addCardString('D008E250          050 P 19 056 P  3');
    builder.addCardString('D008E260          020 $  0 014 =  7     UNPACK TO S');
    builder.addCardString('D008E280          020 P 15 002 X 13     JUMP IF INTERRUPT');
    builder.addCardString('D008E290          020 $  0 010 = 78     TRANSMIT');
    builder.addCardString('D008E300          010 *  6');
    builder.addCardString('D008E310     * 10 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('D008E320          020 $  0 010 = 21     EVALUATE STEP NUMBER');
    builder.addCardString('D008E330          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('D008E340          025 K 19 001 E  6');
    builder.addCardString('D008E350          020 $  0 010 = 45     VALIDATE STEP NUMBER');
    builder.addCardString('D008E360          020 Q  3 050 P 21     SET STEP CONTEXT');
    builder.addCardString('D008E370          020 $  0 010 = 13     POP Q3');
    builder.addCardString('D008E380          020 $  0 010 = 51     FIND STEP');
    builder.addCardString('D008E390          002 * 11 010 E 16     ERROR IF CAN\'T');
    builder.addCardString('D008E400     * 11 020 H 26 056 P  3');
    builder.addCardString('D008E410          020 $  0 014 =  7     UNPACK TO S');
    builder.addCardString('D008E430          010 X 14              EXIT VIA X14');
    builder.addCardString('D008E440     * 15 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE');
    builder.addCardString('D008E450          020 $  0 010 = 21     EVALUATE FORM NUMBER');
    builder.addCardString('D008E460          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('D008E470          025 K 19 001 E  6');
    builder.addCardString('D008E480          020 $  0 010 = 46     VALIDATE FORM NUMBER');
    builder.addCardString('D008E490          020 Q  3 050 P 22     SET FORM CONTEXT');
    builder.addCardString('D008E500          020 $  0 010 = 13     POP Q3');
    builder.addCardString('D008E510          020 $  0 010 = 52     FIND FORM');
    builder.addCardString('D008E520          002 * 11 010 E 19     ERROR IF CAN\'T');

    builder.addCardString('D008E530     * 20 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D008E540          020 P  1 124 K 19');
    builder.addCardString('D008E550          025 K 19 001 E  6     VERIFY TERMINAL');
    builder.addCardString('D008E560          120    0 050 T  0     COMPUTE SIZE');
    builder.addCardString('D008E570          020 * 22 056 * 21');
    builder.addCardString('D008E580     * 21          020 ----');
    builder.addCardString('D008E590          001 * 23 056 * 21');
    builder.addCardString('D008E600          020 T  0 024 I  1');
    builder.addCardString('D008E610          050 T  0 014 * 21');
    builder.addCardString('D008E620     * 22              Q  0');
    builder.addCardString('D008E630     * 23 020 T  0 050 H 20');
    builder.addCardString('D008E640          020 S  0 050 P 12');
    builder.addCardString('D008E650          020 $  0 010 = 36     CONVERT SIZE');
    builder.addCardString('D008E660                 2        3');
    builder.addCardString('D008E670          020 A 42 050 S  4');
    builder.addCardString('D008E680          010 X 14              EXIT VIA X14');
    builder.addCardString('D008E740     * 30 020 S  0 050 P 12     SET OUTPUT FOR QUOTED MESSAGE');
    builder.addCardString('D008E750     * 31 020 $  0 010 =  1     ADVANCE');
    builder.addCardString('D008E760          001 E  6 124 A 66');
    builder.addCardString('D008E770          025 A 66 002 * 32     JUMP IF QUOTES');
    builder.addCardString('D008E780     * 33 020 P 12 024 K  3     INSERT CHARACTER IN S');
    builder.addCardString('D008E785          050 P 12 056 * 35');
    builder.addCardString('D008E790     * 35 020 P  1 050 ----');
    builder.addCardString('D008E795          020 * 31 010 =  1     ADVANCE AND LOOP');
    builder.addCardString('D008E800     * 32 020 P  2 050 * 90     SAVE P2');
    builder.addCardString('D008E810          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('D008E820          020 * 90 050 P  2     RESTORE P2');
    builder.addCardString('D008E830          020 P  1 124 K 19');
    builder.addCardString('D008E840          025 K 19 002 * 34     JUMP IF TERMINAL');
    builder.addCardString('D008E850          020 A 66 050 P  1');
    builder.addCardString('D008E860          010 * 33');
    builder.addCardString('D008E870     * 34 020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('D008E880          020 $  0 010 = 66');
    builder.addCardString('D008E890          010 X 14              EXIT VIA X14');
    builder.addCardString('D008E900     * 40 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D008E905          020 P  1 124 K 19');
    builder.addCardString('D008E910          025 K 19 001 E  6     VERIFY TERMINAL');
    builder.addCardString('D008E915          120    0 050 S  1     INITIALIZE COUNT');
    builder.addCardString('D008E920          020 U  2 010 * 42     INITIALIZE');
    builder.addCardString('D008E925     * 41 020 * 90 024 K  3');
    builder.addCardString('D008E930     * 42 050 * 90 052 * 43');
    builder.addCardString('D008E935          025 U  3 002 * 44     JUMP AT END OF TABLE');
    builder.addCardString('D008E940     * 43 020 ---- 001 * 41');
    builder.addCardString('D008E945          020 S  1 024 I  1     COUNT ONE ACTIVE USER');
    builder.addCardString('D008E950          050 S  1 010 * 41');
    builder.addCardString('D008E955     * 44 020 A 42 050 S  2     SET CR+EOM');
    builder.addCardString('D008E960          010 X 14              EXIT VIA X14');
    builder.addCardString('D008E964     * 50 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('D008E965          020 P  1 124 K 19');
    builder.addCardString('D008E966          025 K 19 001 E  6     VERIFY TERMINAL');
    builder.addCardString('D008E967          020 S  0 050 P 12');
    builder.addCardString('D008E970          020 $  0 010 = 61     CONVERT TIME');
    builder.addCardString('D008E975          020 A 42 050 S  5');
    builder.addCardString('D008E980          010 X 14              EXIT VIA X14');
    builder.addCardString('D008E990     * 90                  ,    WORKING STORAGE');

    builder.addCardString('D008E999        /     D008 010,7000/');

    builder.addCardString('G004E00+        $              M  0     CANCEL');
    builder.addCardString('G004E010          020 $  0 010 = 37     SIMPLE DIRECT TESTS');
    builder.addCardString('G004E020          020 Q 12 001 *  2     JUMP IF NO STRUCTURE');
    builder.addCardString('G004E030          050 Q  8 020 K  4     ELSE MOVE STRUCTURE BACK TO Q8');
    builder.addCardString('G004E040          050 Q 12 050 Q 13');
    builder.addCardString('G004E050          050 P 17 050 P 23     RESET P17 AND P23 FLAGS');
    builder.addCardString('G004E060     *  1 020 $  0 010 = 76     ERASE ONE LEVEL OF STRUCTURE');
    builder.addCardString('G004E070          020 Q  8 002 *  1     JUMP IF MORE');
    builder.addCardString('G004E080     *  2 014 X 12         ,    EXIT TO X12 TO SWITCH');
    builder.addCardString('G004E999        /     G004 010,7000/');

    builder.addCardString('G005E000+       $              M  0     DELETE');
    builder.addCardString('G005E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G005E020          020 P  1 124 K 34');
    builder.addCardString('G005E030          025 K 34 001 E  6     VERIFY LETTER');
    builder.addCardString('G005E040          020 P  2 024 K  3');
    builder.addCardString('G005E050          052 *  1 010 $  1');
    builder.addCardString('G005E060     *  1 020 ---- 124 K 34');
    builder.addCardString('G005E070          025 K 34 001 D  2     JUMP IF NOT A WORD');
    builder.addCardString('G005E080          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G005E090          025 W  0 050 T  0');
    builder.addCardString('G005E100          023 T  0 002 D  1     JUMP IF ALL');
    builder.addCardString('G005E110          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G005E120          004 H 19 010 $  1');
    builder.addCardString('G005E130          020 W  9 065 T  0');
    builder.addCardString('G005E140          023 T  0 002 * 30     JUMP IF \'STEP\'');
    builder.addCardString('G005E150          020 W  7 065 T  0');
    builder.addCardString('G005E160          023 T  0 002 * 40     JUMP IF \'PART\'');
    builder.addCardString('G005E170          020 W  3 065 T  0');
    builder.addCardString('G005E180          023 T  0 002 * 50     JUMP IF \'FORM\'');
    builder.addCardString('G005E190          010 E  6              ELSE MALFORMED');
    builder.addCardString('G005E200     * 30 020 Q  8 002 E  9     STEP-ILLEGAL INDIRECT');
    builder.addCardString('G005E210          020 $  0 010 * 70     BORROW SPARE TANK');
    builder.addCardString('G005E220          020 $  0 010 = 21     EVALUATE STEP NUMBER');
    builder.addCardString('G005E230          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G005E231          025 K 19 001 E  6');
    builder.addCardString('G005E240          020 $  0 010 = 45      VALIDATE STEP NUMBER');
    builder.addCardString('G005E250          020 Q  3 050 P 21     SET STEP IN CONTEXT');
    builder.addCardString('G005E260          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G005E270          020 $  0 010 = 51     FIND STEP');
    builder.addCardString('G005E280          001 E 16 010 $  1     ERROR IF CAN\'T');
    builder.addCardString('G005E290          020 $  0 010 = 56     ERASE STEP A/C H21-H26');
    builder.addCardString('G005E300     * 31 020 $  0 010 * 80     RESTORE SPARE TANK');
    builder.addCardString('G005E310          010 X  5              EXIT');
    builder.addCardString('G005E320     * 40 020 Q  8 002 E  9     PART - ILLEGAL INDIRECT');
    builder.addCardString('G005E330          020 $  0 010 * 70     BORROW SPARE TANK');
    builder.addCardString('G005E340          020 $  0 010 = 21     EVALUATE PART NUMBER');
    builder.addCardString('G005E350          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G005E351          025 K 19 001 E  6');
    builder.addCardString('G005E360          020 $  0 010 = 44     VALIDATE PART NUMBER');
    builder.addCardString('G005E370          020 Q  3 050 P 20     SET PART IN CONTEXT');
    builder.addCardString('G005E380          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G005E390          020 $  0 010 = 50     FIND PART');
    builder.addCardString('G005E400          001 E 17 010 $  1     ERROR IF CAN\'T');
    builder.addCardString('G005E410          020 H 23 050 * 91     SET POINTERS IN *91');
    builder.addCardString('G005E420     * 41 020 * 91 052 * 42');
    builder.addCardString('G005E430          124 K  6 025 K  1');
    builder.addCardString('G005E440          001 * 43 010 $  1     JUMP IF NO MORE STEPS');
    builder.addCardString('G005E450     * 42 004 ---- 060 * 91     SET PARAMETER AND UPDATE POINTER');
    builder.addCardString('G005E460          020 $  0 010 = 29     ERASE STEP STRING EXCEPT HEAD');
    builder.addCardString('G005E470          010 * 41              LOOP');
    builder.addCardString('G005E480     * 43 004 H 22 075   21     SET PARAMETER');
    builder.addCardString('G005E490          020 $  0 010 = 28     ERASE LEFT LINKED LIST');
    builder.addCardString('G005E500          020 H 21 056 * 44');
    builder.addCardString('G005E510     * 44 020 H 23 056 ----');

    builder.addCardString('G005E520     * 45 020 $  0 010 * 80     RESTORE SPARE TANK');
    builder.addCardString('G005E530          010 X  5              EXIT');
    builder.addCardString('G005E540     * 50 020 Q  8 002 E  9     FORM-ILLEGAL INDIRECT');
    builder.addCardString('G005E550          020 $  0 010 * 70     BORROW SPARE TANK');
    builder.addCardString('G005E560          020 $  0 010 = 21     EVALUATE FROM NUMBER');
    builder.addCardString('G005E570          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G005E571          025 K 19 001 E  6');
    builder.addCardString('G005E580          020 $  0 010 = 46     VALIDATE FORM NUMBER');
    builder.addCardString('G005E590          020 Q  3 050 P 22     SET FORM IN CONTEXT');
    builder.addCardString('G005E600          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G005E610          020 $  0 010 = 52     FIND FORM');
    builder.addCardString('G005E620          001 E 19 010 $  1     ERROR IF CAN\'T');
    builder.addCardString('G005E630          020 $  0 010 = 57     ERASE FORM A/C H24-H26');
    builder.addCardString('G005E640     * 51 020 $  0 010 * 80     RESTORE SPARE TANK');
    builder.addCardString('G005E650          010 X  5              EXIT');
    builder.addCardString('G005E700     * 70 024 K  2 052 * 79     BORROW SPARE TANK (SUBROUTINE)');
    builder.addCardString('G005E710          020 Q  1 056 * 71');
    builder.addCardString('G005E720     * 71          020 ----');
    builder.addCardString('G005E730          056 * 72 010 $  1');
    builder.addCardString('G005E740     * 72 020 Q  0 050 ----');
    builder.addCardString('G005E750          020 Q  1 050 Q  0');
    builder.addCardString('G005E760          020 K  4 050 Q  1');
    builder.addCardString('G005E770     * 79 010 ----');
    builder.addCardString('G005E780     * 80 024 K  2 052 * 89     RESTORE SPARE TANK (SUBROUTINE)');
    builder.addCardString('G005E790          020 Q  0 056 * 81');
    builder.addCardString('G005E800     * 81 050 Q  1 020 ----');
    builder.addCardString('G005E810          056 * 82 004 K  4');
    builder.addCardString('G005E820     * 82 056 * 83 020 ----');
    builder.addCardString('G005E830     * 83 050 Q  0 060 ----');
    builder.addCardString('G005E840     * 89 010 ----');
    builder.addCardString('G005E850     * 91                  ,    LOCAL STORAGE');
    builder.addCardString('G005E999        /     G005 010,7000/');

    builder.addCardString('G006E000+       $              M  0     TYPE');
    builder.addCardString('G006E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G006E020          020 P  2 050 * 90     SAVE POINTER');
    builder.addCardString('G006E022          120    0 050 H 19     CLEAR H19');
    builder.addCardString('G006E024          020 P  1 124 A 66');
    builder.addCardString('G006E026          025 A 66 002 D  8     JUMP IF QUOTES');
    builder.addCardString('G006E030          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G006E040          025 W  0 050 T  0');
    builder.addCardString('G006E050          023 T  0 002 D  3     JUMP IF \'ALL\' TO D3 EXTENSION');
    builder.addCardString('G006E060          004 H 19 010 $  1');
    builder.addCardString('G006E070          020 W  9 065 T  0');
    builder.addCardString('G006E080          023 T  0 002 D  8     JUMP IF \'STEP\'');
    builder.addCardString('G006E090          020 W  7 065 T  0');
    builder.addCardString('G006E100          023 T  0 002 D  8     JUMP IF \'PART\'');
    builder.addCardString('G006E110          020 W  3 065 T  0');
    builder.addCardString('G006E120          023 T  0 002 D  8     JUMP IF \'FORM\'');
    builder.addCardString('G006E130          020 W 13 065 T  0');
    builder.addCardString('G006E140          023 T  0 002 D  8     JUMP IF \'SIZE\'');
    builder.addCardString('G006E150          020 W 11 065 T  0');
    builder.addCardString('G006E160          023 T  0 002 D  8     JUMP IF \'USERS\'');
    builder.addCardString('G006E162          020 W  1 065 T  0');
    builder.addCardString('G006E164          023 T  0 002 D  8     JUMP IF \'TIME\'');
    builder.addCardString('G006E170          020 * 90 050 P  2     ELSE EVALUATE VALUES');
    builder.addCardString('G006E180          052 *  1 010 $  1');
    builder.addCardString('G006E190     *  1 020 ---- 050 P  1     RESET P1 AND P2');
    builder.addCardString('G006E200     *  2 020 P  1 124 A108');
    builder.addCardString('G006E210          025 A108 001 *  4     JUMP IF NOT UNDERLINE');
    builder.addCardString('G006E220          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('G006E230          020 K  4 050 Q  3     STACK UNDEFINED SYMBOL IN Q3');
    builder.addCardString('G006E240     *  3 020 $  0 010 =  1');
    builder.addCardString('G006E250          124 A108 025 A108');
    builder.addCardString('G006E260          002 *  3 010 $  1     LOOP IF UNDERLINE');
    builder.addCardString('G006E270          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('G006E280          010 * 12');
    builder.addCardString('G006E290     *  4 020 P  1 124 K 34');
    builder.addCardString('G006E300          025 K 34 001 *  9     JUMP IF NOT LETTER');
    builder.addCardString('G006E310          020 P  2 024 K  3');
    builder.addCardString('G006E320          052 *  5 052 *  6');
    builder.addCardString('G006E330     *  5 020 ---- 124 K 34');
    builder.addCardString('G006E340          025 K 34 002 *  9     JUMP IF NEXT CHARACTER ALSO LETTER');
    builder.addCardString('G006E350     *  6 020 ---- 124 K 31');
    builder.addCardString('G006E360          025 K 31 002 *  9     JUMP IF NEXT CHARACTER A LEFT GROUPER');
    builder.addCardString('G006E370          020 P  1 052 *  7');
    builder.addCardString('G006E380     *  7 020 ---- 002 *  9     JUMP IF SCALAR');
    builder.addCardString('G006E390          071    5 001 *  8     JUMP IF MATRIX');
    builder.addCardString('G006E400          071    1 002 *  9     JUMP IF NOT VECTOR');
    builder.addCardString('G006E410     *  8 020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('G006E420          020 P  1 024 K  4');
    builder.addCardString('G006E430          050 Q  3 010 $  1     STACK INDEXED LETTER PLUS FLAG');
    builder.addCardString('G006E440          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G006E450          010 * 12');
    builder.addCardString('G006E460     *  9 020 P  2 050 P 18     SET STARTING POINTER');
    builder.addCardString('G006E470          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G006E480          020 P  2 050 P 19');

    builder.addCardString('G006E490     * 10 020 P 19 025 K  3');
    builder.addCardString('G006E500          052 * 11 050 P 19');
    builder.addCardString('G006E510     * 11 020 ---- 124 A 14');
    builder.addCardString('G006E520          025 A 14 002 * 10');
    builder.addCardString('G006E530          020 P 19 025 P 18');
    builder.addCardString('G006E540          056 P 18 010 $  1');
    builder.addCardString('G006E550          020 $  0 010 = 12');
    builder.addCardString('G006E560          020 P 18 050 Q  3     STACK EXPRESSION RANGE INDICATORS');
    builder.addCardString('G006E570     * 12 020 P  1 124 A 59');
    builder.addCardString('G006E580          025 A 59 001 * 13     JUMP IF NOT A COMMA');
    builder.addCardString('G006E590          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G006E600          010 *  2              LOOP');
    builder.addCardString('G006E610     * 13 020 P  1 124 K 19');
    builder.addCardString('G006E620          025 K 19 002 * 20     JUMP IF TERMINAL');
    builder.addCardString('G006E625          020 $  0 010 = 79     VERIFY PRECEDING SPACE');
    builder.addCardString('G006E630          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G006E640          025 W  6 050 T  0');
    builder.addCardString('G006E650          023 T  0 001 E  6     ERROR IF NOT \'IN\'');
    builder.addCardString('G006E660          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G006E670          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G006E680          025 W  3 050 T  0');
    builder.addCardString('G006E690          023 T  0 001 E  6     ERROR IF NOT \'FORM\'');
    builder.addCardString('G006E700          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G006E710          020 $  0 010 = 21     EVALUATE FORM NUMBER');
    builder.addCardString('G006E720          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G006E730          025 K 19 001 E  6');
    builder.addCardString('G006E740          020 $  0 010 = 46     VALIDATE FORM NUMBER');
    builder.addCardString('G006E750          020 Q  3 050 P 22     PUT FORM NUMBER IN CONTEXT');
    builder.addCardString('G006E760          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G006E770          020 $  0 010 = 52     FIND FORM');
    builder.addCardString('G006E780          056 P  3 001 E 19     ERROR IF CAN\'T');
    builder.addCardString('G006E790          020 $  0 014 =  7     UNPACK TO S');
    builder.addCardString('G006E800     * 14 020 Q  2 001 D  7     JUMP TO D7 EXT WHEN Q2 EMPTIED TO Q6');
    builder.addCardString('G006E810          020 Q  2 056 * 15');
    builder.addCardString('G006E820          056 * 16 024 K  1');
    builder.addCardString('G006E830          056 * 17 056 * 18');
    builder.addCardString('G006E840     * 15 004 Q  2 020 ----');
    builder.addCardString('G006E850          050 Q  2 010 $  1');
    builder.addCardString('G006E860     * 16 020 Q  6 050 ----');
    builder.addCardString('G006E870     * 17 060 Q  6 020 ----');
    builder.addCardString('G006E880          004 Q  3 050 Q  3');
    builder.addCardString('G006E890     * 18 020 Q  7 050 ----');
    builder.addCardString('G006E900          060 Q  7 010 * 14');
    builder.addCardString('G006E905     * 20 020 Q  2 001 D  6     JUMP TO D6 EXT. WHEN Q2 EMPTIED TO Q');
    builder.addCardString('G006E910          020 Q  2 056 * 21');
    builder.addCardString('G006E915          056 * 22 024 K  1');
    builder.addCardString('G006E920          056 * 23 056 * 24');
    builder.addCardString('G006E925     * 21 004 Q  2 020 ----');
    builder.addCardString('G006E930          050 Q  2 010 $  1');
    builder.addCardString('G006E935     * 22 020 Q  6 050 ----');
    builder.addCardString('G006E940     * 23 060 Q  6 020 ----');
    builder.addCardString('G006E945          004 Q  3 050 Q  3');
    builder.addCardString('G006E950     * 24 020 Q  7 050 ----');
    builder.addCardString('G006E955          060 Q  7 010 * 20');
    builder.addCardString('G006E960     * 90                  ,    LOCAL STORAGE');

    builder.addCardString('G006E999        /     G006 010,7000/');

    builder.addCardString('G012E000+       $              M  0     STOP');
    builder.addCardString('G012E010          020 $  0 010 = 38     SIMPLE-INDIRECT TESTS');
    builder.addCardString('G012E020          120    0 050 P 17     SET \'STOPPED\' FLAG');
    builder.addCardString('G012E030          020 S  0 050 P 12');
    builder.addCardString('G012E040          020 $  0 010 = 64     PREPARE MESSAGE');
    builder.addCardString('G012E042              * 90     * 90');
    builder.addCardString('G012E044          020 J 12 050 P  2     COPY STEP NUMBER FROM R TO S');
    builder.addCardString('G012E046     *  1 020 $  0 010 =  2');
    builder.addCardString('G012E048          124 K 35 025 K 35');
    builder.addCardString('G012E050          002 *  2 010 $  1');
    builder.addCardString('G012E052          020 P  1 124 A 27');
    builder.addCardString('G012E054          025 A 27 001 *  4');
    builder.addCardString('G012E056     *  2 020 P 12 024 K  3');
    builder.addCardString('G012E058          050 P 12 056 *  3');
    builder.addCardString('G012E060     *  3 020 P  1 050 ----');
    builder.addCardString('G012E062          020 *  1 010 =  1');
    builder.addCardString('G012E070     *  4 020 A 27 050 P 11');
    builder.addCardString('G012E080          020 $  0 010 = 66     ADD PERIOD');
    builder.addCardString('G012E090          020 A 42 050 P 11');
    builder.addCardString('G012E100          020 $  0 010 = 66     ADD CR+EOM');
    builder.addCardString('G012E110          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('G012E150     * 90 071,0631,142,3447     \'STOPPED BY STEP\'');
    builder.addCardString('G012E160          012,4240,341,1070');
    builder.addCardString('G012E170          007,0621,461,2447');
    builder.addCardString('G012E180          007,2000,000,0000,');
    builder.addCardString('G012E999        /     G 12 010,7000/');

    builder.addCardString('G013E000+       $              M  0     GO');
    builder.addCardString('G013E010          020 $  0 010 = 37     SIMPLE DIRECT TESTS');
    builder.addCardString('G013E020          020 Q 12 050 Q  8');
    builder.addCardString('G013E030          020 Q 13 050 Q  9');
    builder.addCardString('G013E040          020 K  4 050 Q 12');
    builder.addCardString('G013E050          050 Q 13 010 $  1');
    builder.addCardString('G013E052          020 P 23 001 *  4     JUMP IF NO SPACE PROBLEM IN X7');
    builder.addCardString('G013E054          020 K  4 050 P 23     RESET P23 FLAG');
    builder.addCardString('G013E056          010 X  7              JUMP TO ASCEND');
    builder.addCardString('G013E060     *  4 020 P 17 001 *  1     JUMP IF NOT \'STOP\'');
    builder.addCardString('G013E070          020 K  4 050 P 17     RESET \'STOP\' FLAG');
    builder.addCardString('G013E080          010 X  5              JUMP TO ADVANCE');
    builder.addCardString('G013E090     *  1 020 Q  8 001 E  7     ERROR IF NO OPEN TASK');
    builder.addCardString('G013E100          020 Q  9 050 P 21');
    builder.addCardString('G013E110          020 $  0 010 = 51     FIND CURRENT STEP');
    builder.addCardString('G013E120          002 *  2 010 X  5     JUMP IF FOUND, ELSE ADVANCE');
    builder.addCardString('G013E130     *  2 050 P 16 010 X  6,    STE P16 AND FETCH');
    builder.addCardString('G013E999        /     G 13 010,7000/');

    builder.addCardString('G014E000+       $              M  0     DEMAND');
    builder.addCardString('G014E010          020 P 13 025 I  3');
    builder.addCardString('G014E020          050 T  0 023 T  0');
    builder.addCardString('G014E030          002 * 50 010 $  1     JUMP IF EXPECTING VALUE');
    builder.addCardString('G014E035          020 Q  8 001 E 10     ERROR IF DIRECT');
    builder.addCardString('G014E040          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G014E050          050 P 27 124 K 34');
    builder.addCardString('G014E060          025 K 34 001 E  6     ERROR IF NOT LETTER');
    builder.addCardString('G014E070          020 K  4 050 P 28     RESET INDEX FLAGS');
    builder.addCardString('G014E080          050 P 29 010 $  1');
    builder.addCardString('G014E090          020 $  0 010 =  1     ADVANCE ONE');
    builder.addCardString('G014E100          124 K 31 025 K 31');
    builder.addCardString('G014E110          001 *  3 010 $  1     JUMP IF NOT LEFT GROUPER');
    builder.addCardString('G014E120          020 $  0 010 = 26     EVALUATE GROUPED LIST');
    builder.addCardString('G014E130          020 Q  6 001 *  1     JUMP IF NO 2ND INDEX');
    builder.addCardString('G014E140          020 Q  7 050 P 29     STORE 2ND INDEX');
    builder.addCardString('G014E150          020 $  0 010 = 17     POP Q7');
    builder.addCardString('G014E160          020 Q  6 002 E  6     ERROR IF EXTRA INDICES');
    builder.addCardString('G014E170     *  1 020 $  0 010 = 41     CHECK IF SINGLE INDEX');
    builder.addCardString('G014E180          020 Q  3 050 P 28     STORE CONVERTED INDEX');
    builder.addCardString('G014E190          020 P 29 001 *  2     JUMP IF SINGLE INDEX');
    builder.addCardString('G014E200          050 Q  3 010 $  1');
    builder.addCardString('G014E210          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX');
    builder.addCardString('G014E220          020 Q  3 050 P 29     STORE CONVERTED INDEX');
    builder.addCardString('G014E230     *  2 020 $  0 010 = 13     POP Q3');
    builder.addCardString('G014E240     *  3 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('G014E250          124 K 19 025 K 19');
    builder.addCardString('G014E260          002 *  4 010 E  6     ERROR IF NOT AT TERMINAL');
    builder.addCardString('G014E270     *  4 021 I  7 050 * 90');
    builder.addCardString('G014E280          020 P 28 001 *  7');
    builder.addCardString('G014E290          025 * 91 002 *  5');
    builder.addCardString('G014E300          020 I  3 014 *  5');
    builder.addCardString('G014E310     *  5 020 I  4 024 * 90');
    builder.addCardString('G014E320          050 * 90 010 $  1');
    builder.addCardString('G014E330          020 P 29 001 *  7');
    builder.addCardString('G014E340          025 * 91 002 *  6');
    builder.addCardString('G014E350          020 I  2 014 *  6');
    builder.addCardString('G014E360     *  6 020 I  3 024 * 90');
    builder.addCardString('G014E370          050 * 90 010 $  1');
    builder.addCardString('G014E380     *  7 020 S  0 050 P 12     INITIALIZE OUTPUT LINE');
    builder.addCardString('G014E390     *  8 020 * 90 002 *  9     JUMP WHEN ALL SPACES ARE IN');
    builder.addCardString('G014E400          024 I  1 050 * 90');
    builder.addCardString('G014E410          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('G014E420          010 *  8');
    builder.addCardString('G014E430     *  9 020 P 27 050 P 11');
    builder.addCardString('G014E440          020 $  0 010 = 66     INSERT LETTER');
    builder.addCardString('G014E450          020 P 28 001 * 11     JUMP IF NO SUBSCRIPTS');
    builder.addCardString('G014E460          020 J 20 052 * 12     =77 LEFT RIGHT GROUP IN J20');
    builder.addCardString('G014E465     * 12 020 ---- 050 P 11');
    builder.addCardString('G014E470          020 $  0 010 = 66     INSERT LEFT GROUPER');
    builder.addCardString('G014E480          020 P 28 070   12');
    builder.addCardString('G014E490          050 H 20 010 $  1');
    builder.addCardString('G014E500          020 $  0 010 = 36     CONVERT FIRST SUBSCRIPT');
    builder.addCardString('G014E510                 1        2');

    builder.addCardString('G014E520          020 P 29 001 * 10     JUMP IF NO 2ND SUBSCRIPT');
    builder.addCardString('G014E530          020 A 59 050 P 11');
    builder.addCardString('G014E540          020 $  0 010 = 66     INSERT COMMA');
    builder.addCardString('G014E550          020 P 29 070   12');
    builder.addCardString('G014E560          050 H 20 010 $  1');
    builder.addCardString('G014E570          020 $  0 010 = 36     CONVERT SECOND SUBSCRIPT');
    builder.addCardString('G014E580                 1        2');
    builder.addCardString('G014E590     * 10 020 J 20 050 P 11     =77 LEFT RIGHT GROUPER IN J20');
    builder.addCardString('G014E600          020 $  0 010 = 66     INSERT RIGHT GROUPER');
    builder.addCardString('G014E610     * 11 020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('G014E620          020 A 43 050 P 11');
    builder.addCardString('G014E630          020 $  0 010 = 66     INSERT \'=\'');
    builder.addCardString('G014E635          020 $  0 010 = 62     INSERT SPACE');
    builder.addCardString('G014E640          020 A131 050 P 11');
    builder.addCardString('G014E650          020 $  0 010 = 66     INSERT EOM');
    builder.addCardString('G014E660          020 P  0 025 I  1     COMPENSATE FOR =25 COUNTING UP ONE');
    builder.addCardString('G014E670          050 P  0 010 $  1');
    builder.addCardString('G014E680          020 I  3 050 P 13     SET SUBSTATE TO EXPECT VALUE');
    builder.addCardString('G014E690          010 X 12              EXIT TO TRANSMIT AND SWITCH');
    builder.addCardString('G014E700     * 50 020 I  0 050 P 13     RESET SUBSTATE TO ZERO');
    builder.addCardString('G014E705          020 Q 12 050 Q  8     RESTORE CONTROL PDL');
    builder.addCardString('G014E710          020 Q 13 050 Q  9');
    builder.addCardString('G014E715          020 K  4 050 Q 12');
    builder.addCardString('G014E720          050 Q 13 010 $  1');
    builder.addCardString('G014E721          020 P  1 124 A124');
    builder.addCardString('G014E722          025 A124 002 * 51     JUMP IF LAST CHARACTER IS \'*\'');
    builder.addCardString('G014E725          020 J 12 050 P  2     INITIALIZE POINTER FOR SCAN');
    builder.addCardString('G014E730          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G014E740          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G014E750          020 P  1 001 * 53     JUMP IF TERMINAL MINUS');
    builder.addCardString('G014E752          124 A 27 025 A 27     ALLOW A PERIOD');
    builder.addCardString('G014E754          002 * 52 010 E  6     ERROR IF NOT A PERIOD');
    builder.addCardString('G014E756     * 52 020 $  0 010 =  1     ADVANCE ONE');
    builder.addCardString('G014E758          001 * 53 010 E  6     ERROR IF NOT TERMINAL MINUS');
    builder.addCardString('G014E760     * 53 020 P 27 050 H 27     SET LETTER');
    builder.addCardString('G014E770          020 P 28 050 H 28     SET INDEX');
    builder.addCardString('G014E780          020 P 29 050 H 30     SET INDEX');
    builder.addCardString('G014E790          020 Q  3 050 H 30     SET VALUE');
    builder.addCardString('G014E800          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G014E810          020 $  0 010 = 73     ASSIGN VALUE');
    builder.addCardString('G014E820          010 X  5              EXIT TO X5 ADVANCE');
    builder.addCardString('G014E830     * 51 020 Q  9 050 P 21     SET STEP (MUST EXIST)');
    builder.addCardString('G014E840          020 $  0 010 = 51     FIND CURRENT STEP (MUST EXIST)');
    builder.addCardString('G014E850          050 P 16 010 $  1     SET P16');
    builder.addCardString('G014E860          020 $  0 010 =  0     READ CLOCK');
    builder.addCardString('G014E870          050 H  8 010 X  6     SET H8 START TIME AND EXIT TO FETCH');
    builder.addCardString('G014E880     * 90                       LOCAL STORAGE');
    builder.addCardString('G014E890     * 91+          10   27,');
    builder.addCardString('G014E999        /     G 14 010,7000/');

    builder.addCardString('X000E000+       $              M  0     LOGGING ROUTINE');
    builder.addCardString('X000E005     *  0 013 $  1 010 * 10     SKIP IF T3 OFF');
    builder.addCardString('X000E010          020 H  1 024 *  1     UPDATE TIME TO R0');
    builder.addCardString('X000E015          050 H  6 010 *  2');
    builder.addCardString('X000E020     *  1               300     TEN SECOND INTERVAL FOR R0\'S');
    builder.addCardString('X000E025     *  2 120    0 050 T  0');
    builder.addCardString('X000E030     *  3 020 T  0 024 K 23     R0 LOOP');
    builder.addCardString('X000E035          142 K 23 020 T  0');
    builder.addCardString('X000E040          024 K  1 050 T  0');
    builder.addCardString('X000E045          025 N  1 001 *  3');
    builder.addCardString('X000E050     * 10 020 H  1 025 H  5');
    builder.addCardString('X000E055          001 X  1 120    0');
    builder.addCardString('X000E060          004 H  1 044 J  1');
    builder.addCardString('X000E065          060 * 64 032 J  1');
    builder.addCardString('X000E070          020 J  1 064 H  5');
    builder.addCardString('X000E075          120    0 050 T  0     CLEAR IMAGE IN R AND S');
    builder.addCardString('X000E080     * 11 020 T  0 024 * 13');
    builder.addCardString('X000E085          054 * 12 120    0');
    builder.addCardString('X000E090     * 12 050 ---- 050 ----');
    builder.addCardString('X000E095          020 T  0 024 K  3');
    builder.addCardString('X000E100          050 T  0 025 * 14');
    builder.addCardString('X000E105          001 * 11 010 * 20');
    builder.addCardString('X000E110     * 13     S  0     R  0');
    builder.addCardString('X000E115     * 14       41       41');
    builder.addCardString('X000E120     * 20 120    0 004 * 64');
    builder.addCardString('X000E130          044 J  0 050 * 64');
    builder.addCardString('X000E135          036 N  2 060 H 20');
    builder.addCardString('X000E140          020 K  4 050 * 91');
    builder.addCardString('X000E145          020 $  0 010 * 70');
    builder.addCardString('X000E150          000             4');
    builder.addCardString('X000E155          020 * 91 070    1');
    builder.addCardString('X000E160          050 * 91 020 H  2');
    builder.addCardString('X000E165          071   48 050 * 21');
    builder.addCardString('X000E170          075    8 050 * 22');
    builder.addCardString('X000E175          075   16 050 * 24');
    builder.addCardString('X000E180          075    8 050 * 25');
    builder.addCardString('X000E185          004 H  3 075   16');
    builder.addCardString('X000E190          050 * 27 075    8');
    builder.addCardString('X000E195          050 * 28 010 * 30');
    builder.addCardString('X000E200     * 21 --- ---- --- ----');
    builder.addCardString('X000E205     * 22 --- ---- --- ----');
    builder.addCardString('X000E210     * 23                11');
    builder.addCardString('X000E215     * 24 --- ---- --- ----');
    builder.addCardString('X000E220     * 25 --- ---- --- ----');
    builder.addCardString('X000E225     * 26                11');
    builder.addCardString('X000E230     * 27 --- ---- --- ----');
    builder.addCardString('X000E235     * 28 --- ---- --- ----');
    builder.addCardString('X000E240          100 0000 000 0000');
    builder.addCardString('X000E245     * 29     * 21     * 21');
    builder.addCardString('X000E250     * 30 020 * 29 052 * 31');
    builder.addCardString('X000E255     * 31 020 ---- 005 * 34');
    builder.addCardString('X000E260          124 K 20 024 * 95');
    builder.addCardString('X000E265          056 * 32 010 $  1');
    builder.addCardString('X000E270     * 32 056 * 33 020 ----');

    builder.addCardString('X000E275     * 33 024 * 91 050 ----');
    builder.addCardString('X000E280          020 * 31 024 K  2');
    builder.addCardString('X000E285          052 * 31 020 * 91');
    builder.addCardString('X000E290          070    1 050 * 91');
    builder.addCardString('X000E295     * 34 010 * 31 020 * 91');
    builder.addCardString('X000E300          070    2 050 * 91');
    builder.addCardString('X000E305     * 40 120    0 050 H 20     CONVERT NUMBER OF SLOTS ASSIGNED');
    builder.addCardString('X000E310          050 T  0 010 $  1');
    builder.addCardString('X000E315     * 41 020 T  0 024 U  2');
    builder.addCardString('X000E320          056 * 42 014 * 42');
    builder.addCardString('X000E325     * 42          020 ----');
    builder.addCardString('X000E330          001 * 43 020 H 20');
    builder.addCardString('X000E335          024 K  1 050 H 20');
    builder.addCardString('X000E340     * 43 020 T  0 024 K  1');
    builder.addCardString('X000E345          050 T  0 025 N  1');
    builder.addCardString('X000E350          001 * 41 010 $  1');
    builder.addCardString('X000E355          020 H 20 050 * 97');
    builder.addCardString('X000E360          020 $  0 010 * 70');
    builder.addCardString('X000E365          010             2');
    builder.addCardString('X000E370          120    0 050 H 20     CONVERT NUMBER OF GREENS');
    builder.addCardString('X000E375          020 L 10 050 T  0');
    builder.addCardString('X000E380     * 45 020 T  0 001 * 47');
    builder.addCardString('X000E385          024 U  3 052 * 46');
    builder.addCardString('X000E390     * 46 020 ---- 050 T  0');
    builder.addCardString('X000E395          020 H 20 024 K  1');
    builder.addCardString('X000E400          050 H 20 010 * 45');
    builder.addCardString('X000E405     * 47 020 * 97 025 H 20');
    builder.addCardString('X000E410          050 * 90 010 $  1');
    builder.addCardString('X000E415          020 $  0 010 * 70');
    builder.addCardString('X000E420          010             2');
    builder.addCardString('X000E425          020 * 90 050 H 20     CONVERT NUMBER WORKING');
    builder.addCardString('X000E430          020 $  0 010 * 70');
    builder.addCardString('X000E435          010             2');
    builder.addCardString('X000E440          120    0 050 H 20     CONVERT NUMBER IN QUEUE');
    builder.addCardString('X000E445          020 L  5 050 T  0');
    builder.addCardString('X000E450     * 48 020 T  0 001 * 44');
    builder.addCardString('X000E455          024 U  3 052 * 49');
    builder.addCardString('X000E460     * 49 020 ---- 050 T  0');
    builder.addCardString('X000E465          020 H 20 024 K  1');
    builder.addCardString('X000E470          050 H 20 010 * 48');
    builder.addCardString('X000E475     * 44 020 $  0 010 * 70');
    builder.addCardString('X000E480          010             2');
    builder.addCardString('X000E485          020 * 91 070    3');
    builder.addCardString('X000E490          050 * 91 010 $  1');
    builder.addCardString('X000E495          020 J 21 050 H 20     CONVERT NUMBER OF OUTPUTS');
    builder.addCardString('X000E500          120    0 050 J 21');
    builder.addCardString('X000E505          020 $  0 010 * 70');
    builder.addCardString('X000E510          010             3');
    builder.addCardString('X000E515          020 J 22 050 H 20     CONVERT NUMBER OF OUTPUTS');
    builder.addCardString('X000E520          120    0 050 J 22');
    builder.addCardString('X000E525          020 $  0 010 * 70');
    builder.addCardString('X000E530          010             4');
    builder.addCardString('X000E535          020 J  1 072    1     CONVERT EFFICIENCY PER CENT');
    builder.addCardString('X000E540          004 J 23 036 N  2');
    builder.addCardString('X000E545          044 J  1 060 H 20');

    builder.addCardString('X000E550          120    0 050 J 23');
    builder.addCardString('X000E555          020 $  0 010 * 70');
    builder.addCardString('X000E560          010             4');
    builder.addCardString('X000E565     * 50 120    0 050 H 20     CONVERT INITIALS FOR STATIONS');
    builder.addCardString('X000E570     * 51 020 $  0 010 * 80');
    builder.addCardString('X000E575          020 H 20 024 K  1');
    builder.addCardString('X000E580          050 H 20 025 N  1');
    builder.addCardString('X000E585          001 * 51 010 $  1');
    builder.addCardString('X000E590     * 60 100    5 010 $  1     COPY PRINT IMAGE');
    builder.addCardString('X000E595          120    0 050 T  0');
    builder.addCardString('X000E600     * 61 020 T  0 024 * 13');
    builder.addCardString('X000E605          054 * 62 010 $  1');
    builder.addCardString('X000E610     * 62 020 ---- 101 ----');
    builder.addCardString('X000E615          020 T  0 024 K  3');
    builder.addCardString('X000E620          050 T  0 025 * 14');
    builder.addCardString('X000E621          001 * 61 010 $  1');
    builder.addCardString('X000E622          020 * 64 024 K  1');
    builder.addCardString('X000E623          025 J  0 002 * 63');
    builder.addCardString('X000E624          106    1 010 * 65');
    builder.addCardString('X000E625     * 63 106    0 010 * 65     PAGE IF NEXT ENTRY IS ON THE HOUR');
    builder.addCardString('X000E626     * 64                       WORKING STORAGE');
    builder.addCardString('X000E630     * 65 013 $  1 010 X  1');
    builder.addCardString('X000E631          023 * 97 001 X  1     EXIT UNLESS NO USERS');
    builder.addCardString('X000E632          130 X  1              HALT IF T3 AND NO USERS');
    builder.addCardString('X000E635     * 70 024 K  2 052 * 71     SUBROUTINE TO CONVERT INTEGER');
    builder.addCardString('X000E640          024 K  2 052 * 79');
    builder.addCardString('X000E645     * 71 020 ---- 051 * 75');
    builder.addCardString('X000E650          124 K  5 025 K  1');
    builder.addCardString('X000E655          050 T  0 010 $  1');
    builder.addCardString('X000E660          020 K  4 050 T  1');
    builder.addCardString('X000E665     * 72 020 T  0 024 J 11');
    builder.addCardString('X000E670          056 * 73 120    0');
    builder.addCardString('X000E675     * 73 004 H 20 044 ----');
    builder.addCardString('X000E680          050 H 20 060 T  2');
    builder.addCardString('X000E685          025 K  1 001 * 74');
    builder.addCardString('X000E690          050 T  1 014 * 75');
    builder.addCardString('X000E695     * 74 023 T  0 006 * 75');
    builder.addCardString('X000E700          020 T  1 006 * 75');
    builder.addCardString('X000E705     * 75 --- * 78 020 T  2');
    builder.addCardString('X000E710          024 * 95 056 * 76');
    builder.addCardString('X000E715     * 76 056 * 77 020 ----');
    builder.addCardString('X000E720     * 77 024 * 91 050 ----');
    builder.addCardString('X000E725     * 78 020 * 91 070    1');
    builder.addCardString('X000E730          050 * 91 020 T  0');
    builder.addCardString('X000E735          025 K  1 050 T  0');
    builder.addCardString('X000E740     * 79 001 ---- 010 * 72');
    builder.addCardString('X000E745     * 80 024 K  2 052 * 89     SUBROUTINE TO CONVERT INITIALS');
    builder.addCardString('X000E750          020 H 20 024 U  7');
    builder.addCardString('X000E755          056 * 82 020 H 20');
    builder.addCardString('X000E760          071    2 056 * 81');
    builder.addCardString('X000E765     * 81 020 K  4 070 ----');
    builder.addCardString('X000E770     * 82 050 * 91 020 ----');
    builder.addCardString('X000E775          050 T  0 010 $  1');
    builder.addCardString('X000E780     * 83 020 T  0 001 * 89');
    builder.addCardString('X000E785          071    2 001 * 85');

    builder.addCardString('X000E790          071    1 001 * 84');
    builder.addCardString('X000E795          120    0 014 * 86');
    builder.addCardString('X000E800     * 84 020 * 92 014 * 86');
    builder.addCardString('X000E805     * 85 071    1 001 * 86');
    builder.addCardString('X000E810          020 * 93 014 * 86');
    builder.addCardString('X000E815     * 86 020 * 94 050 T  1');
    builder.addCardString('X000E820          020 T  0 071    4');
    builder.addCardString('X000E825          071    4 050 T  0');
    builder.addCardString('X000E830          020 T  1 064 T  1');
    builder.addCardString('X000E835          024 * 96 056 * 87');
    builder.addCardString('X000E840     * 87 056 * 88 020 ----');
    builder.addCardString('X000E845     * 88 024 * 91 050 ----');
    builder.addCardString('X000E850          020 * 91 070    1');
    builder.addCardString('X000E855          050 * 91 010 * 83');
    builder.addCardString('X000E860     * 89 010 ----');
    builder.addCardString('X000E865     * 90                       WORKING STORAGE');
    builder.addCardString('X000E870     * 91                       STROBE');
    builder.addCardString('X000E875     * 92                14');
    builder.addCardString('X000E880     * 93                23');
    builder.addCardString('X000E885     * 94                31');
    builder.addCardString('X000E890     * 95              R  0     BASE FOR LEFT IMAGE');
    builder.addCardString('X000E895     * 96              S  0     BASE FOR RIGHT IMAGE');
    builder.addCardString('X000E900     * 97                  ,    NUMBER OF USERS');
    builder.addCardString('X000E999        /     X  0 010,7000/');

    builder.addCardString('X010E000+       $              M  0     SIGNAL SERVICE (FROM DRUM)');
    builder.addCardString('X010E001          020 J 21 024 K  1     COUNT ONE INPUT');
    builder.addCardString('X010E002          050 J 21 010 $  1');
    builder.addCardString('X010E005          020 H  9 071   21');
    builder.addCardString('X010E010          001 * 10 071    1     JUMP IF \'ON\'');
    builder.addCardString('X010E015          001 * 20 071    1     JUMP IF \'OF\'');
    builder.addCardString('X010E020          001 * 40 071    1     JUMP IF \'TC\'');
    builder.addCardString('X010E025          001 * 50 025 K  1     JUMP IF \'RI\'');
    builder.addCardString('X010E026          001 * 70 134 $  0     JUMP IF H9 FLAGGED FOR INITIALS');
    builder.addCardString('X010E030     * 10 020 H 12 142 K 29     \'ON\' ERASE SIGNAL');
    builder.addCardString('X010E035          020 $  0 010 = 47');
    builder.addCardString('X010E040              L  5     L  5');
    builder.addCardString('X010E045          020 H  4 002 * 11     JUMP IF H4 SET ALREADY');
    builder.addCardString('X010E050          020 H 12 050 H  4     ELSE SET H4 FOR POSSIBLE Q MSG');
    builder.addCardString('X010E055     * 11 010 X  1              JUMP BACK TO Q SERVICE');
    builder.addCardString('X010E060     * 20 020 H 12 142 K 30     \'OF\' ERASE SIGNAL');
    builder.addCardString('X010E065          024 U  0 052 * 21');
    builder.addCardString('X010E070     * 21 020 ---- 124 K  5');
    builder.addCardString('X010E075          025 * 36 001 * 22');
    builder.addCardString('X010E080          025 I  2 001 * 25     JUMP IF L3 OR L4');
    builder.addCardString('X010E085          025 I  4 001 * 22');
    builder.addCardString('X010E090          025 I  1 001 * 26     JUMP IF L9');
    builder.addCardString('X010E095     * 22 020 L  5 014 * 23     ADJUST H4 IF NECESSARY');
    builder.addCardString('X010E100     * 23 020 ---- 001 * 24     NO ADJUSTMENT IF NOT IN L5.');
    builder.addCardString('X010E105          050 T  0 025 H 12');
    builder.addCardString('X010E110          050 T  1 023 T  1');
    builder.addCardString('X010E115          002 * 27 020 T  0');
    builder.addCardString('X010E120          025 H  4 050 T  1');
    builder.addCardString('X010E125          023 T  1 002 * 24     NO ADJUSTMENT IF DOWNSTREAM FROM');
    builder.addCardString('X010E130          020 T  0 024 U  3       NEXT STN FOR Q MSG');
    builder.addCardString('X010E135          052 * 23 010 * 23');
    builder.addCardString('X010E140     * 27 020 T  0 024 U  3');
    builder.addCardString('X010E145          052 * 28 010 $  1');
    builder.addCardString('X010E150     * 28 020 ---- 050 H  4     SET SUCCESSOR IN H4 FOR NEW Q MSGS');
    builder.addCardString('X010E155     * 24 020 $  0 010 = 58     RELEASE BUFFERS (IF ANY)');
    builder.addCardString('X010E160          002 * 24 010 $  1');
    builder.addCardString('X010E165          020 H 12 024 U  2     RELEASE-DRUM TREATMENT');
    builder.addCardString('X010E170          052 * 32 056 * 29');
    builder.addCardString('X010E175     * 29 056 * 33 020 ----');
    builder.addCardString('X010E180          001 * 34 020 * 35     JUMP IF NO DRUM ASSIGNED');
    builder.addCardString('X010E185     * 30 052 * 31 056 * 32');
    builder.addCardString('X010E190     * 31 020 ---- 001 * 32');
    builder.addCardString('X010E195          024 U  6 010 * 30');
    builder.addCardString('X010E200     * 32 020 ---- 050 ----');
    builder.addCardString('X010E205     * 33 020 K  4 050 ----     UNASSIGN STN');
    builder.addCardString('X010E206          020 H 12 024 U  7');
    builder.addCardString('X010E207          052 * 38 020 * 37');
    builder.addCardString('X010E208     * 38 050 ---- 010 $  1     RESET INITIALS IN U7');
    builder.addCardString('X010E210     * 34 020 $  0 010 = 47     CHANGE STATE IN L0');
    builder.addCardString('X010E215              L  0     L  0');
    builder.addCardString('X010E220          010 X  2');
    builder.addCardString('X010E225     * 25 120    0 050 H 15     SET DELAYED \'OF\' FOR READING');
    builder.addCardString('X010E230          010 X  2');
    builder.addCardString('X010E235     * 26 120    0 050 H 16     SET DELAYED \'OF\' FOR PUNCHING');

    builder.addCardString('X010E240          010 X  2');
    builder.addCardString('X010E245     * 35     H 11     H 11');
    builder.addCardString('X010E250     * 36              L  3');
    builder.addCardString('X010E251     * 37 005,4130,270,0000     FOUR MINUS\'S FOR UNASSIGNED DRUM');
    builder.addCardString('X010E255     * 40 020 H 12 142 K 31     \'TC\'');
    builder.addCardString('X010E260          020 $  0 010 = 54     BRING IN USER\'S BLOCK');
    builder.addCardString('X010E265          023 P 13 002 * 41     JUMP IF GREEN SUBSTATE WAS 0');
    builder.addCardString('X010E270     * 45 020 H 12 024 K 26     ELSE KEEP SAME BUFFER AND');
    builder.addCardString('X010E275          142 K 26 010 X  2       SWITCH TO USER');
    builder.addCardString('X010E280     * 41 020 H  9 141 R  1     READ BUFFER');
    builder.addCardString('X010E285          020 $  0 010 =  5     CONVERT');
    builder.addCardString('X010E290          020 R  1 002 * 45     JUMP IF PARTIAL INPUT LINE');
    builder.addCardString('X010E295          020 $  0 010 = 58     RELEASE BUFFER');
    builder.addCardString('X010E300          020 S  0 050 P 12');
    builder.addCardString('X010E305          013 * 42 010 $  1     JUMP IF T3');
    builder.addCardString('X010E310          020 $  0 010 = 64');
    builder.addCardString('X010E315              * 43     * 43');
    builder.addCardString('X010E320          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('X010E325     * 42 020 $  0 010 = 64');
    builder.addCardString('X010E330              * 44     * 44');
    builder.addCardString('X010E335          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('X010E340     * 43 051,4211,062,1416     \'CALL 233 FOR LATEST JOSS INFORMATION');
    builder.addCardString('X010E345          001,0030,060,7026');
    builder.addCardString('X010E350          023,0510,342,1421');
    builder.addCardString('X010E355          031,4251,443,1416');
    builder.addCardString('X010E360          060,5463,447,1016');
    builder.addCardString('X010E365          014,4450,542,3051');
    builder.addCardString('X010E370          022,0211,461,4446');
    builder.addCardString('X010E375          022,4331,250,0000');
    builder.addCardString('X010E380     * 44 063,4430,521,0462     \'PLEASE WIND UP YOUR WORK AND TURN OF');
    builder.addCardString('X010E385          012,4161,541,4445     AS SOON AS POSSIBLE.\'');
    builder.addCardString('X010E390          012,0161,502,3416');
    builder.addCardString('X010E395          034,0461,502,4416');
    builder.addCardString('X010E400          033,0461,222,1016');
    builder.addCardString('X010E405          010,4450,500,7063');
    builder.addCardString('X010E410          032,0511,120,7046');
    builder.addCardString('X010E415          013,0260,341,0462');
    builder.addCardString('X010E420          007,0621,142,3045');
    builder.addCardString('X010E425          007,0211,440,7047');
    builder.addCardString('X010E430          023,0621,441,4422');
    builder.addCardString('X010E435          021,4250,662,5200');
    builder.addCardString('X010E440     * 50 020 H 12 142 K 32     \'RI\' RESET SIGNAL');
    builder.addCardString('X010E445          024 U  0 052 * 51');
    builder.addCardString('X010E450     * 51 020 ---- 025 * 53');
    builder.addCardString('X010E455          024 * 54 056 * 52');
    builder.addCardString('X010E460     * 52 025 * 55 001 ----');
    builder.addCardString('X010E465          130 $  0');
    builder.addCardString('X010E470     * 53     L  0     L  0');
    builder.addCardString('X010E475     * 54     * 56     * 56');
    builder.addCardString('X010E480     * 55     * 57     * 57');
    builder.addCardString('X010E485     * 56 130 $  0              SWITCH TABLE L0');
    builder.addCardString('X010E490          130 $  0              L1');
    builder.addCardString('X010E495          010 * 60              L2');
    builder.addCardString('X010E500          010 X  2              L3');
    builder.addCardString('X010E505          010 X  2              L4');

    builder.addCardString('X010E510          010 X  2              L5');
    builder.addCardString('X010E515          010 X  2              L6');
    builder.addCardString('X010E520          010 X  2              L7');
    builder.addCardString('X010E525          010 * 60              L8');
    builder.addCardString('X010E530          010 X  2              L9');
    builder.addCardString('X010E535          130 $  0              L10');
    builder.addCardString('X010E540          010 * 57              L11');
    builder.addCardString('X010E545          010 * 60              L12');
    builder.addCardString('X010E550          010 * 66              L13');
    builder.addCardString('X010E555          010 * 57              L14');
    builder.addCardString('X010E560          130 $  0              L15');
    builder.addCardString('X010E570     * 57 020 $  0 010 = 54     BRING IN USER BLOCK');
    builder.addCardString('X010E580          120    0 050 P 15     SET RI=FLAG FOR L11,L14');
    builder.addCardString('X010E590          020 $  0 010 = 53     KICK OUT USER BLOCK');
    builder.addCardString('X010E595          010 X  2              EXIT TO SIGNAL SERVICE');
    builder.addCardString('X010E600     * 60 020 $  0 010 = 54     BRING IN USER BLOCK');
    builder.addCardString('X010E610     * 66 020 Q  8 001 * 61     JUMP IF DIRECT');
    builder.addCardString('X010E620          020 S  0 050 P 12     SET UP \'INTERRUPTED\' MESSAGE');
    builder.addCardString('X010E625          020 $  0 010 = 64');
    builder.addCardString('X010E630              * 90     * 90');
    builder.addCardString('X010E635          020 P 16 056 P  3     P16 OK HERE');
    builder.addCardString('X010E640          020 $  0 010 =  7     UNPACK');
    builder.addCardString('X010E645          020 J 12 050 P  2     COPY STEP NUMBER FOR R TO S');
    builder.addCardString('X010E650     * 62 020 $  0 010 =  2');
    builder.addCardString('X010E655          124 K 35 025 K 35');
    builder.addCardString('X010E660          002 * 63 010 $  1');
    builder.addCardString('X010E665          020 P  1 124 A 27');
    builder.addCardString('X010E670          025 A 27 001 * 65');
    builder.addCardString('X010E675     * 63 020 P 12 024 K  3');
    builder.addCardString('X010E680          050 P 12 056 * 64');
    builder.addCardString('X010E685     * 64 020 P  1 050 ----');
    builder.addCardString('X010E690          020 * 62 010 =  1');
    builder.addCardString('X010E695     * 65 020 A 27 050 P 11     INSERT PERIOD');
    builder.addCardString('X010E700          020 $  0 010 = 66');
    builder.addCardString('X010E705          020 A 42 050 P 11     INSERT CR+EOM');
    builder.addCardString('X010E710          020 $  0 010 = 66');
    builder.addCardString('X010E715          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('X010E720     * 61 020 S  0 050 P 12     SET UP \'REVOKED\' MESSAGE');
    builder.addCardString('X010E725          020 $  0 010 = 64');
    builder.addCardString('X010E730              * 91     * 91');
    builder.addCardString('X010E735          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('X010E740     * 70 020 R  1 001 * 73     (INITIALS) JUMP IF NO CHARACTERS');
    builder.addCardString('X010E745          020 R  5 002 * 73     JUMP IF MORE THAN FOUR CHARACTERS');
    builder.addCardString('X010E750          020 K 15 050 Z  0     INITIALIZE');
    builder.addCardString('X010E755     * 71 020 P  1 124 K 34');
    builder.addCardString('X010E760          025 K 34 001 * 73     JUMP IF NOT LETTER');
    builder.addCardString('X010E765          020 P  1 004 Z  0');
    builder.addCardString('X010E770          075   32 050 Z  0');
    builder.addCardString('X010E775          020 P  2 025 K  3');
    builder.addCardString('X010E780          054 P  2 052 * 72');
    builder.addCardString('X010E785     * 72 020 ---- 050 P  1');
    builder.addCardString('X010E790          006 * 71 020 H  7     LOOP IF MORE');
    builder.addCardString('X010E791          024 U  7 056 * 74');
    builder.addCardString('X010E792     * 74 020 Z  0 050 ----     SET INITIALS IN U7');
    builder.addCardString('X010E795          120    0 050 P 13     CLEAR \'WTG FOR INITIALS\' SUBSTATE');

    builder.addCardString('X010E800          020 $  0 010 = 22     TYPE TIME LINE AT TOP OF PAGE');
    builder.addCardString('X010E805          014 X 12              SWITCH AND CARRY ON VIA X12.');
    builder.addCardString('X010E810     * 73 020 S  0 050 P 12     INITIALIZE');
    builder.addCardString('X010E815          020 $  0 010 = 64');
    builder.addCardString('X010E820              * 92     * 92');
    builder.addCardString('X010E825          010 X 12              TRANSMIT AND SWITCH VIA X12');
    builder.addCardString('X010E850     * 90 054,5011,100,7021     \'I\'M AT STEP\'');
    builder.addCardString('X010E855          031,4161,443,1425');
    builder.addCardString('X010E860          023,4164,000,0000');
    builder.addCardString('X010E865     * 91 064,4251,522,3042     \'REVOKED.\'');
    builder.addCardString('X010E870          012,4240,662,5200');
    builder.addCardString('X010E875     * 92 060,4641,443,1416     \'JUST ONE TO FOUR LETTERS PLEASE.\'');
    builder.addCardString('X010E880          023,0450,520,7063     \'INITIALS PLEASE-');
    builder.addCardString('X010E885          023,0160,542,3064');
    builder.addCardString('X010E890          024,4161,061,2463');
    builder.addCardString('X010E895          031,4251,223,1016');
    builder.addCardString('X010E900          023,4430,521,0462');
    builder.addCardString('X010E905          012,4331,345,4445');
    builder.addCardString('X010E910          014,4630,621,0443');
    builder.addCardString('X010E915          031,0161,162,1425');
    builder.addCardString('X010E920          010,4620,525,0016');
    builder.addCardString('X010E925          007,0554,000,0000,');
    builder.addCardString('X010E999        /     X 10 010,7000/');

    builder.addCardString('                $              E  0');
    builder.addCardString('E---E000+    E  0 020 E  0 010 *  0     OUT OF SPACE');
    builder.addCardString('                $              E  1');
    builder.addCardString('E---E001     E  1 020 E  1 010 *  0     OVERFLOW');
    builder.addCardString('                $              E  2');
    builder.addCardString('E---E002     E  2 020 E  2 010 *  0     UNDEFINED');
    builder.addCardString('                $              E  3');
    builder.addCardString('E---E003     E  3 020 E  3 010 *  0     DIVISION BY ZERO');
    builder.addCardString('                $              E  4');
    builder.addCardString('E---E004     E  4 020 E  4 010 *  0     ILLEGAL INDEX');
    builder.addCardString('                $              E  5');
    builder.addCardString('E---E005     E  5 020 E  5 010 *  0     NUMERAL HAS MORE THAN NINE SIGNIF DIGI');
    builder.addCardString('                $              E  6');
    builder.addCardString('E---E006     E  6 020 E  6 010 *  0     EH');
    builder.addCardString('                $              E  7');
    builder.addCardString('E---E007     E  7 020 E  7 010 *  0     \'GO\' BUT NO TASK');
    builder.addCardString('                $              E  8');
    builder.addCardString('E---E008     E  8 020 E  8 010 *  0     TOO MANY VALUES FOR FORM');
    builder.addCardString('                $              E  9');
    builder.addCardString('E---E009     E  9 020 E  9 010 *  0     ILLEGAL INDIRECT');
    builder.addCardString('                $              E 10');
    builder.addCardString('E---E010     E 10 020 E 10 010 *  0     ILLEGAL DIRECT');
    builder.addCardString('                $              E 11');
    builder.addCardString('E---E011     E 11 020 E 11 010 *  0     ILLEGAL STEP LABEL');
    builder.addCardString('                $              E 12');
    builder.addCardString('E---E012     E 12 020 E 12 010 *  0     ILLEGAL FORM NUMBER');
    builder.addCardString('                $              E 13');
    builder.addCardString('E---E013     E 13 020 E 13 010 *  0     ILLEGAL STEP NUMBER');
    builder.addCardString('                $              E 14');
    builder.addCardString('E---E014     E 14 020 E 14 010 *  0     ILLEGAL ARG FOR SQRT');
    builder.addCardString('                $              E 15');
    builder.addCardString('E---E015     E 15 020 E 15 010 *  0     FIELD HAS FEWER THAN 7 PERIODS');
    builder.addCardString('                $              E 16');
    builder.addCardString('E---E016     E 16 020 E 16 010 *  0     NO SUCH STEP');
    builder.addCardString('                $              E 17');
    builder.addCardString('E---E017     E 17 020 E 17 010 *  0     NO SUCH PART');
    builder.addCardString('                $              E 18');
    builder.addCardString('E---E018     E 18 020 E 18 010 *  0     ILLEGAL PART NUMBER');
    builder.addCardString('                $              E 19');
    builder.addCardString('E---E019     E 19 020 E 19 010 *  0     NO SUCH FORM');
    builder.addCardString('                $              E 20');
    builder.addCardString('E---E020     E 20 020 E 20 010 *  0     ILLEGAL ARG FOR LOG');
    builder.addCardString('                $              E 21');
    builder.addCardString('E---E021     E 21 020 E 21 010 *  0     NEGATIVE TO NON INTEGER POWER');
    builder.addCardString('                $              E 22');
    builder.addCardString('E---E022     E 22 020 E 22 010 *  0     ILLEGAL ARG FOR SIN OR COS');
    builder.addCardString('                $              E 23');
    builder.addCardString('E---E023     E 23 020 E 23 010 *  0     ZERO TO NEGATIVE POWER');
    builder.addCardString('                $              E 24');
    builder.addCardString('E---E024     E 24 020 E 24 010 *  0     TOO FEW VALUES FOR FORM');
    builder.addCardString('                $              E 25');
    builder.addCardString('E---E025     E 25 020 E 25 010 *  0     INDIVIDUAL VALUES ARE REQUIRED FOR FOR');
    builder.addCardString('                $              E 26');
    builder.addCardString('E---E026     E 26 020 E 26 010 *  0     CAN\'T FIND PART FOR ITERATION');
    builder.addCardString('                $              E 27');
    builder.addCardString('E---E027     E 27 020 E 27 010 *  0     CAN\'T FIND STEP FOR ITERATION');
    builder.addCardString('                $              E 28');
    builder.addCardString('E---E028     E 28 020 E 28 010 *  0     ILLEGAL SET OF VALUES FOR ITERATION');
    builder.addCardString('E---E029     E 29');
    builder.addCardString('                $              E 30');
    builder.addCardString('E---E030     E 30 020 E 30 010 *  0     FIELDS RUN TOGETHER');
    builder.addCardString('                $              E 31');
    builder.addCardString('E---E031     E 31 020 E 31 010 *  0     CAN\'T EXPRESS VALUE IN GIVEN FORM');
    builder.addCardString('                $              E 32');
    builder.addCardString('E---E040     *  0 050 P 18 010 D  0,');

    builder.addCardString('                $               501')

    builder.addCardString('E---E100     *  0     * 50 012 * 51');
    builder.addCardString('E---E101     *  1     * 51 012 * 52');
    builder.addCardString('E---E102     *  2     * 52 012 * 53');
    builder.addCardString('E---E103     *  3     * 53 012 * 54');
    builder.addCardString('E---E104     *  4     * 54 012 * 55');
    builder.addCardString('E---E105     *  5     * 55 012 * 56');
    builder.addCardString('E---E106     *  6     * 56 012 * 57');
    builder.addCardString('E---E107     *  7     * 57 012 * 58');
    builder.addCardString('E---E108     *  8     * 58 012 * 59');
    builder.addCardString('E---E109     *  9     * 59 012 * 60');
    builder.addCardString('E---E110     * 10     * 60 012 * 61');
    builder.addCardString('E---E111     * 11     * 61 012 * 62');
    builder.addCardString('E---E112     * 12     * 62 012 * 63');
    builder.addCardString('E---E113     * 13     * 63 012 * 64');
    builder.addCardString('E---E114     * 14     * 64 012 * 65');
    builder.addCardString('E---E115     * 15     * 65 012 * 66');
    builder.addCardString('E---E116     * 16     * 66 012 * 67');
    builder.addCardString('E---E117     * 17     * 67 012 * 68');
    builder.addCardString('E---E118     * 18     * 68 012 * 69');
    builder.addCardString('E---E119     * 19     * 69 012 * 70');
    builder.addCardString('E---E120     * 20     * 70 012 * 71');
    builder.addCardString('E---E121     * 21     * 71 012 * 72');
    builder.addCardString('E---E122     * 22     * 72 012 * 73');
    builder.addCardString('E---E123     * 23     * 73 012 * 74');
    builder.addCardString('E---E124     * 24     * 74 012 * 75');
    builder.addCardString('E---E125     * 25     * 75 012 * 76');
    builder.addCardString('E---E126     * 26     * 76 012 * 77');
    builder.addCardString('E---E127     * 27     * 77 012 * 78');
    builder.addCardString('E---E128     * 28     * 78 012 * 79');
    builder.addCardString('E---E129     * 29     * 79 012 * 80');
    builder.addCardString('E---E130     * 30     * 80 012 * 81');
    builder.addCardString('E---E131     * 31     * 81 012 * 82');
    builder.addCardString('E---E500     * 50 054,4161,121,2425     \'I NEED MORE STORAGE SPACE.\'');
    builder.addCardString('E---E501          012,0161,102,3051');
    builder.addCardString('E---E502          012,4161,443,1446');
    builder.addCardString('E---E503          024,4210,561,2416');
    builder.addCardString('E---E504          031,0470,421,1425');
    builder.addCardString('E---E505          015,4524,000,0000');
    builder.addCardString('E---E510     * 51 054,4160,601,0465     \'I HAVE AN OVERFLOW.\'');
    builder.addCardString('E---E511          012,4160,422,2416');
    builder.addCardString('E---E512          023,0650,522,4426');
    builder.addCardString('E---E513          021,4461,541,5452');
    builder.addCardString('E---E514          100,0000,000,0000');
    builder.addCardString('E---E520     * 52 007,0311,440,7064     \' IS UNDEFINED.\'');
    builder.addCardString('E---E521          022,4240,521,3031');
    builder.addCardString('E---E522          022,4250,501,5452');
    builder.addCardString('E---E523          100,0000,000,0000');
    builder.addCardString('E---E530     * 53 054,4160,601,0465     \'I HAVE A ZERO DIVISOR.\'');
    builder.addCardString('E---E531          012,4160,420,7071');
    builder.addCardString('E---E532          012,4511,140,7024');
    builder.addCardString('E---E533          014,4650,623,1046');
    builder.addCardString('E---E534          024,4331,250,0000');
    builder.addCardString('E---E540     * 54 054,4450,501,2467     \'INDEX VALUE MUST BE INTEGER AND');
    builder.addCardString('E---E541          007,0650,422,1464       0-INDEX-99.\'');

    builder.addCardString('E---E542          012,4161,103,2062');
    builder.addCardString('E---E543          031,4160,441,2416');
    builder.addCardString('E---E544          014,4451,461,2427');
    builder.addCardString('E---E545          012,4510,341,0445');
    builder.addCardString('E---E546          012,0161,404,2431');
    builder.addCardString('E---E547          022,4240,523,3505');
    builder.addCardString('E---E548          004,4110,662,5200');
    builder.addCardString('E---E550     * 55 063,4430,521,0462     \'PLEASE LIMIT NUMBERS TO 9 SIGNIFICAN');
    builder.addCardString('E---E551          012,4161,061,4444     DIGITS\'');
    builder.addCardString('E---E552          014,4630,342,2464');
    builder.addCardString('E---E553          022,0220,522,4462');
    builder.addCardString('E---E554          007,0631,140,7011');
    builder.addCardString('E---E555          007,0620,621,3445');
    builder.addCardString('E---E556          014,4260,621,1421');
    builder.addCardString('E---E557          022,4630,341,2031');
    builder.addCardString('E---E558          013,4311,463,1033');
    builder.addCardString('E---E559          025,2000,000,0000');
    builder.addCardString('E---E560     * 56 052,4303,422,5200     \'EH.\'');
    builder.addCardString('E---E570     * 57 074,0461,500,7030     \'YOU HAVEN\'T TOLD ME TO DO');
    builder.addCardString('E---E571          010,4650,522,2501       ANYTHING YET.\'');
    builder.addCardString('E---E572          031,4161,462,3043');
    builder.addCardString('E---E573          012,0161,101,2416');
    builder.addCardString('E---E574          031,4460,341,2046');
    builder.addCardString('E---E575          007,0211,123,4063');
    builder.addCardString('E---E576          014,0311,121,3416');
    builder.addCardString('E---E577          034,0251,461,5452');
    builder.addCardString('E---E578          100,0000,000,0000');
    builder.addCardString('E---E580     * 58 054,4160,601,0465     \'I HAVE TO MANY VALUES FOR THE FORM.');
    builder.addCardString('E---E581          012,4161,462,3046');
    builder.addCardString('E---E582          007,0440,422,2470');
    builder.addCardString('E---E583          007,0650,422,1464');
    builder.addCardString('E---E584          012,4620,341,3046');
    builder.addCardString('E---E585          024,4161,461,4025');
    builder.addCardString('E---E586          007,0261,142,4444');
    builder.addCardString('E---E587          015,4524,000,0000');
    builder.addCardString('E---E590     * 59 052,0461,124,0463     \'DON\'T GIVE THIS COMMAND INDIRECTLY.\'');
    builder.addCardString('E---E591          007,0270,623,2425');
    builder.addCardString('E---E592          007,0630,601,4462');
    builder.addCardString('E---E593          007,0231,142,2044');
    builder.addCardString('E---E594          010,4450,500,7031');
    builder.addCardString('E---E595          022,4240,622,4425');
    builder.addCardString('E---E596          011,4631,063,4033');
    builder.addCardString('E---E597          025,2000,000,0000');
    builder.addCardString('E---E600     * 60 052,0461,124,0463     \'DON\'T GIVE THIS COMMAND DIRECTLY.\'');
    builder.addCardString('E---E601          007,0270,623,2425');
    builder.addCardString('E---E602          007,0630,601,4462');
    builder.addCardString('E---E603          007,0231,142,2044');
    builder.addCardString('E---E604          010,4450,500,7024');
    builder.addCardString('E---E605          014,4510,521,1463');
    builder.addCardString('E---E606          021,4700,662,5200');
    builder.addCardString('E---E610     * 61 063,4430,521,0462     \'PLEASE LIMIT STEP LABELS TO 9 DIGITS');
    builder.addCardString('E---E611          012,4161,061,4444');
    builder.addCardString('E---E612          014,4630,343,1063');
    builder.addCardString('E---E613          012,4470,342,1421');
    builder.addCardString('E---E614          011,0251,063,1016');

    builder.addCardString('E---E615          031,4460,340,4416');
    builder.addCardString('E---E616          012,0310,561,4463');
    builder.addCardString('E---E617          031,0331,250,0000');
    builder.addCardString('E---E620     * 62 053,0461,222,2016     \'FORM NUMBER MUST BE INTEGER AND');
    builder.addCardString('E---E621          022,4641,101,1025       0-FORM-10*9.\'');
    builder.addCardString('E---E622          024,4161,103,2062');
    builder.addCardString('E---E623          031,4160,441,2416');
    builder.addCardString('E---E624          014,4451,461,2427');
    builder.addCardString('E---E625          012,4510,341,0445');
    builder.addCardString('E---E626          012,0161,404,3426');
    builder.addCardString('E---E627          023,0511,104,3401');
    builder.addCardString('E---E628          030,1740,221,5452');
    builder.addCardString('E---E629          100,0000,000,0000');
    builder.addCardString('E---E630     * 63 071,0630,522,3416     \'STEP NUMBER MUST SATISFY 1-STEP-10*9');
    builder.addCardString('E---E631          022,4641,101,1025');
    builder.addCardString('E---E632          024,4161,103,2062');
    builder.addCardString('E---E633          031,4161,441,0463');
    builder.addCardString('E---E634          014,4620,543,4016');
    builder.addCardString('E---E635          000,5051,443,1425');
    builder.addCardString('E---E636          023,5070,023,0174');
    builder.addCardString('E---E637          004,4331,250,0000');
    builder.addCardString('E---E640     * 64 054,4160,601,0465     \'I HAVE A NEGATIVE ARGUMENT FOR SQRT.\'');
    builder.addCardString('E---E641          012,4160,420,7045');
    builder.addCardString('E---E642          012,4270,423,1431');
    builder.addCardString('E---E643          032,4250,341,0451');
    builder.addCardString('E---E644          013,4641,101,2445');
    builder.addCardString('E---E645          031,4160,542,3051');
    builder.addCardString('E---E646          007,0621,202,4463');
    builder.addCardString('E---E647          015,4524,000,0000');
    builder.addCardString('E---E660     * 65 053,0310,522,1424     \'FIELD DEFINITION HAS FEWER THAN');
    builder.addCardString('E---E661          007,0240,521,3031     7 PERIODS.\'');
    builder.addCardString('E---E662          022,4311,461,4446');
    builder.addCardString('E---E663          022,4160,601,0462');
    builder.addCardString('E---E654          007,0260,523,3025');
    builder.addCardString('E---E655          024,4161,461,4021');
    builder.addCardString('E---E656          022,4160,160,7047');
    builder.addCardString('E---E657          012,4510,622,3024');
    builder.addCardString('E---E658          031,0331,250,0000');
    builder.addCardString('E---E660     * 66 054,4160,461,0445     \'I CAN\'T FIND THE REQUIRED STEP.\'');
    builder.addCardString('E---E661          040,4630,341,3031');
    builder.addCardString('E---E662          022,4240,343,1430');
    builder.addCardString('E---E663          012,4161,221,2450');
    builder.addCardString('E---E664          032,0311,221,2424');
    builder.addCardString('E---E665          007,0621,461,2447');
    builder.addCardString('E---E666          015,4524,000,0000');
    builder.addCardString('E---E670     * 67 054,4160,461,0445     \'I CAN\'T FIND THE REQUIRED PART.\'');
    builder.addCardString('E---E671          040,4630,341,3031');
    builder.addCardString('E---E672          022,4240,343,1430');
    builder.addCardString('E---E673          012,4161,221,2450');
    builder.addCardString('E---E674          032,0311,221,2424');
    builder.addCardString('E---E675          007,0470,422,4463');
    builder.addCardString('E---E676          015,4524,000,0000');
    builder.addCardString('E---E680     * 68 063,4211,223,1416     \'PART NUMBER MUST BE INTEGER AND');
    builder.addCardString('E---E681          022,4641,101,1025       0-PART-10*9.\'');
    builder.addCardString('E---E682          024,4161,103,2062');

    builder.addCardString('E---E683          031,4160,441,2416');
    builder.addCardString('E---E684          014,4451,461,2427');
    builder.addCardString('E---E685          012,4510,341,0445');
    builder.addCardString('E---E686          012,0161,404,3447');
    builder.addCardString('E---E687          010,4511,464,3401');
    builder.addCardString('E---E688          030,1740,221,5452');
    builder.addCardString('E---E689          100,0000,000,0000');
    builder.addCardString('E---E690     * 69 054,4160,461,0445     \'I CAN\'T FIND THE REQUIRED FORM.\'');
    builder.addCardString('E---E691          040,4630,341,3031');
    builder.addCardString('E---E692          022,4240,343,1430');
    builder.addCardString('E---E693          012,4161,221,2450');
    builder.addCardString('E---E694          032,0311,221,2424');
    builder.addCardString('E---E695          007,0261,142,4444');
    builder.addCardString('E---E696          015,4524,000,0000');
    builder.addCardString('E---E700     * 70 054,4160,601,0465     \'I HAVE AN ARGUMENT LTEO FOR LOG.\'');
    builder.addCardString('E---E701          012,4160,422,2416');
    builder.addCardString('E---E702          010,4510,563,2044');
    builder.addCardString('E---E703          012,4451,460,7105');
    builder.addCardString('E---E704          007,0600,341,3046');
    builder.addCardString('E---E705          024,4161,062,3027');
    builder.addCardString('E---E706          015,4524,000,0000');
    builder.addCardString('E---E710     * 71 054,4160,601,0465     \'I HAVE A NEGATIVE BASE TO A FRACTION');
    builder.addCardString('E---E711          012,4160,420,7045        POWER.\'');
    builder.addCardString('E---E712          012,4270,423,1431');
    builder.addCardString('E---E713          032,4250,341,1021');
    builder.addCardString('E---E714          031,0250,343,1446');
    builder.addCardString('E---E715          007,0210,341,3051');
    builder.addCardString('E---E716          010,4231,461,4446');
    builder.addCardString('E---E717          022,4211,060,7047');
    builder.addCardString('E---E718          023,0660,522,4433');
    builder.addCardString('E---E719          025,2000,000,0000');
    builder.addCardString('E---E720     * 72 063,4430,521,0462     \'PLEASE KEEP 1X1 LT 100 FOR SIN(X)');
    builder.addCardString('E---E721          012,4161,041,2425        OR COS(X).\'');
    builder.addCardString('E---E722          023,4163,003,3540');
    builder.addCardString('E---E723          043,4011,403,0016');
    builder.addCardString('E---E724          013,0461,220,7062');
    builder.addCardString('E---E725          014,4452,223,3560');
    builder.addCardString('E---E726          007,0461,220,7023');
    builder.addCardString('E---E727          023,0622,223,3560');
    builder.addCardString('E---E728          015,4524,000,0000');
    builder.addCardString('E---E730     * 73 054,4160,601,0465     \'I HAVE ZERO TO A NEGATIVE POWER.\'');
    builder.addCardString('E---E731          012,4161,621,2451');
    builder.addCardString('E---E732          023,0161,462,3016');
    builder.addCardString('E---E733          010,4161,121,2427');
    builder.addCardString('E---E734          010,4630,623,2425');
    builder.addCardString('E---E735          007,0471,143,3025');
    builder.addCardString('E---E736          024,4331,250,0000');
    builder.addCardString('E---E740     * 74 054,4160,601,0465     \'I HAVE TOO FEW VALUES FOR THE FORM.\'');
    builder.addCardString('E---E741          012,4161,462,3046');
    builder.addCardString('E---E742          007,0260,523,3016');
    builder.addCardString('E---E743          032,4211,063,2025');
    builder.addCardString('E---E744          031,0160,542,3051');
    builder.addCardString('E---E745          007,0630,601,2416');
    builder.addCardString('E---E746          013,0461,222,2033');
    builder.addCardString('E---E747          025,2000,000,0000');

    builder.addCardString('E---E750     * 75 054,4161,121,2425     \'I NEED INDIVIDUAL VALUES FOR A FORM.');
    builder.addCardString('E---E751          012,0160,622,2424');
    builder.addCardString('E---E752          014,4650,621,2064');
    builder.addCardString('E---E753          010,4430,343,2421');
    builder.addCardString('E---E754          021,4640,523,1016');
    builder.addCardString('E---E755          013,0461,220,7021');
    builder.addCardString('E---E756          007,0261,142,4444');
    builder.addCardString('E---E757          015,4524,000,0000');
    builder.addCardString('E---E760     * 76 054,4160,461,0445     \'I CAN\'T FIND THE PART FOR ITERATION.');
    builder.addCardString('E---E761          040,4630,341,3031');
    builder.addCardString('E---E762          022,4240,343,1430');
    builder.addCardString('E---E763          012,4161,161,0451');
    builder.addCardString('E---E764          031,4160,542,3051');
    builder.addCardString('E---E765          007,0311,461,2451');
    builder.addCardString('E---E766          010,4630,622,3045');
    builder.addCardString('E---E767          015,4524,000,0000');
    builder.addCardString('E---E770     * 77 054,4160,461,0445     \'I CAN\'T FIND THE STEP FOR ITERATION.');
    builder.addCardString('E---E771          040,4630,341,3031');
    builder.addCardString('E---E772          022,4240,343,1430');
    builder.addCardString('E---E773          012,4161,443,1425');
    builder.addCardString('E---E774          023,4160,542,3051');
    builder.addCardString('E---E775          007,0311,461,2451');
    builder.addCardString('E---E776          010,4630,622,3045');
    builder.addCardString('E---E777          015,4524,000,0000');
    builder.addCardString('E---E780     * 78 054,4431,061,2427     \'ILLEGAL SET OF VALUES FOR ITERATION.');
    builder.addCardString('E---E781          010,4430,343,1025');
    builder.addCardString('E---E782          031,4161,141,3016');
    builder.addCardString('E---E783          032,4211,063,2025');
    builder.addCardString('E---E784          031,0160,542,3051');
    builder.addCardString('E---E785          007,0311,461,2451');
    builder.addCardString('E---E786          010,4630,622,3045');
    builder.addCardString('E---E787          015,4524,000,0000');
    builder.addCardString('E---E790     * 79');
    builder.addCardString('E---E800     * 80 074,0461,502,4416     \'YOUR FIELDS RUN TOGETHER IN THE FORM');
    builder.addCardString('E---E801          013,0310,522,1424');
    builder.addCardString('E---E802          031,0161,223,2045');
    builder.addCardString('E---E803          007,0631,141,3425');
    builder.addCardString('E---E804          031,4300,522,4416');
    builder.addCardString('E---E805          014,4450,343,1430');
    builder.addCardString('E---E806          012,4160,542,3051');
    builder.addCardString('E---E807          022,0331,250,0000');
    builder.addCardString('E---E810     * 81 054,4160,461,0445     \'I CAN\'T EXPRESS VALUE IN YOUR FORM.\'');
    builder.addCardString('E---E811          040,4630,341,2467');
    builder.addCardString('E---E812          023,4510,523,1062');
    builder.addCardString('E---E813          007,0650,422,1464');
    builder.addCardString('E---E814          012,4160,622,2416');
    builder.addCardString('E---E815          034,0461,502,4416');
    builder.addCardString('E---E816          013,0461,222,2033');
    builder.addCardString('E---E817          025,2000,000,0000');
    builder.addCardString('E---E820     * 82                  ,');

    builder.addCardString('F000E000+    F  0 010 $  0              Y=SQRT(X)');
    builder.addCardString('F000E010          024 K  2 052 *  9     SET EXIT');
    builder.addCardString('F000E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F000E020          023 Q  3 002 *  9     TRANSFER IF X=0');
    builder.addCardString('F000E030          020 $  0 010 = 11     UNPACK X INTO P4, P5, P6');
    builder.addCardString('F000E040          023 P  5 001 E 14     TRANSFER IF X NEGATIVE');
    builder.addCardString('F000E050          020 P  4 071    8     COMPUTE 1/2 SFX');
    builder.addCardString('F000E060          050 T  1 060 T  2     STORE IN P4');
    builder.addCardString('F000E070          071   32 072    1');
    builder.addCardString('F000E080          050 P  4 020 T  1     TEST FOR ODD OR EVEN');
    builder.addCardString('F000E090          004 P  6 002 *  1     IF ODD 10.P5 TO T0');
    builder.addCardString('F000E100          032 N  1 060 T  0     AND 10E9 TO P6 AS Y(0)');
    builder.addCardString('F000E110          020 N  9 010 *  2');
    builder.addCardString('F000E120     *  1 060 T  0 020 * 90     SFX EVN, X TO T0');
    builder.addCardString('F000E130     *  2 050 P  6 004 T  0     AND SQRT(10) + EPSILON TO P6');
    builder.addCardString('F000E140          032 N  8 044 P  6     T1=Y(N)-(10E8.X/Y(N))=DELTA');
    builder.addCardString('F000E150          020 P  6 065 T  1');
    builder.addCardString('F000E160          020 P  6 073    1     P6=Y(N+1)=(2Y-DELTA)/2');
    builder.addCardString('F000E170          025 T  1 072    1');
    builder.addCardString('F000E180          050 P  6 020 T  1     IF DELTA GREATER THAN OR EQUAL TO');
    builder.addCardString('F000E190          025 N  4 006 *  2     10E4, ITERATE');
    builder.addCardString('F000E200          020 P  6 004 T  0');
    builder.addCardString('F000E210          037 N  8 044 P  6     IF (Y(N+1) + (Y(N+1)-A.10E8)/Y(N+1)))');
    builder.addCardString('F000E220          020 P  6 064 T  2     IS LESS THAN ZERO, ADD ONE TO');
    builder.addCardString('F000E230          002 *  3 020 P  6     Y(N+1)');
    builder.addCardString('F000E240          024 K  1 050 P  6');
    builder.addCardString('F000E250     *  3 020 $  0 010 = 30     PACK RESULT');
    builder.addCardString('F000E260     *  9 010 -----             EXIT');
    builder.addCardString('F000E270     * 90+   316227800   39,    SQRT(10) + EPSILON');

    builder.addCardString('F001E000+    F  1 010 $  0              Y=LOG(X)---BASE E');
    builder.addCardString('F001E010          024 K  2 052 *  9     SET EXIT');
    builder.addCardString('F001E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F001E020          023 Q  3 002 E 20     X=0 IS AN ERROR');
    builder.addCardString('F001E030          020 $  0 010 = 11     UNPACK');
    builder.addCardString('F001E040          023 P  5 001 E 20     X NEGATIVE IS AN ERROR');
    builder.addCardString('F001E050          020 P  4 072   31     SFX AS AN INTEGER');
    builder.addCardString('F001E060          050 P  4 020 J 11     INITIALIZE ADDRESS');
    builder.addCardString('F001E061          024 K002 010 * 21');
    builder.addCardString('F001E070     * 21 052 *  6 120');
    builder.addCardString('F001E080     *  1 050 T  1 020 P  6     SET Q=0');
    builder.addCardString('F001E090          025 * 91 002 *  2     IF COEF(X) LESS THAN LOWER BOUND,');
    builder.addCardString('F001E100          020 P  6 073    1     2 COEF(X) REPLACES IT AND');
    builder.addCardString('F001E110          050 P  6 020 T  1     Q+1 REPLACES Q');
    builder.addCardString('F001E120          024 I  1 010 *  1     COMPUTE Z FOR SERIES AS EQUAL TO');
    builder.addCardString('F001E130     *  2 020 P  6 024 * 92     (COEF(X)-(10*8)(2*3) /');
    builder.addCardString('F001E140          050 T  2 020 P  6     (COEF(X)+(10*8)(2*3)');
    builder.addCardString('F001E150          025 * 92 040 T  2');
    builder.addCardString('F001E160          060 T  2 030 T  2     Z IN T2, Z*2 IN T3');
    builder.addCardString('F001E170          050 T  3 120          COMPUTE 1/2.LOG(X)=Z+1/3(Z+3)+');
    builder.addCardString('F001E180          050 T  0 020 * 95     1/5(Z*5)+...+1/13(Z*13)');
    builder.addCardString('F001E190     *  3 050 T  4 020 I  1     T4=DELTA=13');
    builder.addCardString('F001E200          040 T  4 020 T  0     T0=LOG(X)=0, INITIALLY');
    builder.addCardString('F001E210          064 T  0 004 T  0     T0=LOG(X)+(1/DELTA)');
    builder.addCardString('F001E220          030 T  3 050 T  0     T0=(LOG(X)+(1/DELTA)).Z*2');
    builder.addCardString('F001E230          020 T  4 025 I  4     TRANSFER IF DELTA WAS 3');
    builder.addCardString('F001E240          005 *  4 024 I  2     DELTA=DELTA-2');
    builder.addCardString('F001E250     *  4 010 *  3 004 T  0     (Z.LOG(X))+Z');
    builder.addCardString('F001E260          030 T  2 024 T  2     T0=LOG(X)/4');
    builder.addCardString('F001E270          072    1 050 T  0');
    builder.addCardString('F001E280          020 I  3 025 T  1');
    builder.addCardString('F001E290          050 T  1 004 * 93');
    builder.addCardString('F001E300          032 T  1 060 T  5     T5=(3-Q).LOG(2)/4');
    builder.addCardString('F001E310          024 T  0 004 * 94     LOG(X)=4.(EXP(X).LOG(10)+T5)');
    builder.addCardString('F001E320          036 P  4 077    2     INTEGER IN ACCUMULATOR AND T0, T5');
    builder.addCardString('F001E330          050 T  0 050 T  5     FRACTION IN MQ AND T1');
    builder.addCardString('F001E340          001 * 12 060 T  1     TRANSFER IF LOG IS NEGATIVE');
    builder.addCardString('F001E350     *  5 023 T  0 006 * 14     ...... NORMALIZE .....');
    builder.addCardString('F001E360     * 18 020 I  1 050 T  3     IF T0 IS GREATER THAN 10*I, THEN');
    builder.addCardString('F001E370     *  6 021 ---- 024 T  0     SET I=I+1, ITERATE');
    builder.addCardString('F001E380          005 *  7 020 *  6');
    builder.addCardString('F001E390          024 K  2 052 *  6');
    builder.addCardString('F001E400          020 T  3 024 I  1');
    builder.addCardString('F001E410     *  7 014 * 18 020 T  3     IF T0 IS LESS THAN 10*I, THEN');
    builder.addCardString('F001E420          025 I  1 050 P  4     P4=EXP(Y)=I-1 AND THE MAGNITUDE');
    builder.addCardString('F001E430          020 * 97 025 T  3     /FY=(T0+(2*(-39)).T1).10*(9-I)');
    builder.addCardString('F001E440          056 *  8 056 * 10');
    builder.addCardString('F001E450     *  8 004 T  1 030 ----');
    builder.addCardString('F001E460     * 10 004 T  0 036 ----');
    builder.addCardString('F001E470          060 P006 025 N009     TEST FINAL ROUND');
    builder.addCardString('F001E471          001 * 22 020 N008');
    builder.addCardString('F001E472          050 P006 020 P004');
    builder.addCardString('F001E473          024 I001 010 * 11');
    builder.addCardString('F001E474     * 22 020 P004 010 * 11');

    builder.addCardString('F001E480     * 11 073   31 050 P  4     P4=SFY');
    builder.addCardString('F001E490          020 T  5 124 K  4     SET SIGN OF LOG');
    builder.addCardString('F001E500          070    9 050 P  5');
    builder.addCardString('F001E510          020 $  0 010 = 30     PACK RESULT');
    builder.addCardString('F001E520     *  9 010 ----              EXIT');
    builder.addCardString('F001E530     * 12 061 T  1 006 * 13');
    builder.addCardString('F001E540          125 K  4 050 T  1     GET ABSOLUTE VALUE OF NEGATIVE LOG');
    builder.addCardString('F001E550          022 T  0 025 I  1');
    builder.addCardString('F001E560     * 20 050 T  0 010 *  5');
    builder.addCardString('F001E570     * 13 050 T  1 022 T  0');
    builder.addCardString('F001E580     * 14 010 * 20 023 T  1     LOG IS LESS THAN ONE, TEST FOR');
    builder.addCardString('F001E590          002 * 19 004 T  1     LOG=ZERO');
    builder.addCardString('F001E600     * 15 020 I  1 050 T  3');
    builder.addCardString('F001E610          032 N  1 025 I  1');
    builder.addCardString('F001E620          002 * 16 020 T  3');
    builder.addCardString('F001E630          024 I  1 014 * 15');
    builder.addCardString('F001E640     * 16 020 T  3 025 I  1');
    builder.addCardString('F001E650          024 J 11 056 * 17');
    builder.addCardString('F001E660     * 17 004 T  1 032 ----');
    builder.addCardString('F001E670          032 N  9 050 P  6');
    builder.addCardString('F001E680          021 T  3 010 * 11');
    builder.addCardString('F001E690     * 19 050 Q  3 010 *  9');
    builder.addCardString('F001E700     * 90+   316227800   39     SQRT(10)+EPSILON');
    builder.addCardString('F001E710     * 91+   565685425   39     (2E3)(10E8)(SQRT(2)/2)');
    builder.addCardString('F001E720     * 92+   800000000   39     (2E3)(10E8)');
    builder.addCardString('F001E730     * 93+.17328679514   00     LOG(2)/4');
    builder.addCardString('F001E740     * 94+.57564627325   00     LOG(10)/4');
    builder.addCardString('F001E750     * 95+          13   39');
    builder.addCardString('F001E770     * 97     N  9     N  9,');

    builder.addCardString('F002E000+    F  2 010 $  0              Y = E*X = EXP(X)');
    builder.addCardString('F002E010          024 K  2 052 *  9     SET EXIT');
    builder.addCardString('F002E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F002E020          023 Q  3 001 *  1     IF X=0, SET Y=1 AND EXIT');
    builder.addCardString('F002E030     *  3 020 N  8 050 Q  3');
    builder.addCardString('F002E040          010 *  9');
    builder.addCardString('F002E050     *  1 020 $  0 010 = 11     UNPACK NON-ZERO X');
    builder.addCardString('F002E060          020 P  6 040 N  9     NEW COEF(X) IS COEF(X) / 10*9');
    builder.addCardString('F002E070          060 T  0 020 P  4     SFX SHIFTED TO 2*-39 POSITION');
    builder.addCardString('F002E080          072   31 050 T  1     STORE IN T1');
    builder.addCardString('F002E090          002 *  2 024 I  9     IF, SFX IS LESS THAN -9, SET Y=1');
    builder.addCardString('F002E100          001 *  3 022 T  1');
    builder.addCardString('F002E105          025 I  1 010 $  1     ADJUST SFX BY ONE');
    builder.addCardString('F002E110          024 J 11 045 *  4');
    builder.addCardString('F002E120          120      050 P  4     SFX FOR RESULT');
    builder.addCardString('F002E130     *  4 004 T  0 044 ----');
    builder.addCardString('F002E140          060 T  0 070    2     COEF(X) /4 FOR SERIES');
    builder.addCardString('F002E150          050 T  0 014 *  5     IF SFX IS 3 OR MORE, CHECK SIGN');
    builder.addCardString('F002E160     *  2 025 I  3 001 *  6     OF COEF(X)');
    builder.addCardString('F002E170     *  8 023 P  5 002 E  1     OVERFLOW FOR POSITIVE NO.');
    builder.addCardString('F002E180          120      014 *  3     SET Y-0 FOR NEGATIVE NO.');
    builder.addCardString('F002E190     *  6 024 I  1 005 *  7     IF SFX=2, COEF(X) MUST BE LESS');
    builder.addCardString('F002E200          020 P  6 025 * 92     THAN LOG(10) TIMES (10*8) + 1');
    builder.addCardString('F002E210     *  7 002 *  8 020 T  1     IF GREATER, TEST SIGN OF COEF');
    builder.addCardString('F002E220          024 I  1 024 J 11');
    builder.addCardString('F002E230          056 * 10 004 T  0     (COEF(X)) (LOG(E)) (LESS THAN ONE)');
    builder.addCardString('F002E240          030 * 93 050 T  0     IN T0');
    builder.addCardString('F002E250     * 10 004 T  0 032 ----     T0 TIMES 10*(SFX PLUS 1)');
    builder.addCardString('F002E260          050 P  4 060 T  0     INTEGER PART TO SFX FOR RESULT');
    builder.addCardString('F002E270          072    2 044 * 93     FRACTIONAL PART /4 TO XBAR');
    builder.addCardString('F002E280     *  5 060 T  0 023 P  5');
    builder.addCardString('F002E290          006 * 11 021 T  0     XBAR FOR SERIES IN T0, USE 12 TERMS');
    builder.addCardString('F002E300          050 T  0 021 P  4');
    builder.addCardString('F002E310     * 11 050 P  4 020 * 95     SET DIVISOR FOR SERIES');
    builder.addCardString('F002E320          050 T  2 020 K 21     SET SERIES SUM = 1/2');
    builder.addCardString('F002E330     * 12 050 T  1 020 T  0');
    builder.addCardString('F002E340          076   39 044 T  2     COMPUTE 1/2 (E*XBAR) = Z');
    builder.addCardString('F002E350          030 T  1 024 K 21');
    builder.addCardString('F002E360          050 T  1 020 T  2');
    builder.addCardString('F002E370          025 I  1 050 T  2');
    builder.addCardString('F002E380          025 I  1 006 * 12     (Z*4) (10*10) (16) = E*X/Y');
    builder.addCardString('F002E390          004 T  1 030 T  1');
    builder.addCardString('F002E400          050 T  1 004 T  1');
    builder.addCardString('F002E410          030 T  1 010 * 18');
    builder.addCardString('F002E420     * 18 050 T  1 004 T  1');
    builder.addCardString('F002E430          032 N 10 077    4');
    builder.addCardString('F002E440          050 P  6 004 I  3     NORMALIZE E*X');
    builder.addCardString('F002E450          025 N 10 002 * 13     RESULT LESS THAN 10*12');
    builder.addCardString('F002E460          004 I  2 020 P  6     AND GREATER THAN 10*8');
    builder.addCardString('F002E470          025 N 10 002 * 13');
    builder.addCardString('F002E480          004 I  1 020 P  6');
    builder.addCardString('F002E490          025 N  9 001 * 14');
    builder.addCardString('F002E500     * 13 020 J 11 064 T  1');
    builder.addCardString('F002E510          056 * 15 056 * 19');

    builder.addCardString('F002E520          020 P  4 010 $  1');
    builder.addCardString('F002E530     * 19 064 P  4 020 ----');
    builder.addCardString('F002E540          072    1 024 P  6');
    builder.addCardString('F002E550     * 15 072   39 044 ----');
    builder.addCardString('F002E560          060 P  6 025 N  9     TEST FINAL ROUND');
    builder.addCardString('F002E570          001 * 14 020 N  8');
    builder.addCardString('F002E580          050 P  6 020 P  4');
    builder.addCardString('F002E590          024 I  1 014 * 14');
    builder.addCardString('F002E600     * 14 020 P  4 025 I  2     ADJUST SFX BY 2');
    builder.addCardString('F002E605          073   31 050 P  4');
    builder.addCardString('F002E610          120      050 P  5     CLEAR SIGN');
    builder.addCardString('F002E620     * 17 020 $  0 010 = 30     PACK RESULT');
    builder.addCardString('F002E630     *  9 010 ----              EXIT');
    builder.addCardString('F002E650     * 92+   230258510   39     LOG(10), BASE E, TIMES 10*8 PLUS 1');
    builder.addCardString('F002E660     * 93+.43429448190   00     LOG(E), BASE 10');
    builder.addCardString('F002E680     * 95+          12   39,');

    builder.addCardString('F003E00+     F  3 004 K  4 010 $  0     SIN(X)--SET FLAG IN MQ=-1');
    builder.addCardString('F003E010          024 K  2 052 *  9     SET EXIT');
    builder.addCardString('F003E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F003E020          060 T  0 010 $  1     STORE FLAG IN T0');
    builder.addCardString('F003E030          020 $  0 010 = 11     UNPACK');
    builder.addCardString('F003E035          020 P  4 072   31     SHIFT SFX TO 2*(-39) POSITION');
    builder.addCardString('F003E040          050 P  4 020 T  0     FOR SINE SET RESULT = Q3 IF SFX');
    builder.addCardString('F003E050          002 *  1 020 P  4     IS -5 OR LESS, SHIFT P5 TO SIGN BIT');
    builder.addCardString('F003E060          024 I  4 001 *  9');
    builder.addCardString('F003E070          020 P  5 071    9');
    builder.addCardString('F003E080     *  1 050 P  5 020 P  4     TRANSFER IF SFX IS NEGATIVE');
    builder.addCardString('F003E090          005 *  2 025 I  2     NO. OUT OF RANGE IF SFX IS 2 OR MORE');
    builder.addCardString('F003E100          002 E 22 024 I  4     LOCATION (10*(SFX+2))');
    builder.addCardString('F003E110          024 J 11 056 $  1');
    builder.addCardString('F003E120          004 P  6 032 ----     X=X.(10*(SFX+10))');
    builder.addCardString('F003E130          044 * 91 050 T  1     COMPUTE X/2PI');
    builder.addCardString('F003E140          025 * 92 001 *  3     X=REMAINDER IF X LESS THAN PI,');
    builder.addCardString('F003E150          050 T  1 020 P  5     OTHERWISE X=X-PI');
    builder.addCardString('F003E160          024 K  4 050 P  5     CHANGE SIGN');
    builder.addCardString('F003E170     *  3 020 T  1 040 * 92     X/PI IN MQ');
    builder.addCardString('F003E180     *  2 014 *  4 024 * 93     IF SFX LESS THAN -11, SET X=0');
    builder.addCardString('F003E190          006 *  5 004 K  0');
    builder.addCardString('F003E200     *  5 014 *  4 024 J 11     LOCATION (10*(SFX+11))');
    builder.addCardString('F003E210          056 * 15 020 P  6');
    builder.addCardString('F003E220     * 15 040 N  9 032 ----     X=((X/10*9).10*(11+SFX))/PI.10*10');
    builder.addCardString('F003E230     *  4 044 * 92 020 K 21     X= 1/2 - X FOR COS');
    builder.addCardString('F003E240          065 T  1 020 T  0     TRANSFER TO SINE OR COS');
    builder.addCardString('F003E250          002 *  6 020 K 21     FOR SINE, X = 1/2 - ABSOLUTE VALUE');
    builder.addCardString('F003E260          027 T  1 050 T  1     OF T1 (1/2-X)');
    builder.addCardString('F003E270     *  6 004 T  1 033 T  1     -X*2');
    builder.addCardString('F003E280          077    2 050 T  2     -4(X*2)');
    builder.addCardString('F003E290          020 * 98 052 *  7     INITIALIZE SERIES FOR 1/4 SINE');
    builder.addCardString('F003E300     *  8 004 * 95 031 T  2');
    builder.addCardString('F003E310     *  7 024 ---- 050 P  6');
    builder.addCardString('F003E320          004 P  6 020 *  7');
    builder.addCardString('F003E330          024 K  2 052 *  7');
    builder.addCardString('F003E340          025 * 97 005 *  8');
    builder.addCardString('F003E350          032 T  1 050 P  6');
    builder.addCardString('F003E360          124 K  4 024 P  5');
    builder.addCardString('F003E370          070    9 050 P  5');
    builder.addCardString('F003E380          007 $  0 022 P  6');
    builder.addCardString('F003E390          073    2 003 * 10     TEST FOR OVERFLOW (RESULT=1)');
    builder.addCardString('F003E400          071   40 032 N  9     MULTIPLY RESULT AND SAVE BOTH PARTS');
    builder.addCardString('F003E410          050 P  6 060 T  2     FOR NORMALIZATION');
    builder.addCardString('F003E415          020 P  6 010 $  1');
    builder.addCardString('F003E420          025 N  9 002 * 10');
    builder.addCardString('F003E430          023 P  6 002 * 16     TEST FOR RESULT = 0');
    builder.addCardString('F003E440          021 I  9 050 P  4');
    builder.addCardString('F003E450     * 13 020 * 99 050 * 11     PRESET INSTRUCTION FOR NORMALIZATION');
    builder.addCardString('F003E460     * 11 020 P  6 025 N  8');
    builder.addCardString('F003E470          002 * 12 020 * 11');
    builder.addCardString('F003E480          025 K  1 014 * 13     NORMALIZE RESULT AND');
    builder.addCardString('F003E490     * 12 020 * 99 025 * 11');
    builder.addCardString('F003E500          050 T  1 024 J 11     ADJUST SCALE FACTOR');

    builder.addCardString('F003E505          056 * 17 010 $  1');
    builder.addCardString('F003E510          056 * 14 021 T  1');
    builder.addCardString('F003E520          024 I  8 024 P  4');
    builder.addCardString('F003E530          073   31 050 P  4');
    builder.addCardString('F003E535     * 17 004 T  2 030 ----');
    builder.addCardString('F003E540     * 14 004 P  6 036 ----');
    builder.addCardString('F003E542          060 P  6 025 N  9     TEST FOR ROUNDING UP TO 10*9');
    builder.addCardString('F003E544          001 * 16 020 N  8');
    builder.addCardString('F003E546          050 P  6 020 P  4');
    builder.addCardString('F003E550          024 K 14 050 P  4');
    builder.addCardString('F003E560     * 16 020 $  0 010 = 30     PACK RESULT');
    builder.addCardString('F003E570     *  9 010 ----              EXIT');
    builder.addCardString('F003E580     * 10 020 P  5 024 N  8     RESULT IS ONE');
    builder.addCardString('F003E590          050 Q  3 010 *  9     COMBINE WITH SIGN AND EXIT');
    builder.addCardString('F003E620     * 91+ 62831853072   39     2 PI . 10*10');
    builder.addCardString('F003E630     * 92+ 31415926536   39     PI.10*10');
    builder.addCardString('F003E640     * 93+          11   39     ELEVEN');
    builder.addCardString('F003E660     * 95 000,0000,003,5173     COEFFICIENTS A13,A11,...,A1');
    builder.addCardString('F003E670     * 96 177,7777,416,5664     TAKEN FROM ILLIAC SINE ROUTINE T5');
    builder.addCardString('F003E680          000,0025,016,6553');
    builder.addCardString('F003E690          177,6632,264,6777');
    builder.addCardString('F003E700          002,4315,361,4634');
    builder.addCardString('F003E710          153,2504,143,1673');
    builder.addCardString('F003E720          062,2077,325,0420     A1');
    builder.addCardString('F003E730     * 97 024 * 97 050 P  6     TEST WORD FOR END OF SERIES');
    builder.addCardString('F003E740     * 98     * 96     * 96');
    builder.addCardString('F003E750     * 99 020 P  6 025 N  8,    INITIALIZER FOR *11');

    builder.addCardString('F004E000+    F  4 004 K  0 014 F  3,    COS(X)--SET FLAG IN MQ=0.');

    builder.addCardString('F005E000+    F  5 010 $  0              IP(X)');
    builder.addCardString('F005E010          024 K  2 052 *  9');
    builder.addCardString('F005E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F005E020          020 $  0 010 = 11     UNPACK (Q3)');
    builder.addCardString('F005E030          023 Q  3 002 *  9     ZERO RESULT FOR ZERO ARGUMENT');
    builder.addCardString('F005E040          020 P  4 006 *  1');
    builder.addCardString('F005E050          120    0 050 Q  3     ZERO RESULT IF NEGATIVE SFX');
    builder.addCardString('F005E060     *  1 010 *  9 072   31');
    builder.addCardString('F005E070          050 T  0 025 I  8');
    builder.addCardString('F005E080          002 *  9 020 I  8     RESULT = ARGUMENT IF SFX BIG AS 8.');
    builder.addCardString('F005E090          025 T  0 024 J 11');
    builder.addCardString('F005E095          056 *  2 010 $  1');
    builder.addCardString('F005E100          056 *  3 120    0');
    builder.addCardString('F005E110     *  2 004 P  6 044 ----     CHOP FRACTIONAL PART');
    builder.addCardString('F005E120     *  3 000    0 032 ----');
    builder.addCardString('F005E130          060 P  6 010 $  1');
    builder.addCardString('F005E140          020 $  0 010 = 30     PACK RESULT INTO Q3');
    builder.addCardString('F005E150     *  9 010 ----         ,');

    builder.addCardString('F006E000+    F  6 010 $  0              FP(X)');
    builder.addCardString('F006E010          024 K  2 052 *  9');
    builder.addCardString('F006E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F006E020          020 $  0 010 = 12     PUSH OPERANDS');
    builder.addCardString('F006E030          020 $  0 010 F  5     IP(5)');
    builder.addCardString('F006E040          020 $  0 010 = 32     X=IP(X)=FP(X)');
    builder.addCardString('F006E050     *  9 010 ----         ,');

    builder.addCardString('F007E000+    F  7 010 $  0              XP(X)');
    builder.addCardString('F007E010          024 K  2 052 *  9');
    builder.addCardString('F007E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F007E020          020 $  0 010 = 11     UNPACK (Q3)');
    builder.addCardString('F007E040          020 P  4 001 *  1');
    builder.addCardString('F007E050          120    0 014 *  2');
    builder.addCardString('F007E060     *  1 021 P  4 050 P  4');
    builder.addCardString('F007E070     *  2 020 K 12 050 P  5');
    builder.addCardString('F007E080          020 P  4 072   31');
    builder.addCardString('F007E090          050 P  6 025 N  1');
    builder.addCardString('F007E100          002 *  3 120    0');
    builder.addCardString('F007E110          004 N  8 010 *  4');
    builder.addCardString('F007E120     *  3 020 K 14 004 N  7');
    builder.addCardString('F007E130     *  4 050 P  4 032 P  6');
    builder.addCardString('F007E140          060 P  6 010 $  1');
    builder.addCardString('F007E150          020 $  0 010 = 30     PACK RESULT INTO Q3');
    builder.addCardString('F007E160     *  9 010 ----         ,');

    builder.addCardString('F008E000+    F  8 024 K  2 010 $  0     DP(X)');
    builder.addCardString('F008E010          052 *  9 020 Q  6');
    builder.addCardString('F008E015          002 E  6 020 Q  3     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F008E020          125 K 11 050 Q  3');
    builder.addCardString('F008E030     *  9 010 ----         ,');

    builder.addCardString('F009E000+    F  9 010 $  0              SGN(X)');
    builder.addCardString('F009E010          024 K  2 052 *  9');
    builder.addCardString('F009E015          020 Q  6 002 E  6     MALFORMED IF AUX NOT EMPTY');
    builder.addCardString('F009E020          023 Q  3 002 *  9');
    builder.addCardString('F009E030          020 Q  3 124 K 12');
    builder.addCardString('F009E040          024 N  8 050 Q  3');
    builder.addCardString('F009E050     *  9 010 ----         ,');

    builder.addCardString('F010E000+    F 10 010 $  0              ARG(X,Y)    X IN Q3,    Y IN Q7');
    builder.addCardString('F010E010          024 K  2 052 *  9');
    builder.addCardString('F010E020          120      050 * 80     SET FLAG=0');
    builder.addCardString('F010E030          020 Q  3 124 K 12');
    builder.addCardString('F010E040          050 * 82 020 Q  3     STORE SIGN OF X IN * 82');
    builder.addCardString('F010E050          125 K 12 050 * 81     STORE ABSOLUTE VALUE OF X IN * 81');
    builder.addCardString('F010E055          020 Q  6 001 E  6     MALFORMED IF NOT ENOUGH ARGUMENTS');
    builder.addCardString('F010E060          020 Q  7 124 K 12');
    builder.addCardString('F010E070          050 * 84 020 Q  7     STORE SIGN OF Y IN * 84');
    builder.addCardString('F010E080          125 K 12 050 * 83     STORE ABSOLUTE VALUE OF Y IN * 83');
    builder.addCardString('F010E090          020 $  0 010 = 17     POP Y');
    builder.addCardString('F010E100          020 Q  6 002 E  6     MALFORMED IF TOO MANY ARGUMENTS');
    builder.addCardString('F010E110          023 * 83 002 *  1     IF Y=0, SET RESULT TO ZERO, GO TO *  1');
    builder.addCardString('F010E120          023 * 81 001 *  3     IF X=0, SET RESULT TO 1/4(PI/2),');
    builder.addCardString('F010E130          020 * 91 010 *  1     THEN DETERMINE QUADRANT');
    builder.addCardString('F010E140     *  3 020 * 83 004 * 81');
    builder.addCardString('F010E145          075    1 010 $  1');
    builder.addCardString('F010E150          065 T  0 023 T  0     IF Y=X, SET RESULT TO 1/4(PI/4),');
    builder.addCardString('F010E160     *  7 005 *  5 020 * 92     THEN DETERMINE QUADRANT');
    builder.addCardString('F010E170     *  5 010 *  1 021 T  0');
    builder.addCardString('F010E180          002 *  6 050 * 80     SET FLAG NON-ZERO');
    builder.addCardString('F010E190          004 * 81 020 * 83     INTERCHANGE Y AND X');
    builder.addCardString('F010E200          050 * 81 060 * 83');
    builder.addCardString('F010E210     *  6 020 * 83 050 Q  3');
    builder.addCardString('F010E220          020 $  0 010 = 12');
    builder.addCardString('F010E230          020 * 81 050 Q  3');
    builder.addCardString('F010E240          020 $  0 010 = 34     COMPUTE Y/X');
    builder.addCardString('F010E245          023 Q  3 002 *  1     TEST FOR RATIO EQUAL TO ZERO');
    builder.addCardString('F010E265          020 $  0 010 = 11     UNPACK');
    builder.addCardString('F010E270          020 P  4 072   31');
    builder.addCardString('F010E275          050 P  4 024 * 97     IF SFX IS LESS THAN -11, TREAT AS');
    builder.addCardString('F010E280          006 *  8 120          ZERO RATIO');
    builder.addCardString('F010E285     *  8 010 *  1 021 P  4');
    builder.addCardString('F010E290          025 I  1 024 J 11     COMPUTE FIXED POINT RATION = Z');
    builder.addCardString('F010E295          056 * 10 020 P  6     DIVIDE BY 10*9, THEN 10*(-SFX-1)');
    builder.addCardString('F010E300          040 N  9 120          SET P6=0');
    builder.addCardString('F010E305     * 10 050 P  6 044 ----');
    builder.addCardString('F010E310          060 T  2 025 * 96     IF Z LESS THAN TAN(PI/8) USE K=1');
    builder.addCardString('F010E315          002 * 11 020 * 92     IF Z GREATER OR EQUAL USE K=3');
    builder.addCardString('F010E320          004 * 94 010 * 12');
    builder.addCardString('F010E325     * 11 020 * 93 004 * 95');
    builder.addCardString('F010E330     * 12 050 * 85 061 T  0     *85=K(PI/16)');
    builder.addCardString('F010E335          024 T  2 050 T  0     T1=Z-TAN (K.PI/17)');
    builder.addCardString('F010E340          032 T  2 076    1');
    builder.addCardString('F010E345          024 K 21 050 T  1     1/2(1+Z(TAN(K.PI/16))');
    builder.addCardString('F010E350          020 T  0 072    1');
    builder.addCardString('F010E355          044 T  1 060 T  0     T0=V, ARGUMENT FOR SERIES');
    builder.addCardString('F010E360          032 T  0 050 T  1     T1=V*2');
    builder.addCardString('F010E365          020 I  1 050 T  2     SET FLAG FOR CONSTANT + OR -');
    builder.addCardString('F010E370     * 13 020 * 98 050 T  3     SET INITIAL COEFFICIENT D=15');
    builder.addCardString('F010E375          021 T  2 050 T  2     (+ OR -1)/D');
    builder.addCardString('F010E380          040 T  3 020 P  6     SERIES SUM + 1/D = SUM');
    builder.addCardString('F010E385          064 P  6 004 T  1     (V*2).SERIES');
    builder.addCardString('F010E390          030 P  6 050 P  6');

    builder.addCardString('F010E395          020 T  3 025 I  4     D=D-2,IF NEGATIVE, TERMINATE SERIES');
    builder.addCardString('F010E397          005 * 24 024 I  2');
    builder.addCardString('F010E400     * 24 014 * 13 004 T  0     V.SERIES PLUS V');
    builder.addCardString('F010E405          030 P  6 024 T  0');
    builder.addCardString('F010E410          024 * 85 072    2     STORE 1/4 ANGLE');
    builder.addCardString('F010E415     *  1 050 T  0 023 * 80     IF FLAG IS NON-ZERO, SET ANGLE TO');
    builder.addCardString('F010E420          002 *  2 020 * 91     (1/4)PI/2 - ANGLE');
    builder.addCardString('F010E425          025 T  0 050 T  0');
    builder.addCardString('F010E430     *  2 023 * 82 006 *  4     TEST SIGN OF X, IF MINUS');
    builder.addCardString('F010E435          020 * 90 025 T  0     (1/4)PI - ANGLE');
    builder.addCardString('F010E440     *  4 050 T  0 023 * 84     TEST SIGN OF Y, IF MINUS');
    builder.addCardString('F010E445          006 * 14 021 T  0     -ANGLE');
    builder.addCardString('F010E450     * 14 050 T  0 070    0     CLEAR MQ AND P4');
    builder.addCardString('F010E455          060 P  4 021 T  0');
    builder.addCardString('F010E460          005 * 15 050 T  0     STORE MAGNITUDE OF ANGLE AND SIGN');
    builder.addCardString('F010E465     * 15 004 K 12 060 P  5');
    builder.addCardString('F010E470          120      004 T  0');
    builder.addCardString('F010E475          077    2 025 I  1     IF ANGLE IS LESS THAN ONE, MULTIPLY');
    builder.addCardString('F010E480          002 * 16 032 N  9     BY 10*9, SAVE BOTH PARTS OF RESULT');
    builder.addCardString('F010E483          050 P  6 060 T  2');
    builder.addCardString('F010E495     * 17 023 P  6 010 $  1     TEST FOR ZERO');
    builder.addCardString('F010E500          002 * 18 020 J 14     INITIALIZE COMPARE INSTRUCTION');
    builder.addCardString('F010E510     * 21 056 * 19 020 P  4     TO N8');
    builder.addCardString('F010E520          025 I  1 050 P  4     DECREASE SFX BY ONE');
    builder.addCardString('F010E530     * 19 020 P  6 025 ----');
    builder.addCardString('F010E540          002 * 20 020 * 19');
    builder.addCardString('F010E550          025 I  1 010 * 21');
    builder.addCardString('F010E560     * 20 020 J 11 025 I  1     COMPUTE POWER OF 10 FOR NORMALIZATION');
    builder.addCardString('F010E570          025 P  4 056 * 22');
    builder.addCardString('F010E575          056 * 25 020 P  4');
    builder.addCardString('F010E580          073   31 050 P  4');
    builder.addCardString('F010E583     * 25 004 T  2 030 ----');
    builder.addCardString('F010E586     * 22 004 P  6 036 ----');
    builder.addCardString('F010E590          060 P  6 025 N  9     TEST FOR ROUNDING UP TO 10*9');
    builder.addCardString('F010E595          001 * 23 020 N  8');
    builder.addCardString('F010E600          050 P  6 020 P  4');
    builder.addCardString('F010E605          024 K 14 050 P  4');
    builder.addCardString('F010E610     * 23 020 $  0 010 = 30     PACK');
    builder.addCardString('F010E620     *  9 010 ----              EXIT');
    builder.addCardString('F010E630     * 16 020 K 21 072    2     RESULT IS GREATER THAN ONE');
    builder.addCardString('F010E640          004 N  8 036 T  0     MULTIPLY BY 10*8 AND ROUND,');
    builder.addCardString('F010E650          077    2 010 * 18     MULTIPLY BY 4');
    builder.addCardString('F010E655     * 18 050 P  6 010 * 23');
    builder.addCardString('F010E660     * 80                       FLAG=0 IF Y LESS THAN X');
    builder.addCardString('F010E670     * 81                       ABSOLUTE VALUE OF X');
    builder.addCardString('F010E680     * 82                       SIGN OF X');
    builder.addCardString('F010E690     * 83                       ABSOLUTE VALUE OF Y');
    builder.addCardString('F010E700     * 84                       SIGN OF Y');
    builder.addCardString('F010E710     * 85                       K(PI/16)');
    builder.addCardString('F010E720     * 90 062,2077,325,0421     PI/4= .7853981633974');
    builder.addCardString('F010E730     * 91 031,1037,552,4210     PI/8= .3926990816987');
    builder.addCardString('F010E740     * 92 014,4417,665,2104     PI/16= .1963495408494');
    builder.addCardString('F010E750     * 93 045,5457,437,6314     3 PI/16= .5890486225481');
    builder.addCardString('F010E760     * 94 014,5657,536,0125     TAN(PI/16)= .1989123673');
    builder.addCardString('F010E770     * 95 052,6067,012,5337     TAN(3 PI/16)= .6681786379');

    builder.addCardString('F010E780     * 96 032,4047,463,1771     TAN (PI/8)= .4142135623');
    builder.addCardString('F010E790     * 97                11');
    builder.addCardString('F010E800     * 98                15,');

    builder.addCardString('F012E010          024 K  2 052 *  9');
    builder.addCardString('F012E020          060 *  2 010 $  1');
    builder.addCardString('F012E030          020 Q  6 001 E  6     MALFORMED IF NOT MULTIPLE ARGUMENTS');
    builder.addCardString('F012E040     *  1 020 Q  3 050 H 21');
    builder.addCardString('F012E050          020 Q  7 050 H 22');
    builder.addCardString('F012E060          020 $  0 010 = 17');
    builder.addCardString('F012E070          020 $  0 010 = 70     COMPARE');
    builder.addCardString('F012E080     *  2 --- ---- --- ----');
    builder.addCardString('F012E090     *  3 020 H 22 050 Q  3');
    builder.addCardString('F012E100     *  4 020 Q  7 002 *  1');
    builder.addCardString('F012E110     *  9 010 ----');
    builder.addCardString('F012E120     * 91 071    4 001 *  4     FOR MAX');
    builder.addCardString('F012E130     * 92 071    6 001 *  4     FOR MIN');

    builder.addCardString('F011E000+    F 11 004 * 91 010 $  0     MAX');

    builder.addCardString('F012E000     F 12 004 * 92 010 $  0,    MIN');

    builder.addCardString('G000E000+    G  0 010 *  6 010 *  0     SET (014=SHORT FORM)');
    builder.addCardString('G000E010     *  0 020 J 12 050 P  2     INITIALIZE');
    builder.addCardString('G000E020          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G000E030          020 $  0 010 * 80     LOCAL ROUTINE (GIVES 86 IN IND. SHORT');
    builder.addCardString('G000E040          020 P  1 001 * 10');
    builder.addCardString('G000E050          124 K 19 010 *  7');
    builder.addCardString('G000E060     *  6 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G000E070          020 $  0 010 * 80     LOCAL ROUTINE (COMMON TO G001)');
    builder.addCardString('G000E080          020 P  1 124 K 19');
    builder.addCardString('G000E090     *  7 025 K 19 001 E  6     ERROR IF NOT TERMINAL');
    builder.addCardString('G000E100     * 10 020 * 90 050 H 27     SET LETTER');
    builder.addCardString('G000E110          020 * 91 050 H 28     SET INDEX 1');
    builder.addCardString('G000E120          020 * 92 050 H 29     SET INDEX 2');
    builder.addCardString('G000E130          020 Q  3 050 H 30     SET VALUE');
    builder.addCardString('G000E140          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G000E150          020 $  0 010 = 73     ASSIGN VALUE');
    builder.addCardString('G000E160          010 X  5              EXIT TO X5 ADVANCE (NO COMMA HERE)');

    builder.addCardString('G001E000+    G  1 010 $  0              DO (SAME CONTEXT AS \'SET\')');
    builder.addCardString('G001E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G001E020          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G001E030          025 W  7 050 * 90     SAVE DIFFERENCE IN *90');
    builder.addCardString('G001E040          023 * 90 002 *  1     JUMP IF \'PART\'');
    builder.addCardString('G001E045          020 H 19 025 W  9');
    builder.addCardString('G001E050          050 T  0 023 T  0');
    builder.addCardString('G001E055          002 *  1 010 E  6     JUMP IF \'STEP\' ELSE MALFORMED');
    builder.addCardString('G001E060     *  1 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G001E061          020 $  0 010 = 21     EVALUATE PART OR STEP NUMBER');
    builder.addCardString('G001E062          020 P  1 124 K 19');
    builder.addCardString('G001E063          025 K 19 002 * 25     JUMP IF TERMINAL');
    builder.addCardString('G001E064          020 $  0 010 = 79     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G001E065          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('G001E066          025 W  2 050 T  0');
    builder.addCardString('G001E067          023 T  0 001 E  6     MALFORMED IF NOT \'FOR\'');
    builder.addCardString('G001E068          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('G001E069          020 P  1 124 K 19');
    builder.addCardString('G001E070          025 K 19 002 E  6     ERROR IF TERMINAL');
    builder.addCardString('G001E071     * 25 023 * 90 001 *  4     JUMP IF \'STEP\'');
    builder.addCardString('G001E072          020 $  0 010 = 44     VALIDATE');
    builder.addCardString('G001E075          020 Q  3 050 P 20     SET PART');
    builder.addCardString('G001E080          020 $  0 010 = 50     FIND PART');
    builder.addCardString('G001E085          001 E 17 052 *  2     ERROR IF CAN\'T');
    builder.addCardString('G001E090          024 K  2 052 *  3');
    builder.addCardString('G001E095     *  2 020 ---- 050 P 16');
    builder.addCardString('G001E100     *  3 020 ---- 050 P 21');
    builder.addCardString('G001E105          010 *  5');
    builder.addCardString('G001E120     *  4 020 $  0 010 = 45     VALIDATE');
    builder.addCardString('G001E125          020 Q  3 050 P 21     SET STEP');
    builder.addCardString('G001E130          020 K 21 050 Q 14     SET STEP FLAG IN Q14');
    builder.addCardString('G001E135          020 K  4 050 P 20     MARK P20 MINUS AS FLAG ALOS');
    builder.addCardString('G001E140          020 $  0 010 = 51     FIND STEP');
    builder.addCardString('G001E145          001 E 16 050 P 16     ERROR IF CAN\'T');
    builder.addCardString('G001E150     *  5 020 $  0 010 = 13     POP Q3');
    builder.addCardString('G001E155          023 * 91 002 * 13     JUMP IF \'FOR\'');
    builder.addCardString('G001E155          020 P  1 124 K 19');
    builder.addCardString('G001E160          025 K 19 001 * 13     JUMP IF NOT TERMINAL');
    builder.addCardString('G001E165     * 12 020 Q 12 001 *  8     JUMP IF NO SUSPENDED TASK');
    builder.addCardString('G001E170          050 Q  8 020 K  4     CANCEL SUSPENDED TASK');
    builder.addCardString('G001E171          050 Q 12 050 Q 13');
    builder.addCardString('G001E172     * 11 020 $  0 010 = 76');
    builder.addCardString('G001E173          020 Q  8 002 * 11');
    builder.addCardString('G001E175     *  8 020 $  0 010 = 18     PUSH Q9');
    builder.addCardString('G001E180          020 P 21 050 Q  9     SET Q9 TO FIRST STEP');
    builder.addCardString('G001E185          020 Q 14 053 Q  8     BRING ALONG ANY STRUCTURE');
    builder.addCardString('G001E190          120    0 050 Q 14     RELIEVE Q14 OF RESPONSIBILITY');
    builder.addCardString('G001E195          020 K  4 050 P 17     RESET FLAGS');
    builder.addCardString('G001E200          050 P 23 010 X  6     AND FETCH');
    builder.addCardString('G001E240     * 13 020 $  0 010 * 80     LOCAL ROUTINE COMMON TO \'SET\'');
    builder.addCardString('G001E245          020 Q  3 050 H 30     SAVE FIRST VALUE FOR USE IN *40');
    builder.addCardString('G001E246          020 P  1 124 K 19');
    builder.addCardString('G001E247          025 K 19 001 *  9     JUMP IF NOT SINGLE VALUE');
    builder.addCardString('G001E248          020 $  0 010 = 13     POP Q3');

    builder.addCardString('G001E249          010 * 41              JUMP');
    builder.addCardString('G001E250     *  9 020 $  0 010 = 10');
    builder.addCardString('G001E260          056 * 14 071   21');
    builder.addCardString('G001E270          052 Q 14 052 * 93');
    builder.addCardString('G001E280     * 14 120    0 050 ----     CLEAR TOP OF \'PART\' ELEMENT');
    builder.addCardString('G001E290          020 * 93 024 K  2');
    builder.addCardString('G001E300          052 * 15 020 P 20');
    builder.addCardString('G001E310     * 15 050 ---- 020 * 93     STORE PART NO. IN STRUCTURE');
    builder.addCardString('G001E320          052 * 16 010 $  1');
    builder.addCardString('G001E330          020 $  0 010 = 10');
    builder.addCardString('G001E340          056 * 17 071   21');
    builder.addCardString('G001E350     * 16 052 ---- 052 * 93');
    builder.addCardString('G001E360     * 17 120    0 050 ----     CLEAR TOP OF \'VARIABLE\' ELEMENT');
    builder.addCardString('G001E370          020 * 93 024 K  2');
    builder.addCardString('G001E380          052 * 18 020 * 90');
    builder.addCardString('G001E390     * 18 050 ---- 010 $  1     STORE VARIABLE');
    builder.addCardString('G001E400          020 * 91 001 * 30     JUMP IF SCALAR');
    builder.addCardString('G001E410          020 $  0 010 = 10');
    builder.addCardString('G001E420          056 * 93 056 * 19');
    builder.addCardString('G001E430          024 K  1 056 * 20');
    builder.addCardString('G001E440     * 19 120    0 050 ----     CLEAR TOP OF INDEX ELEMENT');
    builder.addCardString('G001E450     * 20 020 * 91 050 ----     STORE INDEX');
    builder.addCardString('G001E460          020 * 93 052 * 21');
    builder.addCardString('G001E470     * 21 056 ---- 010 $  1     TIE INTO STRUCTURE');
    builder.addCardString('G001E480          020 * 92 001 * 30     JUMP IF NOT DOUBLY INDEXED');
    builder.addCardString('G001E490          020 $  0 010 = 10');
    builder.addCardString('G001E500          056 T  0 056 * 22');
    builder.addCardString('G001E505          024 K  1 056 * 23');
    builder.addCardString('G001E510     * 22 120    0 050 ----     CLEAR TOP OF INDEX ELEMENT');
    builder.addCardString('G001E515     * 23 020 * 92 050 ----     STORE INDEX');
    builder.addCardString('G001E520          020 * 93 056 * 24');
    builder.addCardString('G001E525     * 24 020 T  0 056 ----     TIE INTO STRUCTURE');
    builder.addCardString('G001E530     * 30 020 * 93 052 * 31     SET UP VALUE ELEMENT');
    builder.addCardString('G001E535          020 $  0 010 = 10');
    builder.addCardString('G001E540          056 * 93 056 * 32');
    builder.addCardString('G001E545          024 K  1 056 * 33');
    builder.addCardString('G001E550          025 K  1 071   21');
    builder.addCardString('G001E555     * 31 052 ---- 052 * 93');
    builder.addCardString('G001E560     * 32 120    0 050 ----     CLEAR TOP OF VALUE ELEMENT');
    builder.addCardString('G001E565     * 33 020 Q  3 050 ----     STORE VALUE');
    builder.addCardString('G001E570          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G001E575     * 34 020 P  1 124 A 59');
    builder.addCardString('G001E580          025 A 59 001 * 40     JUMP IF NOT COMMA');
    builder.addCardString('G001E585          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G001E590          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G001E595          010 * 30');
    builder.addCardString('G001E600     * 40 020 P  1 124 K 19');
    builder.addCardString('G001E605          025 K 19 001 * 50     JUMP IF NOT TERMINAL');
    builder.addCardString('G001E610     * 41 020 * 90 050 H 27');
    builder.addCardString('G001E615          020 * 91 050 H 28');
    builder.addCardString('G001E620          020 * 92 050 H 29');
    builder.addCardString('G001E640          020 $  0 010 = 73     ASSIGN FIRST VALUE');
    builder.addCardString('G001E645          010 * 12');
    builder.addCardString('G001E650     * 50 020 P  1 124 A 73');
    builder.addCardString('G001E652          025 A 73 002 * 51     JUMP IF LEFT PARENTHESIS');

    builder.addCardString('G001E654          020 P  1 124 A123');
    builder.addCardString('G001E656          025 A123 001 E  6     ERROR IF NEITHER LEFT PAREN OR BRACKE');
    builder.addCardString('G001E660     * 51 020 $  0 010 = 14     PUSH Q4-Q5');
    builder.addCardString('G001E665          020 P  1 050 Q  5     SAVE LEFT GROUPER AS OPERATOR');
    builder.addCardString('G001E667          020 $  0 010 =  2');
    builder.addCardString('G001E670          020 $  0 010 = 21     EVALUATE INCREMENT EXPRESSION');
    builder.addCardString('G001E675          020 $  0 010 = 77     MATCH GROUPERS');
    builder.addCardString('G001E680          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G001E685          020 $  0 010 = 21     EVALUATE TERMINAL EXPRESSION');
    builder.addCardString('G001E690          020 Q  3 050 H 22     MOVE TERMINAL EXPRESSION');
    builder.addCardString('G001E695          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G001E700          020 Q  3 050 H 23     MOVE INCREMENT');
    builder.addCardString('G001E705          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G001E710          020 * 93 024 K  1');
    builder.addCardString('G001E715          071   21 052 * 59');
    builder.addCardString('G001E720     * 59 020 ---- 050 H 21     COPY INITIAL VALUE');
    builder.addCardString('G001E730          020 $  0 010 = 70     COMPARE INITIAL AND TERMINAL VALUES');
    builder.addCardString('G001E735          050 T  0 124 K 25');
    builder.addCardString('G001E740          025 K 25 002 * 34     JUMP BACK IF LIMITS EQUAL');
    builder.addCardString('G001E745          023 J 23 002 E 28     ERROR IF INCREMENT EQUALS ZERO');
    builder.addCardString('G001E750          020 T  0 070    3     NOW TEST EXCLUSIVE-OR OF LESS SIGNAL');
    builder.addCardString('G001E755          024 H 23 124 K 12       WITH SIGN OF INCREMENT');
    builder.addCardString('G001E760          025 K 12 001 E 28     ERROR IF INCREMENT INCOMPATIBLE');
    builder.addCardString('G001E765     * 52 020 * 93 056 * 53     (SPACE OK TO ADD STRUCTURE)');
    builder.addCardString('G001E770     * 53 020 Q  0 056 ----');
    builder.addCardString('G001E775          056 * 54 024 K  1');
    builder.addCardString('G001E780     * 54 056 * 57 020 ----');
    builder.addCardString('G001E785          056 * 55 056 * 56');
    builder.addCardString('G001E790          056 * 93 024 K  1');
    builder.addCardString('G001E795     * 55 056 * 58 004 ----     SAVE LINK TO AVAILABLE SPACE');
    builder.addCardString('G001E800     * 56 120    0 050 ----     CLEAR TOP OF TERMINAL ELEMENT');
    builder.addCardString('G001E805     * 57 020 H 23 050 ----     SET INCREMENT');
    builder.addCardString('G001E810     * 58 020 H 22 050 ----     SET TERMINAL VALUE');
    builder.addCardString('G001E815          060 Q  0 010 * 34     SET Q0 AND LOOP');
    builder.addCardString('G001E820     * 80 024 K  2 052 * 89     LOCAL ROUTINE COMMON TO \'SET\' AND \'DO');
    builder.addCardString('G001E830          020 P  1 050 * 90     STORE CHARACTER');
    builder.addCardString('G001E835          124 K 34 025 K 34');
    builder.addCardString('G001E840          001 E  6 020 K  4     ERROR IF NOT LETTER');
    builder.addCardString('G001E845          050 * 91 050 * 92     SET INDEX FLAGS');
    builder.addCardString('G001E850          020 $  0 010 =  1     ADVANCE ONE');
    builder.addCardString('G001E855          124 K 31 025 K 31');
    builder.addCardString('G001E860          001 * 82 010 $  1     JUMP IF NOT LEFT GROUPER');
    builder.addCardString('G001E865          020 $  0 010 = 26     EVALUATE GROUPED LIST');
    builder.addCardString('G001E870          020 Q  6 001 * 83     JUMP IF Q7 EMPTY');
    builder.addCardString('G001E872          020 Q  7 050 * 92     STORE 2ND INDEX');
    builder.addCardString('G001E874          020 $  0 010 = 17     POP Q7');
    builder.addCardString('G001E876          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES');
    builder.addCardString('G001E878     * 83 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX');
    builder.addCardString('G001E880          020 Q  3 050 * 91     STORE CONVERTED INDEX LOCALLY');
    builder.addCardString('G001E885          020 * 92 001 * 81     JUMP IF SINGLY INDEX');
    builder.addCardString('G001E890          050 Q  3 010 $  1');
    builder.addCardString('G001E895          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX');
    builder.addCardString('G001E900          020 Q  3 050 * 92     STORE CONVERTED INDEX LOCALLY');
    builder.addCardString('G001E910     * 81 020 $  0 010 = 13     POP Q3');
    builder.addCardString('G001E915     * 82 020 $  0 010 =  3     ELIMINATE SPACES');

    builder.addCardString('G001E920          124 A 43 025 A 43');
    builder.addCardString('G001E925          002 $  1 010 E  6     MALFORMED IF NOT \'=\'');
    builder.addCardString('G001E930          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('G001E935          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G001E940     * 89 010 ----              EXIT *80 ROUTINE');
    builder.addCardString('G001E945     * 90                       LETTER');
    builder.addCardString('G001E950     * 91                       INDEX');
    builder.addCardString('G001E955     * 92                       INDEX');
    builder.addCardString('G001E960     * 93     ----     ----,');

    builder.addCardString('G002E000+    G  2 010 $  0              TO');
    builder.addCardString('G002E010          020 Q  8 001 E 10     ERROR IF DIRECT');
    builder.addCardString('G002E015          071    1 001 X  7     JUMP TO ASCEND IF \'DO STEP\'');
    builder.addCardString('G002E020          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE');
    builder.addCardString('G002E030          020 $  0 010 = 27     PICK UP WORD');
    builder.addCardString('G002E040          025 W  9 050 T  0');
    builder.addCardString('G002E050          023 T  0 001 *  1     JUMP IF NOT \'STEP\'');
    builder.addCardString('G002E060          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE');
    builder.addCardString('G002E070          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G002E080          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G002E081          025 K 19 001 E  6');
    builder.addCardString('G002E085          020 $  0 010 = 45     VALIDATE');
    builder.addCardString('G002E090          020 Q  3 050 P 21     SET CONTEXT');
    builder.addCardString('G002E100          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G002E110          020 $  0 010 = 51     FIND STEP');
    builder.addCardString('G002E120          001 E 16 050 P 16     ERROR IF CAN\'T ELSE SET P16');
    builder.addCardString('G002E125          020 P 21 014 *  4');
    builder.addCardString('G002E140     *  1 020 H 19 025 W  7');
    builder.addCardString('G002E150          050 T  0 023 T  0');
    builder.addCardString('G002E160          002 *  2 010 E  6     ERROR IF NOT PART');
    builder.addCardString('G002E170     *  2 020 $  0 010 = 39     VERIFY SPACE AND ADVANCE');
    builder.addCardString('G002E180          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('G002E190          020 P  1 124 K 19     VERIFY TERMINAL');
    builder.addCardString('G002E191          025 K 19 001 E  6');
    builder.addCardString('G002E195          020 $  0 010 = 44     VALIDATE');
    builder.addCardString('G002E200          020 Q  3 050 P 20     SET CONTEXT');
    builder.addCardString('G002E210          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G002E220          020 $  0 010 = 50     FIND PART');
    builder.addCardString('G002E230          001 E 17 052 *  3     ERROR IF CAN\'T');
    builder.addCardString('G002E235          024 K  2 052 *  4');
    builder.addCardString('G002E240     *  3 020 ---- 050 P 16     ELSE SET P16 FOR FIRST STEP');
    builder.addCardString('G002E245     *  4 020 ---- 050 Q  9     SET Q9');
    builder.addCardString('G002E250          010 X  6         ,    JUMP TO FETCH');

    builder.addCardString('G003E000+    G  3 010 $  0              DONE');
    builder.addCardString('G003E010          020 $  0 010 = 38     SIMPLE-INDIRECT TEST');
    builder.addCardString('G003E020          010 X  7         ,    JUMP TO ASCEND');

    builder.addCardString('G007E000+    G  7 010 $  0              LINE');
    builder.addCardString('G007E010          020 $  0 010 =  3');
    builder.addCardString('G007E020          124 K 19 025 K 19');
    builder.addCardString('G007E030          001 E  6 020 A 42     SET UP CR+EOM');
    builder.addCardString('G007E040          050 S  1 010 X 14,    TRANSMIT AND TO X5 VIA X14.');

    builder.addCardString('G008E000+    G  8 010 $  0              PAGE');
    builder.addCardString('G008E010          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('G008E020          071   31 002 E  6     ERROR IF NOT TERMINAL');
    builder.addCardString('G008E030          020 $  0 010 = 22     CALL FOR NEW PAGE');
    builder.addCardString('G008E040          010 X  5         ,');

    builder.addCardString('G009E000+    G  9 010 E  5');

    builder.addCardString('G010E000+    G 10 010 E  6');

    builder.addCardString('G011E000+    G 11 010 $  0              FORM');
    builder.addCardString('G011E010          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE');
    builder.addCardString('G011E012          020 Q  9 002 E  9     ERROR IF INDIRECT');
    builder.addCardString('G011E015          020 P 10 002 E  6     ERROR IF CONDITION ATTACHED');
    builder.addCardString('G011E020          020 $  0 010 = 21     EVALUATE FORM NUMBER');
    builder.addCardString('G011E030          020 $  0 010 = 46     VALIDATE');
    builder.addCardString('G011E040          020 Q  3 050 P 22     SET CONTEXT');
    builder.addCardString('G011E050          020 $  0 010 = 13     POP Q3');
    builder.addCardString('G011E060          020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('G011E070          124 A 80 025 A 80');
    builder.addCardString('G011E080          002 *  1 010 E  6     MALFORMED IF NOT COLON');
    builder.addCardString('G011E090     *  1 020 $  0 010 =  1     STEP ONE CHARACTER');
    builder.addCardString('G011E100          001 *  2 010 E  6     MALFORMED IF NOT TERMINAL MINUS');
    builder.addCardString('G011E110     *  2 020 I  1 050 P 13     SET SUBSTATE FOR FORM');
    builder.addCardString('G011E120          020 $  0 010 = 55     SWITCH TO USER');
    builder.addCardString('G011E130          020 $  0 010 = 53     KICK OUT PROGRAM');
    builder.addCardString('G011E140          010 X  1         ,    JUMP TO Q SERVICE');

    builder.addCardString('H---E000+    H  0                       LAST 16 BIT CLOCK READING');
    builder.addCardString('H---E001     H  1                       TIME OF DAY (IN CLOCK COUNTS)');
    builder.addCardString('H---E002     H  2                       DATE');
    builder.addCardString('H---E003     H  3                       DATE (CONTINUED)');
    builder.addCardString('H---E004     H  4 100 0000 000 0000     STN DUE FOR Q MSG');
    builder.addCardString('H---E005     H  5                 0     TIME TO LOG');
    builder.addCardString('H---E006     H  6                 0     TIME TO R0');
    builder.addCardString('H---E007     H  7     ----     ----     STN IN CORE');
    builder.addCardString('H---E008     H  8                       START TIME OF CURRENT SHOT');
    builder.addCardString('H---E009     H  9                       SCR CONTENTS');
    builder.addCardString('H---E010     H 10        0        0     NEXT AVAILABLE BUFFER');
    builder.addCardString('H---E011     H 11        0 000    0     NEXT AVAILABLE DRUM SLOT');
    builder.addCardString('H---E012     H 12     ----     ----     STN');
    builder.addCardString('H---E013     H 13     ----     ----     BUFFER');
    builder.addCardString('H---E014     H 14     ----     ----     DRUM');
    builder.addCardString('H---E015     H 15 100 0000 000 0000     += \'OF\' DELAYED A/C READING');
    builder.addCardString('H---E016     H 16 100 0000 000 0000     += \'OF\' DELAYED A/C PUNCHING');
    builder.addCardString('H---E017     H 17 100 0000 000 0000     CURRENT DRUM ROUTINE CONTROL WORD');
    builder.addCardString('H---E018     H 18                       TEMP FOR =21, =27.');
    builder.addCardString('H---E019     H 19                       ACCUMULATED CHARACTERS RESULT OF =27');
    builder.addCardString('H---E020     H 20                       INTEGER FOR OUTPUT');
    builder.addCardString('H---E021     H 21                       SEARCH POINTER');
    builder.addCardString('H---E022     H 22                       SEARCH POINTER');
    builder.addCardString('H---E023     H 23                       SEARCH POINTER');
    builder.addCardString('H---E024     H 24                       SEARCH POINTER');
    builder.addCardString('H---E025     H 25                       SEARCH POINTER');
    builder.addCardString('H---E026     H 26                       SEARCH POINTER');
    builder.addCardString('H---E027     H 27                       LETTER');
    builder.addCardString('H---E028     H 28                       FIRST INDEX');
    builder.addCardString('H---E029     H 29                       SECOND INDEX');
    builder.addCardString('H---E030     H 30                       VALUE');
    builder.addCardString('H---E031     H 31 000,0100,012,1037     DRUM WORD FOR ERROR MSG INDEX');

    builder.addCardString('I---E000+    I  0                 0     SMALL INTEGERS');
    builder.addCardString('I---E001     I  1                 1');
    builder.addCardString('I---E002     I  2                 2');
    builder.addCardString('I---E003     I  3                 3');
    builder.addCardString('I---E004     I  4                 4');
    builder.addCardString('I---E005     I  5                 5');
    builder.addCardString('I---E006     I  6                 6');
    builder.addCardString('I---E007     I  7                 7');
    builder.addCardString('I---E008     I  8                 8');
    builder.addCardString('I---E009     I  9                 9');

    builder.addCardString('J---E000+    J  0                60     MINUTES PER HOUR');
    builder.addCardString('J---E001     J  1              1800     COUNTS PER MINUTE');
    builder.addCardString('J---E002     J  2                55     LINE NUMBER FOR EJECT');
    builder.addCardString('J---E003     J  3                15     PREFERRED PROCESSING PERIOD');
    builder.addCardString('J---E004     J  4                30     SHOT TIME FOR PROCESSING');
    builder.addCardString('J---E005     J  5               120     SHOT TIME FOR READING');
    builder.addCardString('J---E006     J  6               120     SHOT TIME FOR PUNCHING');
    builder.addCardString('J---E007     J  7               450     OVERDUE TIME FOR PROCESSING');
    builder.addCardString('J---E008     J  8               300     OVERDUE TIME FOR READING');
    builder.addCardString('J---E009     J  9               300     OVERDUE TIME FOR PUNCHING');
    builder.addCardString('J---E010     J 10     Q 11     Q 10');
    builder.addCardString('J---E011     J 11     N  0     N  0');
    builder.addCardString('J---E012     J 12     R  0     R  0');
    builder.addCardString('J---E013     J 13     A  0     A  0');
    builder.addCardString('J---E014     J 14     N  8     N  8');
    builder.addCardString('J---E015     J 15');
    builder.addCardString('J---E016     J 16                 4     CHOKE NUMBER');
    builder.addCardString('J---E017     J 17                 1     UNCHOKE NUMBER');
    builder.addCardString('J---E018     J 18+           9    8     CONSTANT');
    builder.addCardString('J---E019     J 19');
    builder.addCardString('J---E020     J 20                       COMMUNICATION CELL =77 TO DO AND G14');
    builder.addCardString('J---E021     J 21              ----     NUMBER OF INPUTS');
    builder.addCardString('J---E022     J 22              ----     NUMBER OF OUTPUTS');
    builder.addCardString('J---E023     J 23              ----     TIME WORKED');

    builder.addCardString('K---E000+    K  0 000,0000,000,0000     ZERO   (GENERAL CONSTANTS)');
    builder.addCardString('K---E001     K  1 000,0000,000,0001     ADDRESS MODIFIER');
    builder.addCardString('K---E002     K  2 000,0001,000,0000     ADDRESS MODIFIER');
    builder.addCardString('K---E003     K  3 000,0001,000,0001     ADDRESS MODIFIER');
    builder.addCardString('K---E004     K  4 100,0000,000,0000     SIGN BIT');
    builder.addCardString('K---E005     K  5 000,0000,000,7777     EXTRACTOR RIGHT ADDRESS');
    builder.addCardString('K---E006     K  6 000,7777,000,0000     EXTRACTOR LEFT ADDRESS');
    builder.addCardString('K---E007     K  7 000,7777,000,7777     EXTRACTOR BOTH ADDRESSES');
    builder.addCardString('K---E008     K  8 000,0000,177,0000     MASK INPUT MESSAGES');
    builder.addCardString('K---E009     K  9 000,0000,020,0000     COUNTER FOR EXTENDED CLOCK');
    builder.addCardString('K---E010     K 10 000,0000,033,0000     MASK FOR DRUM SECTION CODE');
    builder.addCardString('K---E011     K 11 077,6000,000,0000     EXTRACTOR SFX');
    builder.addCardString('K---E012     K 12 000,1000,000,0000     EXTRACTOR SIGN(CF)');
    builder.addCardString('K---E013     K 13 000,0777,777,7777     EXTRACTOR MAG(CF)');
    builder.addCardString('K---E014     K 14 000,2000,000,0000     UNIT FOR SFX (AND TEST IN =27)');
    builder.addCardString('K---E015     K 15 177,7777,777,7777     ALL ONES');
    builder.addCardString('K---E016     K 16 000,0017,000,0000     BUFFER MASK');
    builder.addCardString('K---E017     K 17 000,0000,000,0177     CHARACTER CODE MASK AND STN MASK.');
    builder.addCardString('K---E018     K 18 000,0017,000,0177     BUFFER + STN MASK');
    builder.addCardString('K---E019     K 19 000,0000,000,0400     BIT OF DISTINCTION');
    builder.addCardString('K---E020     K 20 000,0000,000,0017     EXTRACTOR NUMERIC CODE');
    builder.addCardString('K---E021     K 21 040,0000,000,0000     EN BIT');
    builder.addCardString('K---E022     K 22 020,0000,000,0000     DS BIT');
    builder.addCardString('K---E023     K 23 010,0000,000,0000     RO BIT');
    builder.addCardString('K---E024     K 24 004,0000,000,0000     TL BIT OR GREATER');
    builder.addCardString('K---E025     K 25 002,0000,000,0000     CL BIT OR EQUAL OR MATRIX');
    builder.addCardString('K---E026     K 26 001,0000,000,0000     SU BIT OR LESS OR VECTOR');
    builder.addCardString('K---E027     K 27 000,0000,400,0000     *      OR FUNCTION OR SUBSCRIPT');
    builder.addCardString('K---E028     K 28 000,0000,200,0000     MPY, /');
    builder.addCardString('K---E029     K 29 000,0000,100,0000     ON BIT OR +, -');
    builder.addCardString('K---E030     K 30 000,0000,040,0000     OF BIT OR ARITH OPERATOR');
    builder.addCardString('K---E031     K 31 000,0000,020,0000     TC BIT OR LEFT GROUPER');
    builder.addCardString('K---E032     K 32 000,0000,010,0000     RI BIT OR RIGHT GROUPER');
    builder.addCardString('K---E033     K 33 000,0000,004,0000     RC BIT OR RELATION');
    builder.addCardString('K---E034     K 34 000,0000,002,0000     EJ BIT OR LETTER');
    builder.addCardString('K---E035     K 35 000,0000,001,0000     TO BIT OR DIGIT');
    builder.addCardString('K---E036     K 36 003,0000,000,0000     CL+SU OR CONSTANT');
    builder.addCardString('K---E037     K 37 000,0000,700,0000     PRECEDENCE BITS');
    builder.addCardString('K---E038     K 38 102,0000,000,0000     MATRIX HEAD');
    builder.addCardString('K---E039     K 39 101,0000,000,0000     VECTOR HEAD');
    builder.addCardString('K---E040     K 40 000,0000,177,0000     MAJOR CYCLE MSGS');
    builder.addCardString('K---E041     K 41 000,0000,177,0000     MINOR CYCLE MSGS');
    builder.addCardString('K---E042     K 42 000,0000,177,0000     MASK FOR INDEX');
    builder.addCardString('K---E043     K 43        3        3');

    builder.addCardString('L---E000+    L  0        0        0     Q FOR ENABLE');
    builder.addCardString('L---E001     L  1 100 0000 000 0000     L ENABLED AND IDLE');
    builder.addCardString('L---E002     L  2 100 0000 000 0000     Q FOR CARD READER');
    builder.addCardString('L---E003     L  3 100 0000 000 0000     S WAITING FOR READER-READY SIGNAL');
    builder.addCardString('L---E004     L  4 100 0000 000 0000     S READING CARDS');
    builder.addCardString('L---E005     L  5 100 0000 000 0000     Q FOR DRUM ASSIGNMENTS');
    builder.addCardString('L---E006     L  6 100 0000 000 0000     L DRAINING BUFFERS BEFORE CL+SU');
    builder.addCardString('L---E007     L  7 100 0000 000 0000     Q FOR INPUT BUFFER AND CL+SU');
    builder.addCardString('L---E008     L  8 100 0000 000 0000     Q FOR CARD PUNCH');
    builder.addCardString('L---E009     L  9 100 0000 000 0000     S PUNCHING CARDS');
    builder.addCardString('L---E010     L 10 100 0000 000 0000     L GREEN (P13 HOLDS SUBSTATE)');
    builder.addCardString('L---E011     L 11 100 0000 000 0000     Q FOR BUFFER AND PREFERRED PROCESSING');
    builder.addCardString('L---E012     L 12 100 0000 000 0000     Q FOR PROCESSING');
    builder.addCardString('L---E013     L 13 100 0000 000 0000     S PROCESSING');
    builder.addCardString('L---E014     L 14 100 0000 000 0000     L CHOKED');
    builder.addCardString('L---E015     L 15 100 0000 000 0000');

    builder.addCardString('N---E000+    N  0+           1   39     POWERS OF TEN.');
    builder.addCardString('N---E001     N  1+          10   39');
    builder.addCardString('N---E002     N  2+         100   39');
    builder.addCardString('N---E003     N  3+        1000   39');
    builder.addCardString('N---E004     N  4+       10000   39');
    builder.addCardString('N---E005     N  5+      100000   39');
    builder.addCardString('N---E006     N  6+     1000000   39');
    builder.addCardString('N---E007     N  7+    10000000   39');
    builder.addCardString('N---E008     N  8+   100000000   39');
    builder.addCardString('N---E009     N  9+  1000000000   39');
    builder.addCardString('N---E010     N 10+ 10000000000   39');
    builder.addCardString('N---E011     N 11+100000000000   39');

    builder.addCardString('P---E000+    P  0                --     LINE NUMBER ON TYPEWRITER PAGE');
    builder.addCardString('P---E001     P  1 --- ---- --- ----     PRESENT CHARACTER WORD IN R');
    builder.addCardString('P---E002     P  2     ----     ----     ADDRESS OF PRESENT CHARACTER WORD IN');
    builder.addCardString('P---E003     P  3              ----     LOCN FOR PACKING OR UNPACKING');
    builder.addCardString('P---E004     P  4                       SFX   (EXTENDED TO SIGN POSITION)');
    builder.addCardString('P---E005     P  5                       SIGN   (EXTRACTED)');
    builder.addCardString('P---E006     P  6                       CF   (MAGNITUDE)');
    builder.addCardString('P---E007     P  7                       SFX   (EXTENDED TO SIGN POSITION)');
    builder.addCardString('P---E008     P  8                       SIGN   (EXTRACTED)');
    builder.addCardString('P---E009     P  9                       CF   (MAGNITUDE)');
    builder.addCardString('P---E010     P 10     ----     ----     LOCN OF SPACE AFTER \'IF\', ELSE -1.');
    builder.addCardString('P---E011     P 11 --- ---- --- ----     PRESENT CHARACTER WORD IN S');
    builder.addCardString('P---E012     P 12     ----     ----     ADDRESS OF PRESENT CHARACTER WORD INS');
    builder.addCardString('P---E013     P 13                 2     SUB(L10)=0 INST, 1 FORM, 2 INIT, 3 DE');
    builder.addCardString('P---E014     P 14 010 ----              LINK FROM =25 (OUTPUT LINE)');
    builder.addCardString('P---E015     P 15 100 0000 000 0000     + = RI WHILE L11 OR L14');
    builder.addCardString('P---E016     P 16 100 0000 000 0000     + = LOCN OF CURRENT STEP IN RT ADDR');
    builder.addCardString('P---E017     P 17 100 0000 000 0000     + = STOPPED (USED BY G13 \'GO\')');
    builder.addCardString('P---E018     P 18                       WORKING STORE');
    builder.addCardString('P---E019     P 19                       WORKING STORE');
    builder.addCardString('P---E020     P 20                       CONTEXT CELL FOR PART ETC.');
    builder.addCardString('P---E021     P 21                       CONTEXT CELL FOR PART ETC.');
    builder.addCardString('P---E022     P 22                       CONTEXT CELL FOR PART ETC.');
    builder.addCardString('P---E023     P 23 100 0000 000 0000     + = PROBLEM IN X7');
    builder.addCardString('P---E024     P 24 000 ---- --- ----     DRUM ROUTINE CONTROL WORD FOR =78');
    builder.addCardString('P---E025     P 25 010 ----              LINK FROM =78 (TRANSMIT LINE)');
    builder.addCardString('P---E026     P 26 010 ----              LINK FOR TYPE ROUTINES');
    builder.addCardString('P---E027     P 27                       WORKING STORE');
    builder.addCardString('P---E028     P 28                       WORKING STORE');
    builder.addCardString('P---E029     P 29                       WORKING STORE');
    builder.addCardString('P---E030     P 30                       WORKING STORE');
    builder.addCardString('P---E031     P 31                       WORKING STORE');

    builder.addCardString('Q---E000+    Q  0              ----     AVAILABLE SPACE PDL LINK');
    builder.addCardString('Q---E001     Q  1              ----     SPARE TANK PDL LINK');
    builder.addCardString('Q---E002     Q  2 100 0000 000 0000     OPERAND PDL LINK');
    builder.addCardString('Q---E003     Q  3 100 0000 000 0000     OPERAND');
    builder.addCardString('Q---E004     Q  4 100 0000 000 0000     OPERATOR PDL LINK');
    builder.addCardString('Q---E005     Q  5 100 0000 000 0000     OPERATOR');
    builder.addCardString('Q---E006     Q  6 100 0000 000 0000     AUXILIARY PDL LINK');
    builder.addCardString('Q---E007     Q  7 100 0000 000 0000     AUXILIARY ITEM');
    builder.addCardString('Q---E008     Q  8 100 0000 000 0000     CONTROL PDL LINK');
    builder.addCardString('Q---E009     Q  9 100 0000 000 0000     CONTROL (STEP NUMBER)');
    builder.addCardString('Q---E010     Q 10 000 0000 000 0000     LIST OF STEPS (AND PARTS)');
    builder.addCardString('Q---E011     Q 11 000 0000 000 0000     LIST OF FORMS');
    builder.addCardString('Q---E012     Q 12 100 0000 000 0000     HIDEOUT FOR (Q8)');
    builder.addCardString('Q---E013     Q 13 100 0000 000 0000     HIDEOUT FOR (Q9)');
    builder.addCardString('Q---E014     Q 13 000 ---- 000 0000     TEMPORARY LIST STRUCTURE');
    builder.addCardString('Q---E015     Q 15 000 0000 000 ----     TEMPORARY LINEAR LIST');

    builder.addCardString('R---E000+    R  0 100 0000 000 0000     INPUT AND INTERPRETATION BLOCK');
    builder.addCardString('R---E001     R  1');
    builder.addCardString('R---E002     R  2');
    builder.addCardString('R---E003     R  3');
    builder.addCardString('R---E004     R  4');
    builder.addCardString('R---E005     R  5');
    builder.addCardString('R---E006     R  6');
    builder.addCardString('R---E007     R  7');
    builder.addCardString('R---E008     R  8');
    builder.addCardString('R---E009     R  9');
    builder.addCardString('R---E010     R 10');
    builder.addCardString('R---E011     R 11');
    builder.addCardString('R---E012     R 12');
    builder.addCardString('R---E013     R 13');
    builder.addCardString('R---E014     R 14');
    builder.addCardString('R---E015     R 15');
    builder.addCardString('R---E016     R 16');
    builder.addCardString('R---E017     R 17');
    builder.addCardString('R---E018     R 18');
    builder.addCardString('R---E019     R 19');
    builder.addCardString('R---E020     R 20');
    builder.addCardString('R---E021     R 21');
    builder.addCardString('R---E022     R 22');
    builder.addCardString('R---E023     R 23');
    builder.addCardString('R---E024     R 24');
    builder.addCardString('R---E025     R 25');
    builder.addCardString('R---E026     R 26');
    builder.addCardString('R---E027     R 27');
    builder.addCardString('R---E028     R 28');
    builder.addCardString('R---E029     R 29');
    builder.addCardString('R---E030     R 30');
    builder.addCardString('R---E031     R 31');
    builder.addCardString('R---E032     R 32');
    builder.addCardString('R---E033     R 33');
    builder.addCardString('R---E034     R 34');
    builder.addCardString('R---E035     R 35');
    builder.addCardString('R---E036     R 36');
    builder.addCardString('R---E037     R 37');
    builder.addCardString('R---E038     R 38');
    builder.addCardString('R---E039     R 39');
    builder.addCardString('R---E040     R 40');
    builder.addCardString('R---E041     R 41');
    builder.addCardString('R---E042     R 42');
    builder.addCardString('R---E043     R 43');
    builder.addCardString('R---E044     R 44');
    builder.addCardString('R---E045     R 45');
    builder.addCardString('R---E046     R 46');
    builder.addCardString('R---E047     R 47');
    builder.addCardString('R---E048     R 48');
    builder.addCardString('R---E049     R 49');
    builder.addCardString('R---E050     R 50');
    builder.addCardString('R---E051     R 51');
    builder.addCardString('R---E052     R 52');
    builder.addCardString('R---E053     R 53');

    builder.addCardString('R---E0054    R 54');
    builder.addCardString('R---E055     R 55');
    builder.addCardString('R---E056     R 56');
    builder.addCardString('R---E057     R 57');
    builder.addCardString('R---E058     R 58');
    builder.addCardString('R---E059     R 59');
    builder.addCardString('R---E060     R 60');
    builder.addCardString('R---E061     R 61');
    builder.addCardString('R---E062     R 62');
    builder.addCardString('R---E063     R 63');
    builder.addCardString('R---E064     R 64');
    builder.addCardString('R---E065     R 65');
    builder.addCardString('R---E066     R 66');
    builder.addCardString('R---E067     R 67');
    builder.addCardString('R---E068     R 68');
    builder.addCardString('R---E069     R 69');
    builder.addCardString('R---E070     R 70');
    builder.addCardString('R---E071     R 71');
    builder.addCardString('R---E072     R 72');
    builder.addCardString('R---E073     R 73');
    builder.addCardString('R---E074     R 74');
    builder.addCardString('R---E075     R 75');
    builder.addCardString('R---E076     R 76');
    builder.addCardString('R---E077     R 77');
    builder.addCardString('R---E078     R 78');
    builder.addCardString('R---E079     R 79');
    builder.addCardString('R---E080     R 80');
    builder.addCardString('R---E081     R 81');

    builder.addCardString('S---E000+    S  0     S  0     S  0     OUTPUT BLOCK');
    builder.addCardString('S---E001     S  1');
    builder.addCardString('S---E002     S  2');
    builder.addCardString('S---E003     S  3');
    builder.addCardString('S---E004     S  4');
    builder.addCardString('S---E005     S  5');
    builder.addCardString('S---E006     S  6');
    builder.addCardString('S---E007     S  7');
    builder.addCardString('S---E008     S  8');
    builder.addCardString('S---E009     S  9');
    builder.addCardString('S---E010     S 10');
    builder.addCardString('S---E011     S 11');
    builder.addCardString('S---E012     S 12');
    builder.addCardString('S---E013     S 13');
    builder.addCardString('S---E014     S 14');
    builder.addCardString('S---E015     S 15');
    builder.addCardString('S---E016     S 16');
    builder.addCardString('S---E017     S 17');
    builder.addCardString('S---E018     S 18');
    builder.addCardString('S---E019     S 19');
    builder.addCardString('S---E020     S 20');
    builder.addCardString('S---E021     S 21');
    builder.addCardString('S---E022     S 22');
    builder.addCardString('S---E023     S 23');
    builder.addCardString('S---E024     S 24');
    builder.addCardString('S---E025     S 25');
    builder.addCardString('S---E026     S 26');
    builder.addCardString('S---E027     S 27');
    builder.addCardString('S---E028     S 28');
    builder.addCardString('S---E029     S 29');
    builder.addCardString('S---E030     S 30');
    builder.addCardString('S---E031     S 31');
    builder.addCardString('S---E032     S 32');
    builder.addCardString('S---E033     S 33');
    builder.addCardString('S---E034     S 34');
    builder.addCardString('S---E035     S 35');
    builder.addCardString('S---E036     S 36');
    builder.addCardString('S---E037     S 37');
    builder.addCardString('S---E038     S 38');
    builder.addCardString('S---E039     S 39');
    builder.addCardString('S---E040     S 40');
    builder.addCardString('S---E041     S 41');
    builder.addCardString('S---E042     S 42');
    builder.addCardString('S---E043     S 43');
    builder.addCardString('S---E044     S 44');
    builder.addCardString('S---E045     S 45');
    builder.addCardString('S---E046     S 46');
    builder.addCardString('S---E047     S 47');
    builder.addCardString('S---E048     S 48');
    builder.addCardString('S---E049     S 49');
    builder.addCardString('S---E050     S 50');
    builder.addCardString('S---E051     S 51');
    builder.addCardString('S---E052     S 52');
    builder.addCardString('S---E053     S 53');

    builder.addCardString('S---E054     S 54');
    builder.addCardString('S---E055     S 55');
    builder.addCardString('S---E056     S 56');
    builder.addCardString('S---E057     S 57');
    builder.addCardString('S---E058     S 58');
    builder.addCardString('S---E059     S 59');
    builder.addCardString('S---E060     S 60');
    builder.addCardString('S---E061     S 61');
    builder.addCardString('S---E062     S 62');
    builder.addCardString('S---E063     S 63');
    builder.addCardString('S---E064     S 64');
    builder.addCardString('S---E065     S 65');
    builder.addCardString('S---E066     S 66');
    builder.addCardString('S---E067     S 67');
    builder.addCardString('S---E068     S 68');
    builder.addCardString('S---E069     S 69');
    builder.addCardString('S---E070     S 70');
    builder.addCardString('S---E071     S 71');
    builder.addCardString('S---E072     S 72');
    builder.addCardString('S---E073     S 73 100 0000 000,4052     (NEEDED FOR D7)');
    builder.addCardString('S---E074     S 74 100 0000 000,4052     (NEEDED FOR D7)');

    builder.addCardString('T---E000+    T  0                       TEMPORARY STORAGE REGION');
    builder.addCardString('T---E001     T  1                         (NOT GUARANTEED OVER SUBROUTINES)');
    builder.addCardString('T---E002     T  2');
    builder.addCardString('T---E003     T  3');
    builder.addCardString('T---E004     T  4');
    builder.addCardString('T---E005     T  5');
    builder.addCardString('T---E006     T  6');
    builder.addCardString('T---E007     T  7');

    builder.addCardString('U000E000+    U  0     $  0     $  0     STN TABLE -- STATE');
    builder.addCardString('U000E001     *  0     L  0     L  0');
    builder.addCardString('U000E002     *  1     L  0     L  0');
    builder.addCardString('U000E003     *  2     L  0     L  0');
    builder.addCardString('U000E004     *  3     L  0     L  0');
    builder.addCardString('U000E005     *  4     L  0     L  0');
    builder.addCardString('U000E006     *  5     L  0     L  0');
    builder.addCardString('U000E007     *  6     L  0     L  0');
    builder.addCardString('U000E008     *  7     L  0     L  0');
    builder.addCardString('U000E009     *  8     L  0     L  0');
    builder.addCardString('U000E010     *  9     L  0     L  0,');

    builder.addCardString('U001E000+    U  1     $  0     $  0     STN TABLE -- CURRENT BUFFER');
    builder.addCardString('U001E001     *  0 100 0000 000 0000');
    builder.addCardString('U001E002     *  1 100 0000 000 0000');
    builder.addCardString('U001E003     *  2 100 0000 000 0000');
    builder.addCardString('U001E004     *  3 100 0000 000 0000');
    builder.addCardString('U001E005     *  4 100 0000 000 0000');
    builder.addCardString('U001E006     *  5 100 0000 000 0000');
    builder.addCardString('U001E007     *  6 100 0000 000 0000');
    builder.addCardString('U001E008     *  7 100 0000 000 0000');
    builder.addCardString('U001E009     *  8 100 0000 000 0000');
    builder.addCardString('U001E010     *  9 100 0000 000 0000,');

    builder.addCardString('U002E000+    U  2     $  0     $  0     STN TABLE -- DRUM ASSIGNMENT');
    builder.addCardString('U002E001     *  0 100 0000 000 0000');
    builder.addCardString('U002E002     *  1 100 0000 000 0000');
    builder.addCardString('U002E003     *  2 100 0000 000 0000');
    builder.addCardString('U002E004     *  3 100 0000 000 0000');
    builder.addCardString('U002E005     *  4 100 0000 000 0000');
    builder.addCardString('U002E006     *  5 100 0000 000 0000');
    builder.addCardString('U002E007     *  6 100 0000 000 0000');
    builder.addCardString('U002E008     *  7 100 0000 000 0000');
    builder.addCardString('U002E009     *  8 100 0000 000 0000');
    builder.addCardString('U002E010     *  9 100 0000 000 0000,');

    builder.addCardString('U003E000+    U  3     $  0     $  0     STN TABLE -- NEXT STN IN SAME STATE');
    builder.addCardString('U003E001     *  0        1        1');
    builder.addCardString('U003E002     *  1        2        2');
    builder.addCardString('U003E003     *  2        3        3');
    builder.addCardString('U003E004     *  3        4        4');
    builder.addCardString('U003E005     *  4        5        5');
    builder.addCardString('U003E006     *  5        6        6');
    builder.addCardString('U003E007     *  6        7        7');
    builder.addCardString('U003E008     *  7        8        8');
    builder.addCardString('U003E009     *  8        9        9');
    builder.addCardString('U003E010     *  9 100 0000 000 0000,');

    builder.addCardString('U004E000+    U  4     $  0     $  0     STN TABLE -- TIME OF LAST ACTIVITY');
    builder.addCardString('U004E001     *  0 100 0000 000 0000');
    builder.addCardString('U004E002     *  1 100 0000 000 0000');
    builder.addCardString('U004E003     *  2 100 0000 000 0000');
    builder.addCardString('U004E004     *  3 100 0000 000 0000');
    builder.addCardString('U004E005     *  4 100 0000 000 0000');
    builder.addCardString('U004E006     *  5 100 0000 000 0000');
    builder.addCardString('U004E007     *  6 100 0000 000 0000');
    builder.addCardString('U004E008     *  7 100 0000 000 0000');
    builder.addCardString('U004E009     *  8 100 0000 000 0000');
    builder.addCardString('U004E010     *  9 100 0000 000 0000,');

    builder.addCardString('U004E000+    U  5     $  0     $  0     BUFFER TABLE--NEXT OPEN BUFFER');
    builder.addCardString('U004E001     *  0        1        1');
    builder.addCardString('U004E002     *  1        2        2');
    builder.addCardString('U004E003     *  2        3        3');
    builder.addCardString('U004E004     *  3        4        4');
    builder.addCardString('U004E005     *  4        5        5');
    builder.addCardString('U004E006     *  5        6        6');
    builder.addCardString('U004E007     *  6        7        7');
    builder.addCardString('U004E008     *  7        8        8');
    builder.addCardString('U004E009     *  8        9        9');
    builder.addCardString('U004E010     *  9       10       10');
    builder.addCardString('U004E011     * 10       11       11');
    builder.addCardString('U004E012     * 11       12       12');
    builder.addCardString('U004E013     * 12       13       13');
    builder.addCardString('U004E014     * 13       14       14');
    builder.addCardString('U004E015     * 14       15       15');
    builder.addCardString('U004E016     * 15 100 0000 000 0000,');

    builder.addCardString('U006E000+    U  6     $  0     $  0     DRUM SLOT TABLE--NEXT OPEN SLOT');
    builder.addCardString('U006E001     *  0        1 001    1');
    builder.addCardString('U006E002     *  1        2 002    2');
    builder.addCardString('U006E003     *  2        3 003    3');
    builder.addCardString('U006E004     *  3        4 020    4');
    builder.addCardString('U006E005     *  4        5 021    5');
    builder.addCardString('U006E006     *  5        6 022    6');
    builder.addCardString('U006E007     *  6        7 023    7');
    builder.addCardString('U006E008     *  7 100 0000 000 0000,');

    builder.addCardString('U007E000+    U  7     $  0     $  0     DRUM TABLE-INITIALS');
    builder.addCardString('U007E001     *  0 005,4130,270,0000');
    builder.addCardString('U007E002     *  1 005,4130,270,0000');
    builder.addCardString('U007E003     *  2 005,4130,270,0000');
    builder.addCardString('U007E004     *  3 005,4130,270,0000');
    builder.addCardString('U007E005     *  4 005,4130,270,0000');
    builder.addCardString('U007E006     *  5 005,4130,270,0000');
    builder.addCardString('U007E007     *  6 005,4130,270,0000');
    builder.addCardString('U007E008     *  7 005,4130,270,0000');
    builder.addCardString('U007E009     *  8 005,4130,270,0000');
    builder.addCardString('U007E010     *  9 005,4130,270,0000,');

    builder.addCardString('V---E000+    V  0     V  0     V  0     VARIABLE TABLE (ORIGIN)');
    builder.addCardString('V---E001     V  1 100 0000 000 0000     LCA');
    builder.addCardString('V---E002     V  2 100 0000 000 0000     LCB');
    builder.addCardString('V---E003     V  3 100 0000 000 0000     LCC');
    builder.addCardString('V---E004     V  4 100 0000 000 0000     LCD');
    builder.addCardString('V---E005     V  5 100 0000 000 0000     LCE');
    builder.addCardString('V---E006     V  6 100 0000 000 0000     LCF');
    builder.addCardString('V---E007     V  7 100 0000 000 0000     LCG');
    builder.addCardString('V---E008     V  8 100 0000 000 0000     LCH');
    builder.addCardString('V---E009     V  9 100 0000 000 0000     LCI');
    builder.addCardString('V---E010     V 10 100 0000 000 0000     LCJ');
    builder.addCardString('V---E011     V 11 100 0000 000 0000     LCK');
    builder.addCardString('V---E012     V 12 100 0000 000 0000     LCL');
    builder.addCardString('V---E013     V 13 100 0000 000 0000     LCM');
    builder.addCardString('V---E014     V 14 100 0000 000 0000     LCN');
    builder.addCardString('V---E015     V 15 100 0000 000 0000     LCO');
    builder.addCardString('V---E016     V 16 100 0000 000 0000     LCP');
    builder.addCardString('V---E017     V 17 100 0000 000 0000     LCQ');
    builder.addCardString('V---E018     V 18 100 0000 000 0000     LCR');
    builder.addCardString('V---E019     V 19 100 0000 000 0000     LCS');
    builder.addCardString('V---E020     V 20 100 0000 000 0000     LCT');
    builder.addCardString('V---E021     V 21 100 0000 000 0000     LCU');
    builder.addCardString('V---E022     V 22 100 0000 000 0000     LCV');
    builder.addCardString('V---E023     V 23 100 0000 000 0000     LCW');
    builder.addCardString('V---E024     V 24 100 0000 000 0000     LCX');
    builder.addCardString('V---E025     V 25 100 0000 000 0000     LCY');
    builder.addCardString('V---E026     V 26 100 0000 000 0000     LCZ');
    builder.addCardString('V---E027     V 27 100 0000 000 0000     A');
    builder.addCardString('V---E028     V 28 100 0000 000 0000     B');
    builder.addCardString('V---E029     V 29 100 0000 000 0000     C');
    builder.addCardString('V---E030     V 30 100 0000 000 0000     D');
    builder.addCardString('V---E031     V 31 100 0000 000 0000     E');
    builder.addCardString('V---E032     V 32 100 0000 000 0000     F');
    builder.addCardString('V---E033     V 33 100 0000 000 0000     G');
    builder.addCardString('V---E034     V 34 100 0000 000 0000     H');
    builder.addCardString('V---E035     V 35 100 0000 000 0000     I');
    builder.addCardString('V---E036     V 36 100 0000 000 0000     J');
    builder.addCardString('V---E037     V 37 100 0000 000 0000     K');
    builder.addCardString('V---E038     V 38 100 0000 000 0000     L');
    builder.addCardString('V---E039     V 39 100 0000 000 0000     M');
    builder.addCardString('V---E040     V 40 100 0000 000 0000     N');
    builder.addCardString('V---E041     V 41 100 0000 000 0000     O');
    builder.addCardString('V---E042     V 42 100 0000 000 0000     P');
    builder.addCardString('V---E043     V 43 100 0000 000 0000     Q');
    builder.addCardString('V---E044     V 44 100 0000 000 0000     R');
    builder.addCardString('V---E045     V 45 100 0000 000 0000     S');
    builder.addCardString('V---E046     V 46 100 0000 000 0000     T');
    builder.addCardString('V---E047     V 47 100 0000 000 0000     U');
    builder.addCardString('V---E048     V 48 100 0000 000 0000     V');
    builder.addCardString('V---E049     V 49 100 0000 000 0000     W');
    builder.addCardString('V---E050     V 50 100 0000 000 0000     X');
    builder.addCardString('V---E051     V 51 100 0000 000 0000     Y');
    builder.addCardString('V---E052     V 52 100 0000 000 0000     Z');

    builder.addCardString('W---E000+    W  0 000,0000,001,1414     ALL');
    builder.addCardString('W---E001     W  1 000,0002,411,1505     TIME');
    builder.addCardString('W---E002     W  2 000,0000,006,1722     FOR');
    builder.addCardString('W---E003     W  3 000,0000,617,2215     FORM');
    builder.addCardString('W---E004     W  4 000,0061,722,1523     FORMS');
    builder.addCardString('W---E005     W  5 000,0000,000,1106     IF');
    builder.addCardString('W---E006     W  6 000,0000,000,1116     IN');
    builder.addCardString('W---E007     W  7 000,0002,001,2224     PART');
    builder.addCardString('W---E008     W  8 000,0200,122,2423     PARTS');
    builder.addCardString('W---E009     W  9 000,0002,324,0520     STEP');
    builder.addCardString('W---E010     W 10 000,0232,405,2023     STEPS');
    builder.addCardString('W---E011     W 11 000,0252,305,2223     USERS');
    builder.addCardString('W---E012     W 12 002,6011,425,0523     VALUES');
    builder.addCardString('W---E013     W 13 000,0002,311,3205     SIZE');
    builder.addCardString('W---E014     W 14 000,0000,000,1722     OR');
    builder.addCardString('W---E015     W 15 000,0000,001,1604     AND');

    builder.addCardString('Z---E000+    Z  0 177,7777,777,7777     USER\'S INITIALS (8-BIT CHAR STRING)');

    builder.addCardString('X002E000+    X  2 010 $  0              SIGNAL SERVICE');
    builder.addCardString('X002E010          120    0 145 K 40     SCAN FOR SIGNALS');
    builder.addCardString('X002E020          001 X  3 050 H  9     JUMP IF NO SIGNALS ELSE H9');
    builder.addCardString('X002E030          124 K 17 050 H 12');
    builder.addCardString('X002E040          071   21 052 H 12     SET H12 FOR SIGNALLING STATION');
    builder.addCardString('X002E050          020 H  9 071   21');
    builder.addCardString('X002E060          001 X 10 071    1     JUMP IF \'ON\'');
    builder.addCardString('X002E070          001 X 10 071    1     JUMP IF \'OF\'');
    builder.addCardString('X002E080          001 X 10 071    2     JUMP IF \'TC\'');
    builder.addCardString('X002E090          001 * 20 071    1     JUMP IF \'RC\'');
    builder.addCardString('X002E100          001 * 30 071    1     JUMP IF \'EJ\'');
    builder.addCardString('X002E110          001 * 10 010 X 10     JUMP IF \'TO\' ELSE ASSUME \'RI\'');
    builder.addCardString('X002E120     * 10 020 $  0 010 = 48     \'TO\' TREAT BY SUBROUTINE');
    builder.addCardString('X002E130          010 X  2              LOOP BACK TO SIGNAL SERVICE');
    builder.addCardString('X002E140     * 20 020 H 12 142 K 33     \'RC\' ERASE SIGNAL');
    builder.addCardString('X002E150          010 * 31              MERGE WITH \'EJ\' TREATMENT');
    builder.addCardString('X002E160     * 30 020 H 12 142 K 34     \'EJ\' ERASE SIGNAL');
    builder.addCardString('X002E170     * 31 020 $  0 010 = 54     BRING IN USER\'S BLOCK');
    builder.addCardString('X002E180          020 $  0 010 = 47     CHANGE STATE TO \'PROCESSING\'');
    builder.addCardString('X002E190              L 13     L 13');
    builder.addCardString('X002E200          020 H  9 141 R  1     READ BUFFER');
    builder.addCardString('X002E210          020 $  0 010 = 58     RELEASE BUFFER');
    builder.addCardString('X002E220          020 $  0 010 =  5     CONVERT');
    builder.addCardString('X002E230          020 H  9 071   26');
    builder.addCardString('X002E240          001 * 32 020 P  0     JUMP IF \'EJ\' ELSE \'RC\'');
    builder.addCardString('X002E250          024 I  1 050 P  0');
    builder.addCardString('X002E260          025 J  2 001 * 33     JUMP IF STILL ROOM ON PAGE');
    builder.addCardString('X002E270          020 * 32 010 = 22     EJECT, TYPE TIME LINE AND SKIP');
    builder.addCardString('X002E280     * 32 020 $  0 014 = 22     TYPE TIME LINE AFTER \'EJ\'');
    builder.addCardString('X002E290     * 33 020 J 21 024 K  1     COUNT ONE INPUT');
    builder.addCardString('X002E292          050 J 21 010 $  1');
    builder.addCardString('X002E294          023 P 13 002 * 40     JUMP IF WAITING FOR INSTRUCTION');
    builder.addCardString('X002E300          024 I  1 002 * 70     JUMP IF WAITING FOR FORM');
    builder.addCardString('X002E310          024 I  1 002 * 35     JUMP IF WAITING FOR INITIALS');
    builder.addCardString('X002E320          024 I  1 002 G 14     JUMP IF WAITING FOR VALUE DEMANDED');
    builder.addCardString('X002E330          130 $  0              ELSE PHONY SUBSTATE CODE');
    builder.addCardString('X002E335     * 35 020 H  9 010 X 10     CLEAR H9 AND JUMP');
    builder.addCardString('X002E340     * 40 020 R  1 005 X 12     JUMP IF EMPTY TO SWITCH VIA X12');
    builder.addCardString('X002E350          020 P  1 050 P 18     SAVE LAST CHARACTER');
    builder.addCardString('X002E360          124 A124 025 A124');
    builder.addCardString('X002E370          006 X 12 020 P  2     JUMP IF LINE ENDS WITH \'*\' TO SWITCH');
    builder.addCardString('X002E380          056 * 41 056 * 53     SET ADDRESSES FOR LAST CHARACTER');
    builder.addCardString('X002E390          020 J 12 050 P  2     INITIALIZE POINTER');
    builder.addCardString('X002E400          020 $  0 010 =  2     ADVANCE TO NONSPACE');
    builder.addCardString('X002E402          020 R  1 124 A 61');
    builder.addCardString('X002E404          025 A 61 002 D  5     JUMP IF TAB');
    builder.addCardString('X002E410          020 P  1 124 A124');
    builder.addCardString('X002E415          025 A124 006 X 12     JUMP IF \'*\'');
    builder.addCardString('X002E420          020 P  1 124 K 34');
    builder.addCardString('X002E430          025 K 34 001 * 50     JUMP IF NOT LETTER, ASSUME STEP LABEL');
    builder.addCardString('X002E440          020 P 18 124 A 27     ASSUME DIRECT COMMAND');
    builder.addCardString('X002E450          025 A 27 001 * 42     JUMP UNLESS LAST CHARACTER WAS PERIOD');
    builder.addCardString('X002E460     * 41 020 A109 050 ----     REPLACE BY TERMINAL PERIOD');
    builder.addCardString('X002E470     * 42 020 P 10 001 X  4     FIRE IF UNCONDITIONAL');

    builder.addCardString('X002E480          025 K 43 056 * 43');
    builder.addCardString('X002E485          025 P  2 001 E  6     ERROR IF NOTHING PRECEDES \'IF\'');
    builder.addCardString('X002E490     * 43 020 A 45 050 ----     SET SPECIAL SPACE');
    builder.addCardString('X002E500          010 X  4              FIRE');
    builder.addCardString('X002E510     * 50 020 P  2 050 P 19');
    builder.addCardString('X002E515          020 $  0 010 = 20');
    builder.addCardString('X002E520          020 T  0 070   39     PICK UP DEC PT INFO FROM =20 IN T0');
    builder.addCardString('X002E525          024 P  2 025 P 19');
    builder.addCardString('X002E530          124 K  5 025 I  1');
    builder.addCardString('X002E535          025 N  1 002 E 11     ERROR IF 10 OR MORE DIGITS');
    builder.addCardString('X002E540          020 P  1 001 * 52     JUMP IF AT TERMINAL MINUS');
    builder.addCardString('X002E545          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('X002E550          020 P  2 025 K  3');
    builder.addCardString('X002E555          052 * 51 020 A131');
    builder.addCardString('X002E560     * 51 050 ---- 010 $  1');
    builder.addCardString('X002E570     * 52 020 $  0 010 = 45     VALIDATE STEP LABEL');
    builder.addCardString('X002E580          020 Q  3 050 P 21     SET STEP NUMBER IN CONTEXT');
    builder.addCardString('X002E590          020 $  0 010 = 13     POP Q3');
    builder.addCardString('X002E600          020 P 18 124 A 27');
    builder.addCardString('X002E610          025 A 27 001 * 54     JUMP UNLESS LAST CHARACTER WAS PERIOD');
    builder.addCardString('X002E620     * 53 020 A130 050 ----     REPLACE FINAL PERIOD BY PSEUDO-PERIOD');
    builder.addCardString('X002E630     * 54 020 P 10 001 * 56     JUMP IF NO CONDITION');
    builder.addCardString('X002E640          025 K 43 056 * 55');
    builder.addCardString('X002E650     * 55 020 A131 050 ----     SET SPECIAL SPACE BEFORE \'IF\'');
    builder.addCardString('X002E660     * 56 020 $  0 010 =  6     PACK STRING');
    builder.addCardString('X002E670          020 Q  0 056 * 57     VERIFY TWO MORE SPACE UNITS');
    builder.addCardString('X002E680     * 57 001 E  0 020 ----');
    builder.addCardString('X002E690          001 E  0 010 $  1');
    builder.addCardString('X002E700          020 $  0 010 = 51     FIND STEP IF CAN');
    builder.addCardString('X002E705          001 * 58 010 $  1     JUMP IF CAN\'T');
    builder.addCardString('X002E710          020 $  0 010 = 56     ERASE DUPLICATE');
    builder.addCardString('X002E715          020 $  0 010 = 51     FIND PLACE AGAIN');
    builder.addCardString('X002E720     * 58 020 H 23 002 * 62     JUMP IF PART EXISTS');
    builder.addCardString('X002E725          020 $  0 010 = 68     COMPUTE PART (P20) FOR STEP (P21)');
    builder.addCardString('X002E730          020 H 21 056 * 59     SET UP PART ID IN QUO STRUCTURE');
    builder.addCardString('X002E735          020 $  0 010 = 10');
    builder.addCardString('X002E740     * 59 056 * 60 056 ----');
    builder.addCardString('X002E745          024 K  1 056 * 61');
    builder.addCardString('X002E750     * 60 020 H 22 056 ----');
    builder.addCardString('X002E755     * 61 020 P 20 050 ----');
    builder.addCardString('X002E760          020 * 60 124 K  5');
    builder.addCardString('X002E765          071   21 050 H 24');
    builder.addCardString('X002E770          120    0 050 H 25');
    builder.addCardString('X002E775     * 62 020 H 24 052 * 63     SET UP STEP IN Q10 STRUCTURE');
    builder.addCardString('X002E780          020 $  0 010 = 10');
    builder.addCardString('X002E785          071   21 052 * 65');
    builder.addCardString('X002E790     * 63 052 ---- 024 K  2');
    builder.addCardString('X002E795          052 * 64 020 P 21');
    builder.addCardString('X002E800     * 64 050 ---- 020 H 25');
    builder.addCardString('X002E805          124 K  6 024 P  3');
    builder.addCardString('X002E810     * 65 050 ---- 120    0');
    builder.addCardString('X002E815          050 Q 15 014 X 12     RELIEVE Q15 AND SWITCH VIA X12');
    builder.addCardString('X002E820     * 70 120    0 050 P 13     CLEAR \'WTG FOR FORM\' SUBSTATE');
    builder.addCardString('X002E825          020 $  0 010 =  6     PACK STRING');
    builder.addCardString('X002E830          020 $  0 010 = 52     FIND FORM IF CAN A/C P22');

    builder.addCardString('X002E835          001 * 71 010 $  1     JUMP IF CAN\'T');
    builder.addCardString('X002E840          020 $  0 010 = 57     ERASE DUPLICATE');
    builder.addCardString('X002E845          020 $  0 010 = 52     FIND PLACE AGAIN');
    builder.addCardString('X002E850     * 71 020 H 24 052 * 72');
    builder.addCardString('X002E855          020 $  0 010 = 10');
    builder.addCardString('X002E860          071   21 052 * 74');
    builder.addCardString('X002E865     * 72 052 ---- 024 K  2');
    builder.addCardString('X002E870          052 * 73 020 P 22');
    builder.addCardString('X002E875     * 73 050 ---- 020 H 25');
    builder.addCardString('X002E880          124 K  6 024 P  3');
    builder.addCardString('X002E885     * 74 050 ---- 120    0');
    builder.addCardString('X002E890          050 Q 15 014 X 12,    RELIEVE Q15 AND SWITCH VIA X12');

    builder.addCardString('X003E000+    X  3 010 $  0              TASK SELECTION');
    builder.addCardString('X003E010          011 *  1 010 *  2     TO *1 IF \'READER READER\', ELSE TO *2');
    builder.addCardString('X003E020     *  1 020 L  3 001 *  2     JUMP IF NO STN WAITING FOR READER REA');
    builder.addCardString('X003E030          020 L  9 001 X  8     JUMP IF NO STN PUNCHING, INITIATE REA');
    builder.addCardString('X003E050     *  2 020 L  4 001 *  3     TO *3 IF NO STN READING');
    builder.addCardString('X003E060          024 U  4 052 $  1');
    builder.addCardString('X003E070          020 ---- 024 J  8');
    builder.addCardString('X003E080          025 H  1 005 X  8     TO X8 IF READING IS OVERDUE.');
    builder.addCardString('X003E090          010 *  5');
    builder.addCardString('X003E100     *  3 020 L  2 002 * 20     JUMP IF STN WAITING TO READ');
    builder.addCardString('X003E110          020 L  9 001 *  4     JUMP IF NO STN PUNCHING');
    builder.addCardString('X003E120          024 U  4 052 $  1');
    builder.addCardString('X003E130          020 ---- 024 J  9');
    builder.addCardString('X003E140          025 H  1 005 X  9     TO X9 IF PUNCHING IS OVERDUE');
    builder.addCardString('X003E150          010 *  5');
    builder.addCardString('X003E160     *  4 020 L  8 001 *  5     JUMP IF NO STN WAITING TO PUNCH');
    builder.addCardString('X003E170          020 L  4 001 X  9     JUMP IF NO STN READING, INITIATE PUNC');
    builder.addCardString('X003E180     *  5 020 L 12 001 *  6     TO *6 IF NO STN WTG FOR NORMAL PROCES');
    builder.addCardString('X003E190          024 U  4 052 $  1');
    builder.addCardString('X003E200          020 ---- 024 J  7');
    builder.addCardString('X003E210          025 H  1 001 * 40     TO *40 IF STN OVERDUE FOR PROCESSING');
    builder.addCardString('X003E220     *  6 020 L 11 001 *  7     TO *7 IF NO STN WTG FOR BUFFER');
    builder.addCardString('X003E230          020 H 10 002 * 50     TO *50 IF BUFFER AVAILABLE');
    builder.addCardString('X003E240     *  7 020 L 12 002 * 40     TO *40 IF STN WTG FOR PROCESSING');
    builder.addCardString('X003E250          020 L  4 006 X  8     JUMP IF STN READING');
    builder.addCardString('X003E260          020 L  9 006 X  9     JUMP IF STN PUNCHING');
    builder.addCardString('X003E270          010 X  1              NOTHING TO DO,GO BACK TO Q SERVICE');
    builder.addCardString('X003E280     * 20 105    0 011 $  0     LOOP TILL T1 TURNED OFF');
    builder.addCardString('X003E500     * 40 020 L 12 050 H 12     SET STN CONTEXT');
    builder.addCardString('X003E510          020 $  0 010 = 47     CHANGE STATE TO L13');
    builder.addCardString('X003E520              L 13     L 13');
    builder.addCardString('X003E530          020 $  0 010 = 54     BRING IN PROGRAM');
    builder.addCardString('X003E540          010 X  4              FIRE');
    builder.addCardString('X003E560     * 50 020 L 11 050 H 12     SET STN CONTEXT');
    builder.addCardString('X003E570          020 $  0 010 = 47     CHANGE STATE TO L13');
    builder.addCardString('X003E580              L 13     L 13');
    builder.addCardString('X003E590          020 $  0 010 = 54     BRING IN PROGRAM');
    builder.addCardString('X003E600          014 = 25         ,    REENTER =25');

    builder.addCardString('X004E000+    X  4 010 $  0              FIRE');
    builder.addCardString('X004E010          020 P 10 001 *  2     JUMP IF UNCONDITIONAL');
    builder.addCardString('X004E020          020 P  1 050 P 11     SAVE SETUP');
    builder.addCardString('X004E030          020 P  2 050 P 12');
    builder.addCardString('X004E040          020 A 14 050 P  1');
    builder.addCardString('X004E050          020 P 10 050 P  2');
    builder.addCardString('X004E060          020 $  0 010 = 23     EVALUATE CONDITION');
    builder.addCardString('X004E070          002 *  1 010 X  5     JUMP TO X5 ADVANCE IF DOESN\'T HOLD');
    builder.addCardString('X004E100     *  1 020 P 11 050 P  1     RESTORE SETUP');
    builder.addCardString('X004E110          020 P 12 050 P  2');
    builder.addCardString('X004E120     *  2 020 $  0 010 = 27     INTERPRET VERB');
    builder.addCardString('X004E130          020 * 50 052 * 11');
    builder.addCardString('X004E140     * 11 020 ---- 005 G  0     JUMP TO TRY SHORT-SET IF NOT VALID VE');
    builder.addCardString('X004E150          025 H 19 001 * 12');
    builder.addCardString('X004E160          025 K  1 001 * 13');
    builder.addCardString('X004E170     * 12 020 * 11 024 K  2');
    builder.addCardString('X004E180          052 * 11 010 * 11');
    builder.addCardString('X004E190     * 13 020 * 11 025 * 50');
    builder.addCardString('X004E200          024 * 51 052 *  9');
    builder.addCardString('X004E210     *  9 010 ----              GO TO GXXX');
    builder.addCardString('X004E220     * 50     * 60');
    builder.addCardString('X004E230     * 51     G  0');
    builder.addCardString('X004E240     * 60 000,0000,063,0524     SET');
    builder.addCardString('X004E250          000,0000,000,4417     DO');
    builder.addCardString('X004E260          000,0000,000,6417     TO');
    builder.addCardString('X004E270          000,0004,417,1605     DONE');
    builder.addCardString('X004E280          004,3011,603,0514     CANCEL');
    builder.addCardString('X004E290          004,4051,405,2405     DELETE');
    builder.addCardString('X004E300          000,0006,431,2005     TYPE');
    builder.addCardString('X004E310          000,0005,411,1605     LINE');
    builder.addCardString('X004E320          000,0006,001,0705     PAGE');
    builder.addCardString('X004E330          000,0006,205,0104     READ');
    builder.addCardString('X004E340          000,0602,516,0310     PUNCH');
    builder.addCardString('X004E350          000,0004,617,2215     FORM');
    builder.addCardString('X004E360          000,0006,324,1720     STOP');
    builder.addCardString('X004E370          000,0000,000,4717     GO');
    builder.addCardString('X004E380          004,4051,501,1604     DEMAND');
    builder.addCardString('X004E390          100,0000,000,0000,');

    builder.addCardString('X006E000+    X  6 010 $  0              FETCH');
    builder.addCardString('X006E010          020 P 15 001 *  1     JUMP IF NO POSTPONED \'RI\'');
    builder.addCardString('X006E020          020 H 12 024 K 32     FAKE AN \'RI\'');
    builder.addCardString('X006E030          050 H  9 010 X 10       IN H9 AND JUMP');
    builder.addCardString('X006E035     *  1 020 P 16 056 P  3');
    builder.addCardString('X006E040          020 $  0 010 =  7     UNPACK');
    builder.addCardString('X006E050          020 $  0 010 =  1     ADVANCE TO VERB');
    builder.addCardString('X006E060     *  2 020 $  0 010 =  0     READ CLOCK');
    builder.addCardString('X006E070          025 H  8 025 J  4');
    builder.addCardString('X006E080          002 *  6 024 J  4     JUMP IF SHOT TIME IS UP');
    builder.addCardString('X006E090          025 J  3 002 *  4     PREFERRED PERIOD IS UP');
    builder.addCardString('X006E100          120    0 145 K 35');
    builder.addCardString('X006E110          001 X  4 050 H  9     JUMP IF NO \'TO\'');
    builder.addCardString('X006E120     *  3 020 $  0 010 = 48     TREAT \'TO\' BY SUBROUTINE');
    builder.addCardString('X006E140          010 *  2              LOOP BACK');
    builder.addCardString('X006E150     *  4 120    0 145 K 41');
    builder.addCardString('X006E160          001 *  5 050 H  9     JUMP IF NO MINOR CYCLE MSG');
    builder.addCardString('X006E170          124 K 35 025 K 35');
    builder.addCardString('X006E180          002 *  3 010 *  6     JUMP IF \'TO\' ELSE JUMP TO CUTOFF');
    builder.addCardString('X006E190     *  5 020 L 11 001 X  4     JUMP IF NO L11');
    builder.addCardString('X006E200          020 H 10 001 X  4     JUMP IF NO BUFFER');
    builder.addCardString('X006E210     *  6 020 $  0 010 = 47     CUTOFF');
    builder.addCardString('X006E220              L 12     L 12');
    builder.addCardString('X006E230          020 $  0 010 = 53     KICK OUT');
    builder.addCardString('X006E240          010 X  1         ,    JUMP TO Q SERVICE');

    builder.addCardString('X007E010          020 K  4 050 P 16     RESET P16');
    builder.addCardString('X007E020          020 Q  8 052 *  1');
    builder.addCardString('X007E030     *  1 020 ---- 006 *  3     JUMP IF POSSIBLY MORE ITERATIONS');
    builder.addCardString('X007E040     *  2 020 $  0 010 = 76     ASCEND REALLY');
    builder.addCardString('X007E050          020 K  4 050 P 23     RESET P23');
    builder.addCardString('X007E060          020 Q  8 002 X  5     EXIT TO X5 IF MORE TO DO ON TASK');
    builder.addCardString('X007E070          020 $  0 010 = 55     SWITCH TO USER');
    builder.addCardString('X007E080          020 $  0 010 = 53     KICK OUT PROGRAM');
    builder.addCardString('X007E090     *  3 010 X  1 052 *  5     EXIT TO X1 FOR QUEUE SERVICE');
    builder.addCardString('X007E100          120    0 050 P 23     SET P23');
    builder.addCardString('X007E110          020 Q  0 056 *  4     CHECK FOR TWO SPACES');
    builder.addCardString('X007E120     *  4 001 E  0 020 ----');
    builder.addCardString('X007E130          002 *  5 010 E  0');
    builder.addCardString('X007E140     *  5 020 ---- 052 *  6');
    builder.addCardString('X007E150     *  6 023 ---- 002 *  2     JUMP IF NO MORE ITERATIONS');
    builder.addCardString('X007E160     * 10 020 *  1 024 K  2     SET UP Q9 FOR NEXT ITERATION');
    builder.addCardString('X007E170          052 * 11 010 $  1');
    builder.addCardString('X007E180     * 11 020 ---- 001 * 14     JUMP IF MINUS INDICATING \'STEP\'');
    builder.addCardString('X007E190          050 P 20 010 $  1');
    builder.addCardString('X007E200          020 $  0 010 = 50     FIND PART');
    builder.addCardString('X007E210          001 E 26 052 * 13     ERROR IF CAN\'T');
    builder.addCardString('X007E220          024 K  2 052 * 12');
    builder.addCardString('X007E230     * 12 020 ---- 050 Q  9');
    builder.addCardString('X007E240     * 13 020 ---- 014 * 15');
    builder.addCardString('X007E250     * 14 020 Q  9 050 P 21');
    builder.addCardString('X007E260          020 $  0 010 = 51     FIND STEP');
    builder.addCardString('X007E270     * 15 001 E 27 050 P 16     ERROR IF CAN\'T');
    builder.addCardString('X007E280     * 20 020 *  6 052 * 21     GET NEXT VALUE FOR ITERATION');
    builder.addCardString('X007E290     * 21 020 ---- 056 * 22');
    builder.addCardString('X007E300     * 22 050 P 18 020 ----');
    builder.addCardString('X007E310          001 * 40 056 * 31     JUMP IF NO INCREMENT');
    builder.addCardString('X007E320          024 K  1 056 * 25');
    builder.addCardString('X007E330          020 *  6 024 K  2');
    builder.addCardString('X007E340          052 * 23 020 * 22');
    builder.addCardString('X007E350          024 K  1 056 * 24');
    builder.addCardString('X007E360          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('X007E370     * 23 020 ---- 050 Q  3');
    builder.addCardString('X007E380          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('X007E390     * 25 070    0 020 ----     PICK UP LIMIT');
    builder.addCardString('X007E400     * 24 050 H 22 020 ----     PICK UP INCREMENT');
    builder.addCardString('X007E410          050 Q  3 050 H 23');
    builder.addCardString('X007E420          020 $  0 010 = 13     COMPUTE NEXT VALUE');
    builder.addCardString('X007E430          050 H 21 010 $  1');
    builder.addCardString('X007E440          020 $  0 010 = 13     POP Q3');
    builder.addCardString('X007E450          020 $  0 010 = 70     COMPARE NEW VALUE WITH LIMIT VALUE');
    builder.addCardString('X007E460          071    5 001 * 30     JUMP IF NEW VALUE EQUALS LIMIT VALUE');
    builder.addCardString('X007E470          070    8 024 H 23');
    builder.addCardString('X007E480          071    9 002 * 30     JUMP IF NEW VALUE EXCEEDS LIMIT VALUE');
    builder.addCardString('X007E490          020 H 21 010 * 33');
    builder.addCardString('X007E500     * 30 020 * 31 056 * 32     DELETE INCREMENT-LIMIT PAIR');
    builder.addCardString('X007E510          020 *  6 052 * 32');
    builder.addCardString('X007E520     * 31 004 Q  0 020 ----');

    builder.addCardString('X007E530     * 32 056 ---- 060 ----');
    builder.addCardString('X007E540          020 * 22 124 K  5');
    builder.addCardString('X007E550          050 Q  0 020 H 22     USE LIMIT NEXT IF EQUALED OR EXCEEDED');
    builder.addCardString('X007E560     * 33 050 ---- 010 * 50     UPDATE CURRENT VALUE AND JUMP TO ASSI');
    builder.addCardString('X007E610     * 40 020 *  5 052 * 43     DELETE USED VALUE');
    builder.addCardString('X007E620          020 *  6 052 * 42');
    builder.addCardString('X007E630          124 K  6 070   21');
    builder.addCardString('X007E640     * 41 004 Q  0 050 Q  0');
    builder.addCardString('X007E650     * 42 060 ---- 020 P 18');
    builder.addCardString('X007E660     * 43 052 ---- 010 * 50');
    builder.addCardString('X007E670     * 50 020 *  5 052 * 51     ASSIGN NEW VALUE');
    builder.addCardString('X007E680          024 K  2 052 * 52');
    builder.addCardString('X007E690     * 51 020 ---- 056 * 53');
    builder.addCardString('X007E700          024 K  3 056 * 54');
    builder.addCardString('X007E710     * 52 004 ---- 052 * 58');
    builder.addCardString('X007E720     * 53 060 H 27 020 ----');
    builder.addCardString('X007E730          056 * 55 024 K  1');
    builder.addCardString('X007E740          056 * 56 006 * 54     (USING TRICKS HERE -- BEWARE)');
    builder.addCardString('X007E750     * 54 010 * 55 020 ----');
    builder.addCardString('X007E760     * 55 050 H 28 020 ----');
    builder.addCardString('X007E770     * 56 001 * 57 020 ----');
    builder.addCardString('X007E780     * 57 050 H 29 010 $  1');
    builder.addCardString('X007E790     * 58 020 ---- 050 H 30');
    builder.addCardString('X007E800          020 $  0 010 = 73');
    builder.addCardString('X007E810          020 K  4 050 P 23     RESET P23');
    builder.addCardString('X007E820          010 X  6              EXIT TO X6 FETCH');

    builder.addCardString('X007E000+    X  7 010 $  0 010 * 30,    ASCEND (OR ITERATE) (O14=OVERFLOW)');


    builder.addCardString('X012E010     *  1 020 $  0 010 = 25     TRANSMIT');
    builder.addCardString('X012E020     *  2 020 $  0 010 = 55     SWITCH');
    builder.addCardString('X012E030          020 $  0 010 = 53     KICK OUT');
    builder.addCardString('X012E040          010 X  1              EXIT TO Q SERVICE');

    builder.addCardString('X012E000+    X 12 010 *  1 010 *  2,    TRANSMIT (IF 010) AND SWITCH');

    builder.addCardString('X014E000+    X 14 010 $  0              SPECIAL TRANSMIT THEN GO TO X5');
    builder.addCardString('X014E010          020 $  0 010 = 25');
    builder.addCardString('X014E020          010 X  5         ,');

    builder.addCardString('X015E000+    X 15 010 $  0              READ ROUTINE FROM DRUM AND EXECUTE');
    builder.addCardString('X015E010          050 T  0 020 H 17     SAVE ACCUMULATOR');
    builder.addCardString('X015E020          065 T  1 023 T  1');
    builder.addCardString('X015E030          002 *  1 060 H 17     JUMP IF ROUTINE ALREADY IN CORE');
    builder.addCardString('X015E040          110 M  0 010 $  1     ELSE READ IT IN');
    builder.addCardString('X015E050     *  1 020 T  0 010 M  0,    RESET ACCUMULATOR AND JUMP');

    builder.addCardString('=000E000+    =  0 010 $  0              READ CLOCK');
    builder.addCardString('=000E010          024 K  2 052 *  9');
    builder.addCardString('=000E020          107    0 004 H  0');
    builder.addCardString('=000E030          050 H  0 065 T  0');
    builder.addCardString('=000E040          002 *  1 024 K 31     ADD 2*16 IF CLOCK TURNED OVER');
    builder.addCardString('=000E050     *  1 024 H  1 050 H  1');
    builder.addCardString('=000E060     *  9 010 ----         ,    EXITS WITH TIME IN ACC AND H1');

    builder.addCardString('=001E000+    =  1 010 $  0              STEP ONE CHARACTER');
    builder.addCardString('=001E010          024 K  2 052 *  9');
    builder.addCardString('=001E020          020 P  2 024 K  3');
    builder.addCardString('=001E030          052 *  1 054 P  2');
    builder.addCardString('=001E040     *  1 020 ---- 050 P  1     LEAVES NEW CHARACTER IN ACC');
    builder.addCardString('=001E050     *  9 010 ----         ,');

    builder.addCardString('=002E000+    =  2 024 K  2 010 $  0     ADVANCE TO NONSPACE');
    builder.addCardString('=002E010          052 *  9 010 *  1');

    builder.addCardString('=003E000     =  3 010 $  0              ELIMINATE SPACES');
    builder.addCardString('=003E010          024 K  2 052 *  9');
    builder.addCardString('=003E020          020 P  1 010 *  3');
    builder.addCardString('=003E030     *  1 020 P  2 024 K  3');
    builder.addCardString('=003E040          052 *  2 054 P  2');
    builder.addCardString('=003E050     *  2 020 ---- 050 P  1');
    builder.addCardString('=003E060     *  3 124 A 14 025 A 14');
    builder.addCardString('=003E070          002 *  1 020 P  1');
    builder.addCardString('=003E080     *  9 010 ----         ,     LEAVES NONSPACE IN ACC');

    builder.addCardString('=004E000+    =  4 130 =  4 134 =  4');

    builder.addCardString('=005E000+    =  5 010 $  0              CONVERTER');
    builder.addCardString('=005E010          024 K  2 052 *  9');
    builder.addCardString('=005E020     *  1 020 A 42 050 R 73     FILL WITH CR+EOM+TERMINAL FROM RIGHT');
    builder.addCardString('=005E030          020 *  1 014 *  3');
    builder.addCardString('=005E040     *  2 020 A 42 050 ----');
    builder.addCardString('=005E050     *  3 020 *  2 025 K  1');
    builder.addCardString('=005E060          056 *  2 056 *  4');
    builder.addCardString('=005E070     *  4 020 *  5 004 ----');
    builder.addCardString('=005E080          065 T  0 023 T  0');
    builder.addCardString('=005E090          002 *  2 020 *  6');
    builder.addCardString('=005E100          065 T  0 023 T  0');
    builder.addCardString('=005E105          002 *  2 010 * 10');
    builder.addCardString('=005E110     *  5             ,0016     SPACE');
    builder.addCardString('=005E115     *  6             ,0103     STRIKE OUT');
    builder.addCardString('=005E120     * 10 020 J 12 050 P  2');
    builder.addCardString('=005E130     * 11 020 K  4 050 P 10     CLEAR \'IF\'');
    builder.addCardString('=005E140     * 12 020 $  0 010 * 20');
    builder.addCardString('=005E150     * 13 020 P  1 124 A 14     SPACE');
    builder.addCardString('=005E160          025 A 14 001 * 14');
    builder.addCardString('=005E170     * 15 020 $  0 010 * 20');
    builder.addCardString('=005E180          020 P  1 124 A 25     I');
    builder.addCardString('=005E190          025 A 25 001 * 13');
    builder.addCardString('=005E200          020 $  0 010 * 20');
    builder.addCardString('=005E210          020 P  1 124 A 22     F');
    builder.addCardString('=005E220          025 A 22 001 * 13');
    builder.addCardString('=005E230          020 $  0 010 * 20');
    builder.addCardString('=005E240          020 P  1 124 A 14     SPACE');
    builder.addCardString('=005E250          025 A 14 001 * 14');
    builder.addCardString('=005E260          020 P  2 050 P 10     RECORD \'IF\' BY LOCN OF FOLLOWING SPAC');
    builder.addCardString('=005E270          010 * 15');
    builder.addCardString('=005E280     * 14 020 P  1 124 A 66');
    builder.addCardString('=005E290          025 A 66 001 * 12');
    builder.addCardString('=005E300          010 * 11              CLEAR \'IF\' IF QUOTE');
    builder.addCardString('=005E310     * 20 024 K  2 052 * 29');
    builder.addCardString('=005E320          020 P  2 024 K  3');
    builder.addCardString('=005E330          050 P  2 056 * 21');
    builder.addCardString('=005E340     * 21 056 * 23 020 ----');
    builder.addCardString('=005E350          024 J 13 056 * 22');
    builder.addCardString('=005E360     * 22 001 * 24 020 ----');
    builder.addCardString('=005E370     * 23 050 P  1 050 ----');
    builder.addCardString('=005E380     * 29 010 ----              EXIT FROM *20');
    builder.addCardString('=005E390     * 24 020 P  2 025 K  3');
    builder.addCardString('=005E400          050 P  2 052 * 25');
    builder.addCardString('=005E410     * 25 020 ---- 050 P  1');
    builder.addCardString('=005E420     *  9 010 ----         ,    EXIT WITH LAST CHAR IN CONTEXT AND AC');

    builder.addCardString('=006E000+    =  6 010 $  0              PACKER');
    builder.addCardString('=006E010          024 K  2 052 *  9     LEAVES LINK TO STRING IN P3 AND ACC.');
    builder.addCardString('=006E030          020 R  1 001 *  8     TO *8 IF VACUOUS');
    builder.addCardString('=006E040          020 Q  0 056 Q 15     SET');
    builder.addCardString('=006E050          020 J 12 050 P  2');
    builder.addCardString('=006E060          020 $  0 010 =  1');
    builder.addCardString('=006E070     *  1 020 $  0 010 = 10');
    builder.addCardString('=006E080          056 *  3 024 K  1');
    builder.addCardString('=006E090          056 *  2 070    0');
    builder.addCardString('=006E100          020 $  0 010 * 20');
    builder.addCardString('=006E110          020 $  0 010 * 20');
    builder.addCardString('=006E120          020 $  0 010 * 20');
    builder.addCardString('=006E130          020 $  0 010 * 20');
    builder.addCardString('=006E140          060 T  0 071   12');
    builder.addCardString('=006E150          050 T  1 070    0');
    builder.addCardString('=006E160          020 $  0 010 * 20');
    builder.addCardString('=006E170          020 $  0 010 * 20');
    builder.addCardString('=006E180          020 $  0 010 * 20');
    builder.addCardString('=006E190          020 $  0 010 * 20');
    builder.addCardString('=006E200          020 $  0 010 * 20');
    builder.addCardString('=006E210          060 T  0 010 $  1');
    builder.addCardString('=006E220     *  2 071    5 050 ----');
    builder.addCardString('=006E230          020 P  1 001 *  3');
    builder.addCardString('=006E240          020 Q  0 056 T  1');
    builder.addCardString('=006E250     *  3 020 T  1 050 ----');
    builder.addCardString('=006E260          020 P  1 002 *  1');
    builder.addCardString('=006E270     *  8 020 Q 15 050 P  3     POSITION OUTPUT IN P3');
    builder.addCardString('=006E280     *  9 010 ----');
    builder.addCardString('=006E290     * 20 024 K  2 052 * 29');
    builder.addCardString('=006E300          120    0 075    7');
    builder.addCardString('=006E310          020 P  1 124 K 17');
    builder.addCardString('=006E320          064 T  0 004 T  0');
    builder.addCardString('=006E330          020 P  2 024 K  3');
    builder.addCardString('=006E340          052 * 21 054 P  2');
    builder.addCardString('=006E350     * 21 020 ---- 050 P  1');
    builder.addCardString('=006E360     * 29 010 ----         ,');

    builder.addCardString('=007E000+    =  7 024 K  4 010 $  0     UNPACK TO R(IF 010), TO S(IF 014)');
    builder.addCardString('=007E010          024 K  2 052 *  9');
    builder.addCardString('=007E020          006 *  5 020 J 12');
    builder.addCardString('=007E025     *  5 010 *  6 020 S  0');
    builder.addCardString('=007E030     *  6 052 * 23 020 K  4');
    builder.addCardString('=007E035          050 P  2 050 P 10');
    builder.addCardString('=007E040          020 P  3 050 T  0     PICK UP SOURCE FROM P3.');
    builder.addCardString('=007E050     *  1 023 T  0 001 *  2     TO *2 IF MORE');
    builder.addCardString('=007E060          020 A 42 010 * 21     SUPPLY CR+EOM AND EXIT VIA *21.');
    builder.addCardString('=007E070     *  2 020 T  0 010 $  1');
    builder.addCardString('=007E080          056 *  3 024 K  1');
    builder.addCardString('=007E090     *  3 056 *  4 004 ----');
    builder.addCardString('=007E100          020 $  1 010 * 20');
    builder.addCardString('=007E110          020 $  1 010 * 20');
    builder.addCardString('=007E120          020 $  1 010 * 20');
    builder.addCardString('=007E130          020 $  1 010 * 20');
    builder.addCardString('=007E140          075   12 010 $  1');
    builder.addCardString('=007E150     *  4 056 T  0 004 ----');
    builder.addCardString('=007E160          020 $  1 010 * 20');
    builder.addCardString('=007E170          020 $  1 010 * 20');
    builder.addCardString('=007E180          020 $  1 010 * 20');
    builder.addCardString('=007E190          020 $  1 010 * 20');
    builder.addCardString('=007E200          020 $  1 010 * 20');
    builder.addCardString('=007E210          023 T  0 014 *  1');
    builder.addCardString('=007E230     * 20 050 * 29 075    7');
    builder.addCardString('=007E240     * 21 124 K 17 024 J 13');
    builder.addCardString('=007E245          056 * 22 010 $  1');
    builder.addCardString('=007E250          020 * 23 024 K  2');
    builder.addCardString('=007E260     * 22 052 * 23 020 ----');
    builder.addCardString('=007E270     * 23 050 ---- 002 * 29');
    builder.addCardString('=007E280          124 A 45 025 A 45');
    builder.addCardString('=007E290     *  9 001 ---- 020 * 23     EXIT');
    builder.addCardString('=007E300          124 K  6 050 T  1');
    builder.addCardString('=007E310          074   21 056 T  1');
    builder.addCardString('=007E320          020 P  2 001 * 24     JUMP IF P2 NOT SET');
    builder.addCardString('=007E330          020 T  1 024 K 43');
    builder.addCardString('=007E340          050 P 10 010 * 29     SET P10');
    builder.addCardString('=007E350     * 24 020 T  1 050 P  2');
    builder.addCardString('=007E370     * 29 --- ---- --- ----,');

    builder.addCardString('=008E000+    =  8 010 $  0              ASSIGN BUFFER TO STN');
    builder.addCardString('=008E010          024 K  2 052 *  9');
    builder.addCardString('=008E020          020 H 10 050 H 13     SET H13');
    builder.addCardString('=008E030          001 *  9 024 U  5     EXIT MINUS IF NO BUFFER AVAILABLE');
    builder.addCardString('=008E040          052 *  1 056 *  5');
    builder.addCardString('=008E050     *  1 020 ---- 050 H 10     UPDATE H10');
    builder.addCardString('=008E060          021 J 16 050 T  0');
    builder.addCardString('=008E070          020 H 12 024 U  1');
    builder.addCardString('=008E080          052 *  2 056 *  6');
    builder.addCardString('=008E090     *  2 020 ---- 002 *  4');
    builder.addCardString('=008E100          020 H 12 050 T  1     SET BUFFER BITS IN SCR FOR NEW BUFFER');
    builder.addCardString('=008E110          020 H 13 052 T  1');
    builder.addCardString('=008E120          020 T  1 142 K 16');
    builder.addCardString('=008E130          010 *  5');
    builder.addCardString('=008E140     *  3 020 ---- 001 *  5');
    builder.addCardString('=008E150     *  4 024 U  5 052 *  3');
    builder.addCardString('=008E160          056 *  6 020 T  0');
    builder.addCardString('=008E170          024 I  1 050 T  0');
    builder.addCardString('=008E180          001 *  3 020 H 13');
    builder.addCardString('=008E190          050 H 10 020 K  4     BACKTRACK - STN ALREADY HAS LIMIT');
    builder.addCardString('=008E200          050 H 13 010 *  9');
    builder.addCardString('=008E210     *  5 020 K  4 050 ----     SET SUCCESSOR TO -1.');
    builder.addCardString('=008E220     *  6 020 H 13 050 ----     PUT NEW BUFFER ON END OF LIST FOR STN');
    builder.addCardString('=008E230     *  9 010 ----         ,    EXIT WITH BUFFER (OR-1) IN H13 AND AC');

    builder.addCardString('=011E000+    = 11 024 K  2 010 $  0     UNPACK (Q3) TO P4,P5,P6.');
    builder.addCardString('=011E010          052 *  9 020 P  4');
    builder.addCardString('=011E020          050 P  7 020 P  5');
    builder.addCardString('=011E030          050 P  8 020 P  6');
    builder.addCardString('=011E040          050 P  9 020 Q  3');
    builder.addCardString('=011E050          124 K 11 071    1');
    builder.addCardString('=011E060          072    1 050 P  4');
    builder.addCardString('=011E070          020 Q  3 124 K 12');
    builder.addCardString('=011E080          050 P  5 020 Q  3');
    builder.addCardString('=011E090          124 K 13 050 P  6');
    builder.addCardString('=011E100     *  9 010 ----         ,');

    // = 19
    builder.addCardString('=019E010     *  0 024 K  2 052 *  9');
    builder.addCardString('=019E020          060 T  0 056 *  1');
    builder.addCardString('=019E030          052 *  2 024 K  3');
    builder.addCardString('=019E040          052 *  5 020 Q  0');
    builder.addCardString('=019E050     *  1 001 E  0 004 ----');
    builder.addCardString('=019E060     *  2 050 ---- 056 *  3');
    builder.addCardString('=019E070          056 *  4 024 K  1');
    builder.addCardString('=019E080     *  3 056 *  5 020 ----');
    builder.addCardString('=019E090     *  4 050 Q  0 060 ----');
    builder.addCardString('=019E100     *  5 020 ---- 050 ----');
    builder.addCardString('=019E110     *  9 010 ----');
    builder.addCardString('=019E120     * 10 024 K  2 052 * 19');
    builder.addCardString('=019E130          060 T  0 052 * 11');
    builder.addCardString('=019E140          052 * 13 024 K  3');
    builder.addCardString('=019E150          052 * 14 004 Q  0');
    builder.addCardString('=019E160     * 11 020 ---- 124 K  5');
    builder.addCardString('=019E170          050 Q  0 056 * 12');
    builder.addCardString('=019E180          056 * 14 024 K  1');
    builder.addCardString('=019E190     * 12 056 * 13 020 ----');
    builder.addCardString('=019E200     * 13 050 ---- 020 ----');
    builder.addCardString('=019E210     * 14 050 ---- 060 ----');
    builder.addCardString('=019E220     * 19 010 ----');
    builder.addCardString('=019E230     * 92     Q  2     Q  2');
    builder.addCardString('=019E240     * 94     Q  4     Q  4');
    builder.addCardString('=019E250     * 96     Q  6     Q  6');
    builder.addCardString('=019E260     * 98     Q  8     Q  8');

    builder.addCardString('=012E000+    = 12 004 * 92 010 *  0     PUSH Q2-Q3 OPERANDS');

    builder.addCardString('=013E000     = 13 004 * 92 010 * 10     POP Q2-Q3 OPERANDS');

    builder.addCardString('=014E000     = 14 004 * 94 010 *  0     PUSH Q4-Q5 OPERATORS');

    builder.addCardString('=015E000     = 15 004 * 94 010 * 10     POP Q4-Q5 OPERATORS');

    builder.addCardString('=016E000     = 16 004 * 96 010 *  0     PUSH Q6-Q7 AUXILIARY');

    builder.addCardString('=017E000     = 17 004 * 96 010 * 10     POP G6-Q7 AUXILIARY');

    builder.addCardString('=018E000     = 18 004 * 98 010 *  0     PUSH Q8-Q9 CONTROLS');

    builder.addCardString('=019E000     = 19 004 * 98 010 * 10,     POP Q8-Q9 CONTROLS');

    builder.addCardString('=020E000+    = 20 010 $  0              EVALUATE DECIMAL EXPRESSION (UNSIGNED');
    builder.addCardString('=020E010          024 K  2 052 *  9');
    builder.addCardString('=020E020          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('=020E030          120    0 050 T  1     INITIALIZE');
    builder.addCardString('=020E040          020 K  4 050 P  6');
    builder.addCardString('=020E050          050 T  0 050 T  3');
    builder.addCardString('=020E060          020 P  1 010 *  2');
    builder.addCardString('=020E070     *  1 020 $  0 010 =  1     ADVANCE (DOESN\'T DISTURB T\'S)');
    builder.addCardString('=020E080     *  2 124 * 90 025 K 35');
    builder.addCardString('=020E090          001 *  5 050 P  6     JUMP IF NOT DIGIT');
    builder.addCardString('=020E100          025 K  1 001 *  1     LOOP IF \'0\'');
    builder.addCardString('=020E110          020 P  2 050 T  3     RECORD LOC\'N OF MOST SIGNIF DIGIT');
    builder.addCardString('=020E120     *  3 020 $  0 010 =  1     ADVANCE');
    builder.addCardString('=020E130          124 * 90 025 K 35');
    builder.addCardString('=020E140          001 *  5 050 T  2     JUMP IF NOT DIGIT');
    builder.addCardString('=020E150          020 P  2 025 T  3');
    builder.addCardString('=020E160          025 T  1 025 * 99');
    builder.addCardString('=020E170          006 *  4 020 P  6     JUMP IF ALREADY NINE SIGNIF. DIGITS');
    builder.addCardString('=020E180          073    2 024 P  6');
    builder.addCardString('=020E190          073    1 024 T  2');
    builder.addCardString('=020E200          050 P  6 010 *  3');
    builder.addCardString('=020E210     *  5 020 T  0 002 * 10     JUMP IF END OF FIELD');
    builder.addCardString('=020E220          020 P  1 124 A 27');
    builder.addCardString('=020E230          025 A 27 001 * 10     JUMP IF END OF FIELD');
    builder.addCardString('=020E240          020 P  2 050 T  0');
    builder.addCardString('=020E250          020 T  3 001 *  1     LOOP IF MSD NOT YET FOUND');
    builder.addCardString('=020E260          020 K  3 050 T  1     CHANGE T1');
    builder.addCardString('=020E270     *  4 010 *  3 021 T  2     LOOP //');
    builder.addCardString('=020E280          002 *  3 010 E  5     LOOP IF \'0\' ELSE TOO MANY SIGNIF. DIG');
    builder.addCardString('=020E290     * 10 020 P  6 001 E  6     ERROR IF NO DIGITS');
    builder.addCardString('=020E300          023 P  6 006 * 15     JUMP IF ZERO RESULT');
    builder.addCardString('=020E310     * 11 020 T  0 002 * 12     JUMP IF DECIMAL POINT');
    builder.addCardString('=020E320          020 P  2 025 K  3     SPECIAL FOR INTEGER');
    builder.addCardString('=020E330     * 12 025 T  3 025 T  1     (MUST USE RIGHT FIELD)');
    builder.addCardString('=020E340          073   31 050 P  4     SET XP OF RESULT');
    builder.addCardString('=020E350          020 * 99 025 P  2');
    builder.addCardString('=020E360          024 T  3 024 T  1');
    builder.addCardString('=020E370          001 * 14 024 J 11     JUMP IF DP OF RESULT OK');
    builder.addCardString('=020E380          052 * 13 004 P  6');
    builder.addCardString('=020E390     * 13 032 ---- 060 P  6');
    builder.addCardString('=020E400     * 14 020 P  4 125 K  4');
    builder.addCardString('=020E410     * 15 024 P  6 050 Q  3');
    builder.addCardString('=020E420     *  9 010 ----');
    builder.addCardString('=020E430     * 90 000,0000,001,0017     SPECIAL MASK FOR DIGIT AND VALUE');
    builder.addCardString('=020E440     * 99        9        9,');

    builder.addCardString('=021E000+    = 21 124 K  6 010 $  0     EVALUATE EXPRESSION');
    builder.addCardString('=021E010          024 K  2 050 H 18');
    builder.addCardString('=021E020          020 $  0 010 = 14');
    builder.addCardString('=021E030          020 H 18 050 Q  5     STACK EXIT IN OPERATORS');
    builder.addCardString('=021E040     *  1 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('=021E050     *  9 124 K 29 025 K 29');
    builder.addCardString('=021E060          001 *  2 010 $  1');
    builder.addCardString('=021E070          020 $  0 010 = 12');
    builder.addCardString('=021E080          120    0 050 Q  3');
    builder.addCardString('=021E090          020 $  0 010 = 14');
    builder.addCardString('=021E100          020 P  1 050 Q  5');
    builder.addCardString('=021E110     * 22 020 $  0 010 =  2     ADVANCE');
    builder.addCardString('=021E120     *  2 020 P  1 071   23');
    builder.addCardString('=021E130          001 *  8 071    3     TO *8 IF LEFT GROUPER');
    builder.addCardString('=021E140          001 *  3 071    1     TO *3 IF LETTER');
    builder.addCardString('=021E150          001 *  7 020 P  1     TO *7 IF DIGIT');
    builder.addCardString('=021E160          124 A 27 025 A 27');
    builder.addCardString('=021E170          002 *  7 020 P  1     TO *7 IF DEC PT');
    builder.addCardString('=021E180          124 A 68 025 A 68');
    builder.addCardString('=021E190          002 * 10 010 E  6     TO *10 IF CC = \'$\' ELSE MALFORMED');
    builder.addCardString('=021E200     *  3 020 P  2 024 K  2     LETTER');
    builder.addCardString('=021E210          052 *  4 010 $  1');
    builder.addCardString('=021E220     *  4 020 ---- 050 T  0     PICK UP LOOK AHEAD CHARACTER');
    builder.addCardString('=021E230          124 K 34 025 K 34');
    builder.addCardString('=021E235          002 * 13 020 P  1     JUMP IF LETTER (HENCE FUNCTION)');
    builder.addCardString('=021E240          052 *  5 052 *  6');
    builder.addCardString('=021E245     *  5 020 ---- 005 * 15     JUMP IF NOT SCALAR');
    builder.addCardString('=021E250          020 $  0 010 = 12     PUSH Q3');
    builder.addCardString('=021E255     *  6 020 ---- 050 Q  3');
    builder.addCardString('=021E260     * 15 010 * 29 020 T  0');
    builder.addCardString('=021E265          124 A 96 025 A 96');
    builder.addCardString('=021E270          006 * 16 020 T  0     JUMP IF ABS VAL BAR');
    builder.addCardString('=021E275          124 K 31 025 K 31');
    builder.addCardString('=021E280     * 16 002 * 28 020 P  1     JUMP IF \'(\' OR LEFT BRACKET');
    builder.addCardString('=021E285          050 H 27 020 K  4     ERROR--SET H27 AND H28 FOR E2');
    builder.addCardString('=021E290          050 H 28 010 E  2');
    builder.addCardString('=021E300     *  7 020 $  0 010 = 20     CONVERT NUMBER');
    builder.addCardString('=021E310          020 * 14 010 =  3     ELIMINATE SPACES AND CONTINUE AT *20');
    builder.addCardString('=021E330     *  8 020 $  0 010 = 14     STACK LEFT GROUPER');
    builder.addCardString('=021E340          020 P  1 050 Q  5');
    builder.addCardString('=021E350          020 *  1 010 =  2     ADVANCE TO NONSPACE AND CONTINUE AT *');
    builder.addCardString('=021E370     * 10 020 $  0 010 = 12     CONVERT $');
    builder.addCardString('=021E380          020 P  0 025 N  1');
    builder.addCardString('=021E390          002 * 11 004 P  0');
    builder.addCardString('=021E400          032 N  8 014 * 12');
    builder.addCardString('=021E410     * 11 004 P  0 032 N  7');
    builder.addCardString('=021E420     * 12 020 K 14 064 Q  3');
    builder.addCardString('=021E430     * 29 020 * 14 010 =  2     ADVANCE TO NONSPACE AND CONTINUE AT *');
    builder.addCardString('=021E440     * 13 020 $  0 010 = 24     FUNCTION');
    builder.addCardString('=021E450     * 14 020 $  0 010 = 26     EVALUATE GROUPED LIST');
    builder.addCardString('=021E615     * 20 020 P  1 124 K 30');
    builder.addCardString('=021E620          025 K 30 001 * 23');
    builder.addCardString('=021E625          020 Q  5 124 K 30');
    builder.addCardString('=021E630          025 K 30 001 * 21');

    builder.addCardString('=021E635          020 P  1 124 K 37');
    builder.addCardString('=021E640          050 T  0 020 Q  5');
    builder.addCardString('=021E645          124 K 37 025 T  0');
    builder.addCardString('=021E650          002 * 24 010 $  1');
    builder.addCardString('=021E655     * 21 020 $  0 010 = 14     STACK OPERATOR');
    builder.addCardString('=021E660          020 P  1 050 Q  5');
    builder.addCardString('=021E665          010 * 22');
    builder.addCardString('=021E670     * 23 020 Q  5 124 K 30');
    builder.addCardString('=021E675          025 K 30 001 * 26');
    builder.addCardString('=021E680     * 24 020 Q  5 052 * 25');
    builder.addCardString('=021E685          020 $  0 024 K 2');
    builder.addCardString('=021E690     * 25 010 ----              FIRE OPERATOR');
    builder.addCardString('=021E695          020 * 14 010 = 15     POP OPERATOR AND CONTINUE AT *20');
    builder.addCardString('=021E705     * 26 020 Q  5 124 K 31');
    builder.addCardString('=021E710          025 K 31 001 * 30     JUMP TO EXIT IF NOT LEFT GROUPER');
    builder.addCardString('=021E712          020 $  0 010 = 77     MATCH GROUPERS');
    builder.addCardString('=021E714          020 P  1 124 A 96');
    builder.addCardString('=021E716          025 A 96 001 * 29');
    builder.addCardString('=021E718          020 Q  3 125 K 12     TAKE ABS VAL');
    builder.addCardString('=021E720          050 Q  3 010 * 29');
    builder.addCardString('=021E724     * 30 020 Q  5 052 * 27');
    builder.addCardString('=021E726          020 $  0 010 = 15     POP Q5');
    builder.addCardString('=021E730     * 27 010 ----              EXIT');
    builder.addCardString('=021E735     * 28 020 $  0 010 = 14     SUBSCRIPT');
    builder.addCardString('=021E740          020 P  1 124 K 17');
    builder.addCardString('=021E745          024 * 90 050 Q  5');
    builder.addCardString('=021E750          020 $  0 010 =  1');
    builder.addCardString('=021E755          010 * 14');
    builder.addCardString('=021E760     * 90 000 = 74 440 ----,');

    builder.addCardString('=023E000+    = 23 010 $  0              EVALUATE CONDITION');
    builder.addCardString('=023E010          024 K  2 052 *  9');
    builder.addCardString('=023E020          120    0 055 *  4     SET SWITCH (ALWAYS SAVE FIRST RESULT)');
    builder.addCardString('=023E030     *  0 120    0 050 * 50     SET SIGNAL +');
    builder.addCardString('=023E040          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('=023E050     *  1 020 Q  3 050 * 51     SAVE IT');
    builder.addCardString('=023E060          020 $  0 010 = 13     POP Q3');
    builder.addCardString('=023E070          020 P  1 124 K 33');
    builder.addCardString('=023E080          025 K 33 001 E  6     MALFORMED IF NOT RELATION');
    builder.addCardString('=023E090          020 P  1 050 * 52     SAVE IT');
    builder.addCardString('=023E100          020 $  0 010 =  1     STEP ONE');
    builder.addCardString('=023E110          020 $  0 010 = 21     EVALUATE EXPRESSION');
    builder.addCardString('=023E120          020 * 51 050 H 21');
    builder.addCardString('=023E130          020 Q  3 050 H 22');
    builder.addCardString('=023E140          020 $  0 010 = 70     COMPARE');
    builder.addCardString('=023E150          124 * 52 025 K  1');
    builder.addCardString('=023E160          001 *  2 010 *  3');
    builder.addCardString('=023E170     *  2 020 K  4 050 * 50     SET - IF NOT MET');
    builder.addCardString('=023E180     *  3 020 P  1 124 K 33');
    builder.addCardString('=023E190          025 K 33 002 *  1     JUMP IF ANOTHER RELATION');
    builder.addCardString('=023E200          020 $  0 010 = 13     POP Q3');
    builder.addCardString('=023E210     *  4 020 3184 --- *  8     SWITCH');
    builder.addCardString('=023E220          050 * 53 010 $  1     STORE NEW RESULT');
    builder.addCardString('=023E230     *  8 020 P  1 124 A109');
    builder.addCardString('=023E240          025 A109 002 *  7     JUMP IF PERIOD');
    builder.addCardString('=023E245          020 $  0 010 = 79     VERIFY PRECEDING SPACE');
    builder.addCardString('=023E250          020 $  0 010 = 27     ACCUMULATE WORD');
    builder.addCardString('=023E260          025 W 14 050 T  0');
    builder.addCardString('=023E270          023 T  0 002 *  5     JUMP IF \'OR\'');
    builder.addCardString('=023E280          020 H 19 025 W 15');
    builder.addCardString('=023E290          050 T  0 023 T  0');
    builder.addCardString('=023E300          002 *  6 010 E  6     JUMP IF \'AND\' ELSE MALFORMED');
    builder.addCardString('=023E310     *  5 020 K 35 014 *  6     OR');
    builder.addCardString('=023E320     *  6 020 K 34 055 *  4     AND');
    builder.addCardString('=023E322          020 $  0 010 = 39     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('=023E324          010 *  0');
    builder.addCardString('=023E330     *  7 020 * 53 010 $  1');
    builder.addCardString('=023E340     *  9 010 ----              EXIT');
    builder.addCardString('=023E350     * 50 --- ---- --- ----     SIGNAL');
    builder.addCardString('=023E360     * 51 --- ---- --- ----     LEADING TERM');
    builder.addCardString('=023E370     * 52 --- ---- --- ----     RELATION');
    builder.addCardString('=023E380     * 53 --- ---- --- ----,    FINAL SIGNAL');

    builder.addCardString('=027E000+    = 27 010 $  0              ACCUMULATE LETTER CODES (6 MAX)');
    builder.addCardString('=027E010          024 K  2 052 *  9     RESULT IN ACC WITH SCAN ADVANCED');
    builder.addCardString('=027E020          120    0 050 H 19');
    builder.addCardString('=027E030     *  1 020 P  1 124 K 34');
    builder.addCardString('=027E040          025 K 34 005 *  3');
    builder.addCardString('=027E050          020 H 19 004 P  1');
    builder.addCardString('=027E060          077    6 050 H 19');
    builder.addCardString('=027E070          020 P  2 024 K  3');
    builder.addCardString('=027E080          054 P  2 052 *  2');
    builder.addCardString('=027E090     *  2 020 ---- 050 P  1');
    builder.addCardString('=027E100          020 H 19 025 K 12');
    builder.addCardString('=027E110     *  3 001 *  1 020 H 19     LEAVE RESULT IN ACC AND H19');
    builder.addCardString('=027E120     *  9 010 ----         ,');

    builder.addCardString('=028E000+    = 28 010 $  0              ERASE LEFT LINKED LIST A/C MQ');
    builder.addCardString('=028E010          024 K  2 052 *  9');
    builder.addCardString('=028E020          060 T  0 124 K  6');
    builder.addCardString('=028E030          050 T  0 010 $  1');
    builder.addCardString('=028E040     *  1 023 T  0 002 *  9');
    builder.addCardString('=028E050          020 T  0 052 *  2');
    builder.addCardString('=028E060          052 *  3 070   21');
    builder.addCardString('=028E070          004 Q  0 050 Q  0');
    builder.addCardString('=028E080     *  2 020 ---- 052 T  0');
    builder.addCardString('=028E090     *  3 060 ---- 010 *  1');
    builder.addCardString('=028E100     *  9 010 ----         ,');

    builder.addCardString('=029E000+    = 29 010 $  0              ERASE RIGHT LINKED LIST A/C MQ');
    builder.addCardString('=029E010          024 K  2 052 *  9');
    builder.addCardString('=029E020          060 T  0 124 K  5');
    builder.addCardString('=029E030          050 T  0 010 $  1');
    builder.addCardString('=029E040     *  1 023 T  0 002 *  9');
    builder.addCardString('=029E050          020 T  0 056 *  2');
    builder.addCardString('=029E060          056 *  3 004 Q  0');
    builder.addCardString('=029E070     *  2 050 Q  0 020 ----');
    builder.addCardString('=029E080     *  3 056 T  0 060 ----');
    builder.addCardString('=029E090          010 *  1');
    builder.addCardString('=029E100     *  9 010 ----         ,');

    builder.addCardString('                $             ,6460')

    builder.addCardString('=030E000+    = 30 010 $  0              CHECK RANGE AND PACK RESULT');
    builder.addCardString('=030E010          024 K  2 052 *  9');
    builder.addCardString('=030E015          023 P  6 006 *  3     CHK FOR ZERO');
    builder.addCardString('=030E020          020 P  4 005 *  1');
    builder.addCardString('=030E030          025 * 90 005 *  2');
    builder.addCardString('=030E040     *  1 010 E  1 024 * 91');
    builder.addCardString('=030E050          006 *  2 120    0');
    builder.addCardString('=030E060     *  2 014 *  3 020 P  4');
    builder.addCardString('=030E070          024 P  5 024 P  6');
    builder.addCardString('=030E080     *  3 125 K  4 050 Q  3');
    builder.addCardString('=030E090     *  9 010 ----');
    builder.addCardString('=030E100     * 90+         100    8');
    builder.addCardString('=030E110     * 91+          99    8,');

    builder.addCardString('=031E000+    = 31 010 $  0              ADD');
    builder.addCardString('=031E010          024 K  2 052 *  9');
    builder.addCardString('=031E020          020 $  0 010 = 11     UNPACK 2ND OPERAND');
    builder.addCardString('=031E030          020 *  1 010 = 13     POP Q3 AND MERGE WITH =32');

    builder.addCardString('=032E000     = 32 010 $  0              SUBTRACT');
    builder.addCardString('=032E010          024 K  2 052 *  9');
    builder.addCardString('=032E020          020 $  0 010 = 11     UNPACK 2ND OPERAND');
    builder.addCardString('=032E030          020 K 12 025 P  5     INVERT SIGN OF 2ND OPERAND');
    builder.addCardString('=032E040          050 P  5 010 $  1');
    builder.addCardString('=032E050     *  1 020 $  0 010 = 13     POP Q3');
    builder.addCardString('=032E060          023 P  6 002 *  9     DONE IF 2ND OPERAND IS ZERO');
    builder.addCardString('=032E070          023 Q  3 002 *  8     PACK UP IF 1ST OPERAND IS ZERO');
    builder.addCardString('=032E080          020 $  0 010 = 11     UNPACK 1ST OPERAND');
    builder.addCardString('=032E090          020 P  4 025 P  7');
    builder.addCardString('=032E100          001 *  2 025 K  1     TO *2 IF 2ND SFX IS GREATER');
    builder.addCardString('=032E110          002 *  3 020 P  6     TO    IF 1ST SFX IS GREATER');
    builder.addCardString('=032E120          025 P  9 002 *  3     TO    IF 1ST CD IS GREATER OR EQUAL');
    builder.addCardString('=032E130     *  2 020 P  4 004 P  7     INTERCHANGE OPERANDS');
    builder.addCardString('=032E140          050 P  7 060 P  4');
    builder.addCardString('=032E150          020 P  5 004 P  8');
    builder.addCardString('=032E160          050 P  8 060 P  5');
    builder.addCardString('=032E170          020 P  6 004 P  9');
    builder.addCardString('=032E180          050 P  9 060 P  6');
    builder.addCardString('=032E190     *  3 020 P  5 024 P  8');
    builder.addCardString('=032E200          071    9 002 *  4     TO *4 IF SIGNS ARE ALIKE');
    builder.addCardString('=032E210          021 P  9 050 P  9     ELSE COMPLEMENT CF OF SMALLER NUMBER');
    builder.addCardString('=032E220     *  4 020 P  4 025 P  7');
    builder.addCardString('=032E230          025 * 90 002 *  8     TO *8 IF SFX DIFF AS BIG AS 11');
    builder.addCardString('=032E240          024 * 90 072   10');
    builder.addCardString('=032E250          024 J 11 052 *  5');
    builder.addCardString('=032E260     *  5 004 ---- 060 T  0     SET DECIMAL SHIFTER');
    builder.addCardString('=032E270          020 P  9 077    1');
    builder.addCardString('=032E280          036 P  6 044 T  0     DEVELOP TWICE SUM IN MQ');
    builder.addCardString('=032E290          050 T  2 060 T  1     SAVE PIECES');
    builder.addCardString('=032E340     * 10 023 T  1 001 * 11');
    builder.addCardString('=032E350          023 T  2 001 * 11');
    builder.addCardString('=032E360          050 Q  3 010 *  9     SET ZERO RESULT AND EXIT');
    builder.addCardString('=032E370     * 11 020 T  1 025 * 91');
    builder.addCardString('=032E380          002 * 13 004 N  1');
    builder.addCardString('=032E390          032 T  2 044 T  0     SCALE UP ONE DIGIT');
    builder.addCardString('=032E400          060 T  3 004 N  1');
    builder.addCardString('=032E410          036 T  1 020 P  4');
    builder.addCardString('=032E420     * 12 025 K 14 050 P  4     ADJUST SFX');
    builder.addCardString('=032E430          060 T  3 025 * 91');
    builder.addCardString('=032E440          002 * 13 032 N  1');
    builder.addCardString('=032E450          020 P  4 010 * 12     SCALE UP AND GO TO *12');
    builder.addCardString('=032E452     * 13 060 T  3 025 * 92');
    builder.addCardString('=032E454          001 * 14 020 P  4');
    builder.addCardString('=032E456          024 K 14 050 P  4');
    builder.addCardString('=032E458          120    0 044 N  1');
    builder.addCardString('=032E460     * 14 060 T  3 024 K  1     ROUND');
    builder.addCardString('=032E465          072    1 050 P  6       AND SET CF OF RESULT');
    builder.addCardString('=032E470     *  8 020 $  0 010 = 30     PACK UP RESULT');
    builder.addCardString('=032E480     *  9 010 ----              EXIT');
    builder.addCardString('=032E490     * 90+          11    8');
    builder.addCardString('=032E500     * 91+   200000000   39');
    builder.addCardString('=032E510     * 92+  1999999999   39,');

    builder.addCardString('=033E000+    = 33 010 $  0              MULTIPLY');
    builder.addCardString('=033E010          024 K  2 052 *  9');
    builder.addCardString('=033E020          020 $  0 010 = 11');
    builder.addCardString('=033E030          020 $  0 010 = 13');
    builder.addCardString('=033E040          023 P  6 001 *  1');
    builder.addCardString('=033E050          050 Q  3 010 *  9');
    builder.addCardString('=033E060     *  1 023 Q  3 002 *  9');
    builder.addCardString('=033E070          020 $  0 010 = 11');
    builder.addCardString('=033E080          020 N  9 070    1');
    builder.addCardString('=033E090          004 P  9 036 P  6');
    builder.addCardString('=033E100          050 T  0 025 * 90');
    builder.addCardString('=033E110          001 *  3 025 N  0');
    builder.addCardString('=033E120          002 *  2 021 * 91');
    builder.addCardString('=033E130          064 T  1 001 *  3');
    builder.addCardString('=033E140     *  2 020 T  0 044 N  9');
    builder.addCardString('=033E150          060 P  6 020 P  4');
    builder.addCardString('=033E160          024 P  7 024 K 14');
    builder.addCardString('=033E170          050 P  4 010 *  6');
    builder.addCardString('=033E180     *  3 021 * 92 064 T  1');
    builder.addCardString('=033E190          004 T  1 001 *  4');
    builder.addCardString('=033E200          020 T  0 010 *  5');
    builder.addCardString('=033E210     *  4 020 T  0 025 N  0');
    builder.addCardString('=033E220     *  5 044 N  8 060 P  6');
    builder.addCardString('=033E230          020 P  4 024 P  7');
    builder.addCardString('=033E240          050 P  4 010 $  1');
    builder.addCardString('=033E250     *  6 020 P  5 024 P  8');
    builder.addCardString('=033E260          124 K 12 050 P  5');
    builder.addCardString('=033E270          020 $  0 010 = 30');
    builder.addCardString('=033E280     *  9 010 ----');
    builder.addCardString('=033E290     * 90+      181898   39');
    builder.addCardString('=033E300     * 91+517415400576   39');
    builder.addCardString('=033E310     * 92+   450000000   39,');

    builder.addCardString('=034E000+    = 34 010 $  0              DIVIDE');
    builder.addCardString('=034E010          024 K  2 052 *  9');
    builder.addCardString('=034E020          023 Q  3 002 E  3');
    builder.addCardString('=034E030          020 $  0 010 = 11');
    builder.addCardString('=034E040          020 $  0 010 = 13');
    builder.addCardString('=034E050          023 Q  3 002 *  9');
    builder.addCardString('=034E060          020 $  0 010 = 11');
    builder.addCardString('=034E070          020 N  8 050 T  0');
    builder.addCardString('=034E080          020 P  4 025 P  7');
    builder.addCardString('=034E090          050 P  4 020 P  6');
    builder.addCardString('=034E100          025 P  9 002 *  1');
    builder.addCardString('=034E110          020 N  9 050 T  0');
    builder.addCardString('=034E120          020 P  4 025 K 14');
    builder.addCardString('=034E130          050 P  4 010 $  1');
    builder.addCardString('=034E140     *  1 020 P  9 072    1');
    builder.addCardString('=034E150          004 P  6 036 T  0');
    builder.addCardString('=034E160          044 P  9 060 P  6');
    builder.addCardString('=034E170          020 P  5 024 P  8');
    builder.addCardString('=034E180          124 K 12 050 P  5');
    builder.addCardString('=034E190          020 $  0 010 = 30');
    builder.addCardString('=034E200     *  9 010 ----         ,');

    builder.addCardString('=035E000+    = 35 010 $  0              Y = A*B');
    builder.addCardString('=035E010          024 K  2 052 *  9');
    builder.addCardString('=035E020          120      050 * 81     SET FLAGS TO ZERO');
    builder.addCardString('=035E030          050 * 82 050 * 83');
    builder.addCardString('=035E090          020 Q  3 050 * 85     STORE B');
    builder.addCardString('=035E100          020 $  0 010 = 11     UNPACK B');
    builder.addCardString('=035E110          020 P  4 050 * 86     STORE PARTS IN *86,*87,*88');
    builder.addCardString('=035E120          020 P  5 050 * 87');
    builder.addCardString('=035E130          020 P  6 050 * 88');
    builder.addCardString('=035E140          020 $  0 010 = 13     POP B');
    builder.addCardString('=035E141          023 * 88 001 *  1     DOES B=0,');
    builder.addCardString('=035E142     *  6 020 N  8 024 * 81     IF YES, RESULT IS ONE PLUS SIGN');
    builder.addCardString('=035E143     * 16 050 Q  3 010 *  9     IN FLAG 1');
    builder.addCardString('=035E150     *  1 023 Q  3 001 *  2     IF A=0 AND B IS POSITIVE, RESULT IS');
    builder.addCardString('=035E160          023 * 87 002 *  9     ZERO. IF B IS NEGATIVE, ERROR.');
    builder.addCardString('=035E172          010 E 23');
    builder.addCardString('=035E180     *  2 020 Q  3 050 * 84     STORE A');
    builder.addCardString('=035E190          020 $  0 010 = 11     UNPACK A');
    builder.addCardString('=035E200          020 P  4 050 * 89     STORE PARTS IN *89,*90,*1');
    builder.addCardString('=035E210          020 P  5 050 * 90');
    builder.addCardString('=035E220          020 P  6 050 * 91');
    builder.addCardString('=035E230          020 * 85 050 Q  3');
    builder.addCardString('=035E240          020 $  0 010 F  6     FIND FP OF B');
    builder.addCardString('=035E250          023 Q  3 006 *  3     TRANSFER IF B IS AN INTEGER');
    builder.addCardString('=035E260          023 * 90 001 E 21     ERROR IF A IS NEGATIVE');
    builder.addCardString('=035E270          020 K 12 050 * 82     FLAG 2 IS 2*(-9) FOR B FRACTIONAL');
    builder.addCardString('=035E280     *  3 014 *  4 020 * 86');
    builder.addCardString('=035E290          072   31 050 T  0     IF SFB IS LESS THAN 9 COMPUTE AND');
    builder.addCardString('=035E300          020 I  8 025 T  0     STORE TRUE VALUE OF INTEGRAL B');
    builder.addCardString('=035E310          005 *  4 024 J 11     IN *80');
    builder.addCardString('=035E320          056 *  5 120');
    builder.addCardString('=035E330     *  5 004 * 88 044 ----     TEST UNITS POSITION FOR B ODD OR');
    builder.addCardString('=035E340          060 * 80 071   39     EVEN. (SHIFT TO SIGN BIT)');
    builder.addCardString('=035E350          006 *  4 020 * 90     IF B IS ODD STORE SIGN OF A');
    builder.addCardString('=035E360     *  4 050 * 81 020 * 84     IN FLAG 1');
    builder.addCardString('=035E370          125 K 12 050 * 84     STORE ABSOLUTE VALUE OF A');
    builder.addCardString('=035E380          025 N  8 050 T  1     IF IT EQUALS ONE, THEN RESULT');
    builder.addCardString('=035E390          023 T  1 002 *  6     IS PLUS OR MINUS ONE');
    builder.addCardString('=035E400          020 * 87 050 * 83     FLAG 3 EQUALS SIGN OF B');
    builder.addCardString('=035E410          020 * 85 125 K 12     STORE ABSOLUTE VALUE OF B');
    builder.addCardString('=035E420          050 * 85 023 * 82     IF FLAG 2 IS ZERO, B IS AN INTEGER');
    builder.addCardString('=035E430          002 *  7 020 * 85     TRANSFER');
    builder.addCardString('=035E440          025 * 93 050 T  0');
    builder.addCardString('=035E450          020 * 84 050 Q  3     STORE A IN Q3, THEN TEST');
    builder.addCardString('=035E460          023 T  0 001 *  8     IF B EQUALS 1/2');
    builder.addCardString('=035E470          020 $  0 010 F  0     COMPUTE SQUARE ROOT OF A');
    builder.addCardString('=035E480          023 * 83 002 *  9     IF FLAG 3 IS ZERO, EXIT');
    builder.addCardString('=035E490          020 I  1 050 * 80     TRANSFER TO INTEGER ARITHMETIC TO');
    builder.addCardString('=035E502          050 * 87 020 Q  3     COMPUTE RECIPROCAL OF SQUARE ROOT');
    builder.addCardString('=035E504          050 * 84 010 * 29');
    builder.addCardString('=035E530     *  8 020 $  0 010 F  1     COMPUTE E*(B.LOG(A)) FOR B');
    builder.addCardString('=035E540          020 $  0 010 = 11     FRACTIONAL OR INTEGER GREATER THAN 9');
    builder.addCardString('=035E550          020 P  5 024 * 87');
    builder.addCardString('=035E560          124 K 12 025 I  1     TEST SIGN FOR B.LOG(A), IF NEGATIVE');

    builder.addCardString('=035E570          001 * 26 020 P  4     TEST SF FOR RESULT');
    builder.addCardString('=035E580          024 * 86 072   31     IF SF GREATER THAN 2, E*(-B.LOG(A))=0');
    builder.addCardString('=035E590          025 I  3 006 * 23');
    builder.addCardString('=035E600     * 26 020 $  0 010 = 12');
    builder.addCardString('=035E610          020 * 85 024 * 87');
    builder.addCardString('=035E620          050 Q  3 010 $  1');
    builder.addCardString('=035E630          020 $  0 010 = 33     MULTIPLY B.LOG(A)');
    builder.addCardString('=035E680          020 $  0 010 F  2     COMPUTE E* (B(LOG(A))');
    builder.addCardString('=035E690     * 20 020 Q  3 014 *  6     TRANSFER TO ADD FLAG 1');
    builder.addCardString('=035E700     *  7 020 * 91 025 N  8     B IS AN INTEGER, TEST A');
    builder.addCardString('=035E710          025 I  1 002 * 14     IF A IS NOT A POWER OF 10, TRANSFER');
    builder.addCardString('=035E720          022 * 86 025 K 14     IF ABSOLUTE VALUE OF SFB IS');
    builder.addCardString('=035E730          025 K 14 005 * 15     GREATER THAN ONE, TEST SIGN FOR');
    builder.addCardString('=035E740          020 * 87 024 I  1     SF FOR RESULT, + IS OVERFLOW,');
    builder.addCardString('=035E745          071   49 032 * 89     - IS UNDERFLOW');
    builder.addCardString('=035E750     * 23 002 E  1 120');
    builder.addCardString('=035E755     * 15 010 * 16 004 * 80');
    builder.addCardString('=035E760          023 * 87 002 * 18     ATTACH SIGN TO B');
    builder.addCardString('=035E765          061 * 80 004 * 80     B. SFA');
    builder.addCardString('=035E770     * 18 032 * 89 076    0     SHIFT SIGN BIT');
    builder.addCardString('=035E771          001 * 25 025 I  1     TEST FOR NON-ZERO BIT IN ACCUMULATOR');
    builder.addCardString('=035E772          002 E  1 010 * 24     (IS SF MAGNITUDE GREATER THAN 511)');
    builder.addCardString('=035E773     * 25 024 I  1 005 * 23');
    builder.addCardString('=035E775     * 24 060 P  4 020 * 81');
    builder.addCardString('=035E780          050 P  5 020 * 91');
    builder.addCardString('=035E785          050 P  6 010 * 17');
    builder.addCardString('=035E790     * 17 020 $  0 010 = 30     PACK');
    builder.addCardString('=035E795     *  9 010 ----              EXIT');
    builder.addCardString('=035E800     * 14 020 * 84 050 Q  3     SET Q3 EQUAL TO ABSOLUTE VALUE OF A');
    builder.addCardString('=035E810          020 K 14 025 * 86     IF B IS GREATER THAN 29, TRANSFER TO');
    builder.addCardString('=035E812          001 *  8 020 * 80     COMPUTE E*(B.LOG(A))');
    builder.addCardString('=035E814          025 * 94 002 *  8');
    builder.addCardString('=035E816     * 29 004 N  8 060 * 88     INITIALIZE PRODUCT');
    builder.addCardString('=035E817          023 * 87 002 * 27');
    builder.addCardString('=035E818          060 Q  3 010 $  1     SET Q3=1 FOR DIVISION');
    builder.addCardString('=035E820          020 $  0 010 = 12     PUSH');
    builder.addCardString('=035E822          020 * 84 050 Q  3     Q3 = A');
    builder.addCardString('=035E826          020 $  0 010 = 34     IF B NEGATIVE, COMPUTE 1/A');
    builder.addCardString('=035E828     * 27 020 Q  3 050 * 91     STORE MULTIPLIER');
    builder.addCardString('=035E830          020 * 80 072    1     TEST SUCCESSIVE DIGITS OF B, IF ONE');
    builder.addCardString('=035E832          050 * 80 061 T  0     MULTIPLY CURRENT PRODUCT BY CURRENT');
    builder.addCardString('=035E834          002 * 28 010 $  1     POWER OF A*N OR (1/A)*N');
    builder.addCardString('=035E836          020 $  0 010 = 12     PUSH A*N');
    builder.addCardString('=035E838          020 * 88 050 Q  3');
    builder.addCardString('=035E840          020 $  0 010 = 33     MULTIPLY');
    builder.addCardString('=035E842          020 Q  3 050 * 88');
    builder.addCardString('=035E844     * 28 023 * 80 002 * 20     IF B=0, DONE, OTHERWISE');
    builder.addCardString('=035E846          020 * 91 050 Q  3     COMPUTE NEXT POWER');
    builder.addCardString('=035E848          020 $  0 010 = 12     PUSH A*N');
    builder.addCardString('=035E850          020 $  0 010 = 33     COMPUTE A*(2N)');
    builder.addCardString('=035E852          010 * 27');
    builder.addCardString('=035E870     * 80                       B IF IT IS AN INTEGER');
    builder.addCardString('=035E875     * 81                       FLAG 1');
    builder.addCardString('=035E880     * 82                       FLAG 2');
    builder.addCardString('=035E885     * 83                       FLAG 3');

    builder.addCardString('=035E890     * 84                       A PACKED -- THEN ABSOLUTE A PACKED');
    builder.addCardString('=035E895     * 85                       B PACKED -- THEN ABSOLUTE B PACKED');
    builder.addCardString('=035E900     * 86                       SFX B');
    builder.addCardString('=035E905     * 87                       SIGN B');
    builder.addCardString('=035E910     * 88                       COEF B, REPLACED BY 10*8 IN * 29 +2');
    builder.addCardString('=035E915     * 89                       SFX A');
    builder.addCardString('=035E920     * 90                       SIGN A');
    builder.addCardString('=035E925     * 91                       COEF A, REPLACED BY A*N IN * 27');
    builder.addCardString('=035E935     * 93 077,6356,326,2400     1/2(10*8)');
    builder.addCardString('=035E940     * 94                30,');

    builder.addCardString('=036E000+    = 36 010 $  0              CONVERT H20 FOR OUTPUT FROM S');
    builder.addCardString('=036E010          024 K  2 052 *  1       020 $  0 010 = 36');
    builder.addCardString('=036E020          024 K  2 052 *  9              K        N');
    builder.addCardString('=036E030     *  1 020 ---- 024 * 90     WHERE K=OPTION AND N=NBR OF DIGITS');
    builder.addCardString('=036E040          052 * 10 124 K  5     K=1 SKIP LOADING ZEROS');
    builder.addCardString('=036E050          025 I  1 050 T  0     K=2 SPACE FOR LEADING ZEROES');
    builder.addCardString('=036E060          120    0 050 *  3     K=3 FORCE LEADING ZEROES');
    builder.addCardString('=036E070     * 10 010 ----              K=4 FORCE LEADING, SKIP TRAILING ZE');
    builder.addCardString('=036E080     * 11 020 * 91 014 *  2');
    builder.addCardString('=036E090     * 12 020 * 92 014 *  2');
    builder.addCardString('=036E100     * 13 020 *  6 014 *  2');
    builder.addCardString('=036E110     * 14 020 * 94 050 *  3');
    builder.addCardString('=036E120     *  2 020 *  6 050 *  5');
    builder.addCardString('=036E130     *  3 --- ---- --- ----');
    builder.addCardString('=036E140          020 T  0 024 J 11');
    builder.addCardString('=036E150          056 *  4 120    0');
    builder.addCardString('=036E160     *  4 004 H 20 044 ----');
    builder.addCardString('=036E170          050 H 20 063 T  1');
    builder.addCardString('=036E180          002 *  5 020 *  6');
    builder.addCardString('=036E190          050 *  5 010 * 20');
    builder.addCardString('=036E200     *  5 --- ---- --- ----');
    builder.addCardString('=036E210     *  6 004 A 48 010 * 20');
    builder.addCardString('=036E220     *  7 004 A 14 010 * 20');
    builder.addCardString('=036E230     * 20 020 P 12 024 K  3');
    builder.addCardString('=036E240          050 P 12 056 * 21');
    builder.addCardString('=036E250     * 21 060 P 11 050 ----');
    builder.addCardString('=036E260     * 22 020 T  0 025 I  1');
    builder.addCardString('=036E270          050 T  0 002 *  3');
    builder.addCardString('=036E280     *  9 010 ----              EXIT');
    builder.addCardString('=036E290     * 90     * 10');
    builder.addCardString('=036E300     * 91 023 T  0 001 * 22');
    builder.addCardString('=036E310     * 92 023 T  0 001 *  7');
    builder.addCardString('=036E320     * 94 023 H 20 002 *  9,');

    builder.addCardString('=037E000+    = 37 024 K  2 010 $  0     SIMPLE DIRECT TESTS');
    builder.addCardString('=037E010          052 *  9 020 Q  9');
    builder.addCardString('=037E020          002 E  9 010 *  1     ERROR IF INDIRECT, JUMP INTO =38');

    builder.addCardString('=038E000     = 38 024 K  2 010 $  0     SIMPLE INDIRECT TESTS');
    builder.addCardString('=038E010          052 *  9 020 Q  9');
    builder.addCardString('=038E020          001 E 10 010 *  1     ERROR IF DIRECT');
    builder.addCardString('=038E030     *  1 020 $  0 010 =  3     ELIMINATE SPACES');
    builder.addCardString('=038E040          124 K 19 025 K 19');
    builder.addCardString('=038E050     *  9 002 ---- 010 E  6,    EXIT IF TERMINAL ELSE MALFORMED');

    builder.addCardString('=039E000+    = 39 050 T  0 010 $  0     VERIFY SPACE AND ADVANCE TO NONSPACE');
    builder.addCardString('=039E010          020 P  1 124 A 14');
    builder.addCardString('=039E020          025 A 14 001 E  6     ERROR IF NOT SPACE');
    builder.addCardString('=039E030          020 T  0 010 =  2,    WADE INTO ADVANCE TO NONSPACE');

    builder.addCardString('=040E000+    = 40 010 $  0              POSITIVE INTEGER TEST ON (Q3)');
    builder.addCardString('=040E010          024 K  2 052 *  9');
    builder.addCardString('=040E020          020 $  0 010 = 11');
    builder.addCardString('=040E030          021 P  6 001 *  1');
    builder.addCardString('=040E040     *  2 020 K  4 010 *  9');
    builder.addCardString('=040E050     *  1 021 P  5 001 *  9');
    builder.addCardString('=040E060          020 P  4 001 *  9');
    builder.addCardString('=040E070          025 J 18 002 *  2     (J18) = 9X2*(-8)');
    builder.addCardString('=040E080          021 P  4 072   10');
    builder.addCardString('=040E090          024 J 14 052 *  3');
    builder.addCardString('=040E100          120    0 004 P  6');
    builder.addCardString('=040E110     *  3 044 ---- 025 K  1');
    builder.addCardString('=040E120          002 *  2 120    0');
    builder.addCardString('=040E130     *  9 010 ----         ,    EXIT + OR - A/C TEST');

    builder.addCardString('=041E000+    = 41 010 $  0              SUBSCRIPT RANGE TEST AND REPL (Q3)');
    builder.addCardString('=041E010          024 K  2 052 *  9');
    builder.addCardString('=041E020          023 Q  3 002 *  9');
    builder.addCardString('=041E030          020 $  0 010 = 11');
    builder.addCardString('=041E040          023 P  5 001 E  4');
    builder.addCardString('=041E050          020 P  4 001 E  4');
    builder.addCardString('=041E060          025 K 14 002 *  1');
    builder.addCardString('=041E070          020 N  8 014 *  2');
    builder.addCardString('=041E080     *  1 025 K 14 002 E  4');
    builder.addCardString('=041E090     *  2 020 N  7 050 T  0');
    builder.addCardString('=041E100          120    0 004 P  6');
    builder.addCardString('=041E110          044 T  0 025 K  1');
    builder.addCardString('=041E120          002 E  4 060 T  0');
    builder.addCardString('=041E130     *  3 071   12 050 Q  3');
    builder.addCardString('=041E140     *  9 010 ----         ,');

    builder.addCardString('=042E000+    = 42 130 = 42 134 = 42');

    builder.addCardString('=043E000+    = 43 130 = 43 134 = 43');

    builder.addCardString('=044E000+    = 44 010 $  0              PART NUMBER TEST ON (Q3)');
    builder.addCardString('=044E010          024 K  2 052 *  9');
    builder.addCardString('=044E020          020 $  0 010 = 40');
    builder.addCardString('=044E030     *  9 002 ---- 010 E 18,');

    builder.addCardString('=045E000+    = 45 010 $  0              STEP NUMBER TEST ON (Q3)');
    builder.addCardString('=045E010          024 K  2 052 *  9');
    builder.addCardString('=045E020          023 Q  3 002 E 13');
    builder.addCardString('=045E030          020 Q  3 071    1');
    builder.addCardString('=045E040          001 E 13 071    8');
    builder.addCardString('=045E050          001 E 13 020 Q  3');
    builder.addCardString('=045E060          025 J 18 002 E 13');
    builder.addCardString('=045E070     *  9 010 ----         ,');

    builder.addCardString('=046E000+    = 46 010 $  0              FORM NUMBER TEST ON (Q3)');
    builder.addCardString('=046E010          024 K  2 052 *  9');
    builder.addCardString('=046E020          020 $  0 010 = 40');
    builder.addCardString('=046E030     *  9 002 ---- 010 E 12,');

    builder.addCardString('=047E000+    = 47 010 $  0              PUT STN AT END OF STATE IN $1.');
    builder.addCardString('=047E010          024 K  2 052 *  6');
    builder.addCardString('=047E020          024 K  2 052 *  9');
    builder.addCardString('=047E030          020 H 12 024 U  0');
    builder.addCardString('=047E040          052 *  1 056 *  6');
    builder.addCardString('=047E050          020 H 12 024 U  3');
    builder.addCardString('=047E060          052 *  4 056 *  5');
    builder.addCardString('=047E070     *  1 020 ---- 056 *  2');
    builder.addCardString('=047E080     *  2 056 *  4 020 ----');
    builder.addCardString('=047E090          050 T  0 025 H 12');
    builder.addCardString('=047E100          005 *  3 025 K  1');
    builder.addCardString('=047E110     *  3 001 *  4 020 T  0');
    builder.addCardString('=047E120          024 U  3 014 *  1');
    builder.addCardString('=047E130     *  4 020 ---- 050 ----     CLOSE GAP IN OLD STATE LIST');
    builder.addCardString('=047E140     *  5 020 K  4 050 ----     SET NULL SUCCESSOR FOR STN');
    builder.addCardString('=047E150     *  6 020 ---- 050 ----     SET NEW STATE FOR STN');
    builder.addCardString('=047E160     *  7 052 *  8 056 * 10');
    builder.addCardString('=047E170     *  8 020 ---- 001 * 10');
    builder.addCardString('=047E180          024 U  3 010 *  7');
    builder.addCardString('=047E190     * 10 020 H 12 050 ----     ADD STN TO END OF NEW STATE LIST');
    builder.addCardString('=047E200     *  9 010 ----         ,');

    builder.addCardString('=048E000+    = 48 010 $  0              \'TO\' ROUTINE');
    builder.addCardString('=048E010          024 K  2 052 *  9');
    builder.addCardString('=048E030          020 H  9 124 K 17');
    builder.addCardString('=048E040          142 K 35 050 H 12     ERASE SIGNAL');
    builder.addCardString('=048E050          071   21 052 H 12     SET STN CONTEXT');
    builder.addCardString('=048E060          020 $  0 010 = 58     RELEASE CURRENT BUFFER');
    builder.addCardString('=048E070          001 *  1 020 H 12');
    builder.addCardString('=048E080          024 K 24 142 K 24     TL NEXT BUFFER TO STN');
    builder.addCardString('=048E090     *  1 020 H 12 024 U  0');
    builder.addCardString('=048E100          052 *  2 020 K  5');
    builder.addCardString('=048E110     *  2 124 ---- 025 * 90');
    builder.addCardString('=048E120          001 *  8 025 I  1');
    builder.addCardString('=048E130          001 *  3 025 I  7     TO *3 IF STATE=L6');
    builder.addCardString('=048E140          001 *  8 025 I  1');
    builder.addCardString('=048E150          001 *  5 010 *  8');
    builder.addCardString('=048E160     *  3 020 H 13 024 U  5     STATE=L6');
    builder.addCardString('=048E170          052 *  4 010 $  1');
    builder.addCardString('=048E180     *  4 020 ---- 002 *  8');
    builder.addCardString('=048E190          020 $  0 010 = 47     ON LAST BUFFER - SWITCH TO USER');
    builder.addCardString('=048E200              L 10     L 10');
    builder.addCardString('=048E210          020 H 12 024 K 36');
    builder.addCardString('=048E220          142 K 36 010 *  8     CL+SU THEN EXIT');
    builder.addCardString('=048E230     *  5 020 J 17 050 T  0     STATE = L14');
    builder.addCardString('=048E240          020 H 12 024 U  1');
    builder.addCardString('=048E250          052 *  7 010 *  7');
    builder.addCardString('=048E260     *  6 024 U  5 052 *  7');
    builder.addCardString('=048E270          020 T  0 025 I  1');
    builder.addCardString('=048E280          050 T  0 001 *  8     EXIT IF STILL CHOKING');
    builder.addCardString('=048E290     *  7 020 ---- 002 *  6     LOOP IF BUFFER TO COUNT');
    builder.addCardString('=048E300          020 $  0 010 = 47     ELSE UNCHOKE');
    builder.addCardString('=048E310              L 11     L 11');
    builder.addCardString('=048E315     *  8 020 L 13 050 H 12     RESET H12 TO STN IN L13');
    builder.addCardString('=048E320     *  9 010 ----              EXIT');
    builder.addCardString('=048E330     * 90              L  6,');

    builder.addCardString('=049E000+    = 49 024 K  2 010 $  0     UPDATE ACTIVITY OF STN');
    builder.addCardString('=049E010          052 *  9 020 H 12');
    builder.addCardString('=049E020          024 U  4 052 *  1');
    builder.addCardString('=049E030          020 $  0 010 =  0');
    builder.addCardString('=049E040     *  1 050 ---- 010 $  1');
    builder.addCardString('=049E050     *  9 010 ----         ,');

    builder.addCardString('=050E000+    = 50 010 $  0              FIND PART (P20)');
    builder.addCardString('=050E010          024 K  2 052 *  9');
    builder.addCardString('=050E020          020 J 10 050 H 22');
    builder.addCardString('=050E030          020 Q 10 050 H 23');
    builder.addCardString('=050E040     *  1 020 H 22 050 H 21');
    builder.addCardString('=050E050          020 H 23 050 H 22');
    builder.addCardString('=050E060          056 *  2 024 K  1');
    builder.addCardString('=050E070     *  2 056 *  3 020 ----');
    builder.addCardString('=050E080          050 H 23 001 *  9     EXIT MINUS IF CAN\'T FIND');
    builder.addCardString('=050E090     *  3 020 P 20 025 ----');
    builder.addCardString('=050E100          001 *  1 025 K  1');
    builder.addCardString('=050E110          002 *  1 020 H 23     OUTPUT LOCATOR IN ACC');
    builder.addCardString('=050E120     *  9 010 ----         ,    H21, H22, H23 HOLD USEFUL POINTERS');

    builder.addCardString('=051E000+    = 51 010 $  0              FIND STEP (P21)');
    builder.addCardString('=051E010          024 K  2 052 *  9');
    builder.addCardString('=051E020          020 P 21 070   31');
    builder.addCardString('=051E030          124 K  5 050 H 21');
    builder.addCardString('=051E040          020 J 14 025 H 21');
    builder.addCardString('=051E050          056 *  4 010 $  1');
    builder.addCardString('=051E060          020 J 10 050 H 22');
    builder.addCardString('=051E070          020 Q 10 050 H 23');
    builder.addCardString('=051E080     *  1 020 H 22 050 H 21');
    builder.addCardString('=051E090          020 H 23 050 H 22');
    builder.addCardString('=051E100          056 *  2 024 K  1');
    builder.addCardString('=051E110     *  2 056 *  3 020 ----');
    builder.addCardString('=051E120     *  8 050 H 23 001 *  9     EXIT MINUS IF CAN\'T FIND');
    builder.addCardString('=051E130     *  3 020 P 21 025 ----');
    builder.addCardString('=051E140     *  4 001 *  8 025 ----     EXIT MINUS IF CAN\'T FIND AND LEAVE H2');
    builder.addCardString('=051E150          002 *  1 020 H 22');
    builder.addCardString('=051E160          071   21 124 K  6');
    builder.addCardString('=051E170          050 H 25 020 H 23');
    builder.addCardString('=051E180          050 H 26 010 $  1');
    builder.addCardString('=051E190     *  5 020 H 25 050 H 24');
    builder.addCardString('=051E200          020 H 26 050 H 25');
    builder.addCardString('=051E210          052 *  6 024 K  2');
    builder.addCardString('=051E220          052 *  7 010 $  1');
    builder.addCardString('=051E230     *  6 020 ---- 050 H 26');
    builder.addCardString('=051E240          001 *  9 020 P 21     EXIT MINUS IF CAN\'T FIND');
    builder.addCardString('=051E250     *  7 025 ---- 001 *  9     EXIT MINUS IF CAN\'T FIND');
    builder.addCardString('=051E260          025 K  1 002 *  5');
    builder.addCardString('=051E270          020 H 26 010 $  1     OUTPUT LOCATOR IN ACC');
    builder.addCardString('=051E280     *  9 010 ----         ,    H21-H26 HOLD USEFUL INFO ON EXIT');

    builder.addCardString('=052E000+    = 52 010 $  0              FIND FORM (P22)');
    builder.addCardString('=052E010          024 K  2 052 *  9');
    builder.addCardString('=052E020          020 J 10 050 H 25');
    builder.addCardString('=052E030          020 Q 11 050 H 26');
    builder.addCardString('=052E040     *  1 020 H 25 050 H 24');
    builder.addCardString('=052E050          020 H 26 050 H 25');
    builder.addCardString('=052E060          052 *  2 024 K  2');
    builder.addCardString('=052E070          052 *  3 010 $  1');
    builder.addCardString('=052E080     *  2 020 ---- 050 H 26');
    builder.addCardString('=052E090          001 *  9 020 P 22     EXIT MINUS IF CAN\'T FIND');
    builder.addCardString('=052E100     *  3 025 ---- 001 *  9');
    builder.addCardString('=052E110          025 K  1 002 *  1');
    builder.addCardString('=052E120          020 H 26 010 $  1     OUTPUT LOCATOR IN ACC AND H26');
    builder.addCardString('=052E130     *  9 010 ----         ,    H24 LOCATES PREDECESSOR ON EXIT');

    builder.addCardString('=053E000+    = 53 010 $  0              KICK OUT CURRENT PROGRAM (IF ANY)');
    builder.addCardString('=053E010          024 K  2 052 *  9');
    builder.addCardString('=053E020          020 H  7 001 *  9');
    builder.addCardString('=053E030          024 U  2 052 *  1');
    builder.addCardString('=053E032          020 $  0 010 =  0     ACCUMULATE TIME WORKED');
    builder.addCardString('=053E034          025 H  8 024 J 23');
    builder.addCardString('=053E036          050 J 23 010 $  1');
    builder.addCardString('=053E040     *  1 020 ---- 055 * 90');
    builder.addCardString('=053E050          004 * 90 111,6000     (FOR 1024 WORD USER BLOCK)');
    builder.addCardString('=053E060          020 K  4 050 H  7');
    builder.addCardString('=053E070     *  9 010 ----');
    builder.addCardString('=053E080     * 90 000,0000,000,1777,    CONSTRUCTED DRUM CONTROL WORD');

    builder.addCardString('=054E000+    = 54 010 $  0              BRING IN PROGRAM (IF ANY) A/C STN');
    builder.addCardString('=054E010          024 K  2 052 *  9');
    builder.addCardString('=054E020          020 $  0 010 = 53     KICK OUT CURRENT PROGRAM IF ANY');
    builder.addCardString('=054E030          020 H 12 024 U  2');
    builder.addCardString('=054E040          052 *  1 010 $  1');
    builder.addCardString('=054E050     *  1 020 ---- 001 *  9');
    builder.addCardString('=054E060          055 * 90 010 $  1');
    builder.addCardString('=054E070          004 * 90 110,6000     (FOR 1024 WORD USER BLOCK)');
    builder.addCardString('=054E080          020 H 12 050 H  7');
    builder.addCardString('=054E090          020 $  0 010 = 49     UPDATE STATION ACTIVITY');
    builder.addCardString('=054E100          050 H  8 010 $  1     SET START TIME OF CURRENT SHOT');
    builder.addCardString('=054E110     *  9 010 ----');
    builder.addCardString('=054E120     * 90 000,0000,000,1777,    CONSTRUCTED DRUM CONTROL WORD');

    builder.addCardString('=055E000+    = 55 010 $  0              SWITCH TO USER (CL+SU)');
    builder.addCardString('=055E010          024 K  2 052 *  9     (ASSUMES SUBSTATE OF L10 ALREADY IN P');
    builder.addCardString('=055E015          020 K  4 050 P 16     CLEAR P16 BEFORE SWITCHING');
    builder.addCardString('=055E020          050 P 15 020 H 12     ALSO CLEAR P15');
    builder.addCardString('=055E030          024 U  1 052 *  1');
    builder.addCardString('=055E032          020 Q  8 001 *  1     JUMP IF Q8 MINUS');
    builder.addCardString('=055E034          050 Q 12 020 Q  9     HIDE 08-09');
    builder.addCardString('=055E036          050 Q 13 020 K  4');
    builder.addCardString('=055E038          050 Q  8 050 Q  9');
    builder.addCardString('=055E040     *  1 020 ---- 001 *  3');
    builder.addCardString('=055E050          024 U  5 052 *  2');
    builder.addCardString('=055E060     *  2 020 ---- 001 *  4');
    builder.addCardString('=055E070          020 $  0 010 = 47     CHANGE STATE TO L6 WHILE DRAINING');
    builder.addCardString('=055E080              L  6     L  6');
    builder.addCardString('=055E090          010 *  9');
    builder.addCardString('=055E100     *  3 020 $  0 010 =  8     ASSIGN INPUT BUFFER');
    builder.addCardString('=055E110          002 *  4 010 $  1     TO *4 IF ASSIGNED');
    builder.addCardString('=055E120          020 $  0 010 = 47     CHANGE STATE TO L7 IF NO BUFFER AVAIL');
    builder.addCardString('=055E130              L  7     L  7');
    builder.addCardString('=055E140          010 *  9');
    builder.addCardString('=055E150     *  4 020 H 12 024 K 36     OK TO SWITCH');
    builder.addCardString('=055E160          142 K 36 010 $  1     CL+SU');
    builder.addCardString('=055E170          020 $  0 010 = 47     CHANGE STATE TO L10 GREEN');
    builder.addCardString('=055E180              L 10     L 10');
    builder.addCardString('=055E190     *  9 010 ----         ,');

    builder.addCardString('=056E000+    = 56 010 $  0              ERASE STEP A/C H21-H26');
    builder.addCardString('=056E010          024 K  2 052 *  9');
    builder.addCardString('=056E020          020 $  0 010 = 57     STEP LOOKS JUST LIKE FORM HERE');
    builder.addCardString('=056E030          020 H 22 056 *  1');
    builder.addCardString('=056E040     *  1 020 K  6 124 ----');
    builder.addCardString('=056E050          025 K  1 002 *  9     EXIT UNLESS PART NOW EMPTY');
    builder.addCardString('=056E060          020 H 21 056 *  2');
    builder.addCardString('=056E070     *  2 020 H 23 056 ----');
    builder.addCardString('=056E080          020 H 22 071   61');
    builder.addCardString('=056E090          020 $  0 010 = 28     ERASE LEFT LINKED LIST (ONE ITEM HERE');
    builder.addCardString('=056E100     *  9 010 ----         ,');

    builder.addCardString('=057E000+    = 57 010 $  0              ERASE FORM A/C H24-H26');
    builder.addCardString('=057E010          024 K  2 052 *  9');
    builder.addCardString('=057E020          020 H 24 052 *  1');
    builder.addCardString('=057E030          020 H 26 010 $  1');
    builder.addCardString('=057E040     *  1 052 ---- 010 $  1');
    builder.addCardString('=057E050          020 H 25 071   19');
    builder.addCardString('=057E060          020 $  0 010 = 29     ERASE RIGHT LINKED LIST A/C MQ');
    builder.addCardString('=057E070     *  9 010 ----         ,');

    builder.addCardString('=058E000+    = 58 010 $  0              RELEASE CURRENT BUFFER FOR STN');
    builder.addCardString('=058E010          024 K  2 052 *  9       SERVICES L7 WITH FREE BUFFER AND');
    builder.addCardString('=058E020          020 H 12 050 * 92       LEAVES NEXT BUFFER OR -1 IN ACC AND');
    builder.addCardString('=058E030          024 U  1 052 *  1');
    builder.addCardString('=058E040          056 *  8 010 $  1');
    builder.addCardString('=058E050     *  1 020 ---- 050 H 13');
    builder.addCardString('=058E055          002 $  1 010 *  9');
    builder.addCardString('=058E060          024 U  5 056 *  2');
    builder.addCardString('=058E070     *  2 056 *  3 004 ----     PICK UP NEXT BUFFER (IF ANY)');
    builder.addCardString('=058E080     *  3 020 K  4 050 ----     SET SUCCESSOR OF OLD BUFFER TO -1');
    builder.addCardString('=058E090          060 * 93 050 T  0');
    builder.addCardString('=058E100          020 H 12 056 T  0');
    builder.addCardString('=058E110          020 T  0 142 K 16     SET BUFFER BITS IN SCR FOR NEW BUFFER');
    builder.addCardString('=058E120          020 * 91 010 $  1     FIND TAIL OF H10 LIST');
    builder.addCardString('=058E130     *  4 052 *  5 056 *  6');
    builder.addCardString('=058E140     *  5 020 ---- 001 *  6');
    builder.addCardString('=058E150          024 U  5 010 *  4');
    builder.addCardString('=058E160     *  6 020 H 13 050 ----     PUT OLD BUFFER ON END OF H10 LIST');
    builder.addCardString('=058E170          020 L  7 005 *  7     SERVICE L7');
    builder.addCardString('=058E180          050 H 12 010 $  1');
    builder.addCardString('=058E190          020 $  0 010 =  8     ASSIGN BUFFER');
    builder.addCardString('=058E200          020 $  0 010 = 47     CHANGE STATE TO L10');
    builder.addCardString('=058E210              L 10     L 10');
    builder.addCardString('=058E220          020 H 12 024 K 36     CL+SU');
    builder.addCardString('=058E230          142 K 36 020 * 92');
    builder.addCardString('=058E240     *  7 050 H 12 020 * 93     RESTORE STN CONTEXT');
    builder.addCardString('=058E250     *  8 050 H 13 050 ----     LEAVE NEXT BUFFER OR -1 IN ACC AND H1');
    builder.addCardString('=058E260     *  9 010 ----              EXIT');
    builder.addCardString('=058E270     * 91     H 10     H 10');
    builder.addCardString('=058E280     * 92                       PRIVATE STORAGE FOR STN');
    builder.addCardString('=058E290     * 93                  ,    PRIVATE STORAGE FOR BUFFER');

    builder.addCardString('=059E000+    = 59 130 = 59 134 = 59');

    builder.addCardString('=060E000+    = 60 130 = 60 134 = 60');

    builder.addCardString('=061E000+    = 61 010 $  0              CONVERT TIME FOR OUTPUT');
    builder.addCardString('=061E010          024 K  2 052 *  9');
    builder.addCardString('=061E020          020 $  0 010 =  0     READ THE CLOCK');
    builder.addCardString('=061E030          120    0 004 H  1');
    builder.addCardString('=061E040          044 J  1 120    0');
    builder.addCardString('=061E050          044 J  0 036 N  2');
    builder.addCardString('=061E060          060 H 20 010 $  1');
    builder.addCardString('=061E070          020 $  0 010 = 36');
    builder.addCardString('=061E080                 3        4');
    builder.addCardString('=061E090     *  9 010 ----         ,');

    builder.addCardString('=062E000+    = 62 050 T  0 010 $  0     INSERT SPACE IN OUTPUT REGION S');
    builder.addCardString('=062E010          020 A 14 050 P 11');
    builder.addCardString('=062E020          020 T  0 010 = 66,');

    builder.addCardString('=063E000+    = 63 130 = 63 134 = 63');

    builder.addCardString('=064E000+    = 64 010 $  0              UNPACK MSG TO S FOR OUTPUT COMPISTIO');
    builder.addCardString('=064E010          024 K  2 052 *  1       020 $  0 010 = 64');
    builder.addCardString('=064E020          024 K  2 052 *  9              M        M');
    builder.addCardString('=064E030     *  1 020 ---- 052 *  2     WHERE \'M\' IS LOCN OF MSG');
    builder.addCardString('=064E040     *  2 020 ---- 050 T  0');
    builder.addCardString('=064E050     *  3 020 T  0 001 *  9');
    builder.addCardString('=064E060          071    8 050 T  0');
    builder.addCardString('=064E070          020 P 12 024 K  3');
    builder.addCardString('=064E080          050 P 12 052 *  4');
    builder.addCardString('=064E090     *  4 060 ---- 023 T  0');
    builder.addCardString('=064E100          001 *  3 020 *  2');
    builder.addCardString('=064E110          024 K  2 014 *  1');
    builder.addCardString('=064E120     *  9 010 ----         ,');

    builder.addCardString('=065E000+    = 65 130 = 65 134 = 65');

    builder.addCardString('=066E000+    = 66 010 $  0              PUT (P11) IN NEXT S CELL (P12)+1');
    builder.addCardString('=066E010          024 K  2 052 *  9');
    builder.addCardString('=066E020          020 P 12 024 K  3');
    builder.addCardString('=066E030          050 P 12 056 *  1');
    builder.addCardString('=066E040     *  1 020 P 11 050 ----');
    builder.addCardString('=066E050     *  9 010 ----         ,');

    builder.addCardString('=067E000+    = 67 130 = 67 134 = 67');

    builder.addCardString('=068E000+    = 68 010 $  0              COMPUTE PART (P20) FOR STEP (P21)');
    builder.addCardString('=068E010          024 K  2 052 *  9');
    builder.addCardString('=068E020          020 P 21 124 K 11');
    builder.addCardString('=068E030          050 T  0 070   10');
    builder.addCardString('=068E040          050 T  1 020 J 14');
    builder.addCardString('=068E045          025 T  1 052 *  1     ASSUMES (P21) IS LEGITIMATE');
    builder.addCardString('=068E050          052 *  2 020 P 21');
    builder.addCardString('=068E060          124 K 13 072   39');
    builder.addCardString('=068E070     *  1 044 ---- 020 T  0');
    builder.addCardString('=068E080     *  2 036 ---- 060 P 20');
    builder.addCardString('=068E090     *  9 010 ----         ,');

    builder.addCardString('=069E000+    = 69 130 = 69 134 = 69');

    builder.addCardString('=070E000+    = 70 010 $  0              COMPARE (H21) W (H22)');
    builder.addCardString('=070E010     *  1 024 K  2 052 *  9');
    builder.addCardString('=070E020          020 H 21 025 H 22');
    builder.addCardString('=070E030          005 *  2 025 K  1');
    builder.addCardString('=070E040     *  2 001 * 12 023 H 22');
    builder.addCardString('=070E050          005 *  3 020 H 21');
    builder.addCardString('=070E060          071    9 001 * 11');
    builder.addCardString('=070E070     *  3 010 * 13 023 H 21');
    builder.addCardString('=070E080          005 *  4 020 H 22');
    builder.addCardString('=070E090          071    9 001 * 13');
    builder.addCardString('=070E100     *  4 010 * 11 020 H 21');
    builder.addCardString('=070E110          124 K 12 024 H 22');
    builder.addCardString('=070E120          124 K 12 025 K 12');
    builder.addCardString('=070E130          005 *  5 020 H 21');
    builder.addCardString('=070E140          071    9 001 * 11');
    builder.addCardString('=070E150     *  5 010 * 13 020 H 22');
    builder.addCardString('=070E160          071    1 072    1');
    builder.addCardString('=070E170          050 T  0 020 H 21');
    builder.addCardString('=070E180          071    1 072    1');
    builder.addCardString('=070E190          025 T  0 001 *  6');
    builder.addCardString('=070E200          020 H 21 071    9');
    builder.addCardString('=070E210          002 * 13 010 * 11');
    builder.addCardString('=070E220     *  6 020 H 21 071    9');
    builder.addCardString('=070E230          002 * 11 010 * 13');
    builder.addCardString('=070E240     * 11 020 K 26 010 *  9     LESS');
    builder.addCardString('=070E250     * 12 020 K 25 010 *  9     EQUAL');
    builder.addCardString('=070E260     * 13 020 K 24 010 *  9     GREATER');
    builder.addCardString('=070E270     *  9 010 ----         ,    EXIT WITH RELATION IN ACC');

    builder.addCardString('071E000+     = 71 010 $  0              FIND SINGLE INDEXED VALUE');
    builder.addCardString('071E010           024 K  2 052 *  9       H26 HOLDS LETTER');
    builder.addCardString('071E020           020 H 27 052 *  1       H28 HOLDS INDEX');
    builder.addCardString('071E030           070   21 050 H 22       ASSUME LETTER IS SINGLY INDEXED');
    builder.addCardString('071E040      *  1 020 ---- 050 H 23');
    builder.addCardString('071E050      *  2 020 H 22 050 H 21');
    builder.addCardString('071E060           020 H 23 056 *  3');
    builder.addCardString('071E070      *  3 050 H 22 020 ----');
    builder.addCardString('071E080           050 H 23 001 *  9     JUMP IF CAN\'T FIND AND EXIT MINUS');
    builder.addCardString('071E090           124 K 42 025 H 28');
    builder.addCardString('071E100           001 *  2 025 K  1     JUMP IF NO MATCH AND TRY NEXT');
    builder.addCardString('071E110           006 *  9 020 H 22     JUMP IF NO MATCH POSSIBLE');
    builder.addCardString('071E120           024 K  1 124 K  5');
    builder.addCardString('071E130      *  9 010 ---- 020 K  4     LEAVE + POINTER IN ACC IF FOUND');
    builder.addCardString('071E014           050 H 23 010 *  9,    EXIT - WITH H23 MINUS.');

    builder.addCardString('=072E000+    = 72 010 $  0              FIND DOUBLY INDEXED VALUE');
    builder.addCardString('=072E010          024 K  2 052 *  9       H27 HOLDS LETTER');
    builder.addCardString('=072E020          020 $  0 010 = 71       H28 HOLDS FIRST INDEX');
    builder.addCardString('=072E030          001 *  9 020 H 22       H29 HOLDS SECOND INDEX');
    builder.addCardString('=072E040          071   21 050 H 25     ASSUME LETTER IS DOUBLY INDEXED');
    builder.addCardString('=072E050          020 H 23 050 H 26');
    builder.addCardString('=072E060     *  1 020 H 25 050 H 24');
    builder.addCardString('=072E070          020 H 26 050 H 25');
    builder.addCardString('=072E080          052 *  2 010 $  1');
    builder.addCardString('=072E090     *  2 020 ---- 050 H 26');
    builder.addCardString('=072E100          001 *  9 124 K 42');
    builder.addCardString('=072E110          025 H 29 001 *  1');
    builder.addCardString('=072E120          025 K  1 001 *  3');
    builder.addCardString('=072E130          020 K  4 010 *  9');
    builder.addCardString('=072E140     *  3 020 H 25 024 K  2');
    builder.addCardString('=072E150     *  9 010 ----         ,    EXIT');

    builder.addCardString('=073E000+    = 73 010 $  0              ASSIGN VALUE A/C H27-H30');
    builder.addCardString('=073E010          024 K  2 052 *  9');
    builder.addCardString('=073E020          020 H 29 002 * 20     JUMP FOR MATRIX ELEMENT');
    builder.addCardString('=073E030          020 H 28 002 * 10     JUMP FOR VECTOR ELEMENT');
    builder.addCardString('=073E040          020 H 27 052 *  1     SIMPLE VALUE TO ASSIGN');
    builder.addCardString('=073E050          052 *  3 010 $  1');
    builder.addCardString('=073E060     *  1 020 ---- 002 *  2     JUMP IF ALREADY SIMPLE');
    builder.addCardString('=073E070          025 K  1 002 *  2     JUMP IF UNDEFINED');
    builder.addCardString('=073E080          020 $  0 010 = 75     ERASE VALUES FOR LETTER H27');
    builder.addCardString('=073E090     *  2 020 H 30 010 $  1');
    builder.addCardString('=073E100     *  3 050 ---- 010 $  1     ASSIGN SIMPLE VALUE');
    builder.addCardString('=073E110     *  9 010 ----              EXIT');
    builder.addCardString('=073E120     * 10 020 Q  0 001 E  0     VECTOR ELEMENT TO ASSIGN');
    builder.addCardString('=073E130          020 H 27 052 * 11');
    builder.addCardString('=073E140     * 11 020 ---- 002 * 12');
    builder.addCardString('=073E150          071    6 001 * 14     JUMP IF LETTER NOW A VECTOR');
    builder.addCardString('=073E160     * 12 020 $  0 010 = 75     ERASE VALUE(S) FOR LETTER H27');
    builder.addCardString('=073E170          020 H 27 052 * 13');
    builder.addCardString('=073E180          020 K 39 010 $  1');
    builder.addCardString('=073E190     * 13 050 ---- 010 $  1');
    builder.addCardString('=073E200     * 14 020 $  0 010 = 71     FIND SINGLE INDEXED VALUE');
    builder.addCardString('=073E210          056 * 17 002 * 17     JUMP IF FOUND');
    builder.addCardString('=073E220          020 H 21 056 * 15');
    builder.addCardString('=073E230          020 $  0 010 = 10     GET A SPACE');
    builder.addCardString('=073E240     * 15 056 * 16 056 ----');
    builder.addCardString('=073E250          024 K  1 056 * 17');
    builder.addCardString('=073E260          020 H 22 124 K  5');
    builder.addCardString('=073E270     * 16 024 H 28 050 ----');
    builder.addCardString('=073E280     * 17 020 H 30 050 ----');
    builder.addCardString('=073E290          010 *  9');
    builder.addCardString('=073E300     * 20 020 Q  0 056 * 21     MATRIX ELEMENT TO ASSIGN');
    builder.addCardString('=073E310     * 21 001 E  0 020 ----     CHECK SPACE');
    builder.addCardString('=073E320          002 $  1 010 E  0');
    builder.addCardString('=073E330          020 H 27 052 * 22');
    builder.addCardString('=073E340     * 22 020 ---- 002 * 23');
    builder.addCardString('=073E350          071    5 001 * 25     JUMP IF LETTER NOW A MATRIX');
    builder.addCardString('=073E360     * 23 020 $  0 010 = 75     ERASE VALUE(S) FOR LETTER H27');
    builder.addCardString('=073E370          020 H 27 052 * 24');
    builder.addCardString('=073E380          020 K 38 010 $  1');
    builder.addCardString('=073E390     * 24 050 ---- 010 $  1');
    builder.addCardString('=073E400     * 25 020 $  0 010 = 72     FIND DOUBLE INDEXED VALUE');
    builder.addCardString('=073E410          052 * 31 006 * 30     JUMP IF FOUND');
    builder.addCardString('=073E420          020 H 23 002 * 28     JUMP IF ROW EXISTS');
    builder.addCardString('=073E430          020 H 21 056 * 26');
    builder.addCardString('=073E440          020 $  0 010 = 10     GET A SPACE');
    builder.addCardString('=073E450     * 26 056 * 27 056 ----');
    builder.addCardString('=073E460          071   21 050 H 24');
    builder.addCardString('=073E470          020 H 22 124 K  5');
    builder.addCardString('=073E480     * 27 024 H 28 050 ----');
    builder.addCardString('=073E490          050 H 25 010 $  1');
    builder.addCardString('=073E500     * 28 020 H 24 052 * 29');
    builder.addCardString('=073E510          020 $  0 010 = 10     GET A SPACE');
    builder.addCardString('=073E520          071   21 052 * 30');
    builder.addCardString('=073E530     * 29 052 ---- 024 K  2');

    builder.addCardString('=073E540          052 * 31 020 H 25');
    builder.addCardString('=073E550          124 K  6 024 H 29');
    builder.addCardString('=073E560     * 30 050 ---- 020 H 30');
    builder.addCardString('=073E570     * 31 050 ---- 010 *  9,');

    builder.addCardString('=074E000+    = 74 010 $  0              EVALUATE INDEXED LETTER');
    builder.addCardString('=074E010          024 K  2 052 *  9');
    builder.addCardString('=074E020          020 Q  7 050 H 29');
    builder.addCardString('=074E030          020 Q  6 001 *  1     JUMP IF Q7 EMPTY');
    builder.addCardString('=074E040          020 $  0 010 = 17     POP Q7');
    builder.addCardString('=074E050          020 Q  6 002 E  6     MALFORMED IF EXTRA INDICES');
    builder.addCardString('=074E060     *  1 020 $  0 010 = 41     CHECK AND CONVERT FIRST INDEX');
    builder.addCardString('=074E070          020 Q  3 050 H 28');
    builder.addCardString('=074E080          020 Q  5 024 J 13');
    builder.addCardString('=074E090          071   21 052 *  2');
    builder.addCardString('=074E100     *  2 020 ---- 050 H 27     SET LETTER');
    builder.addCardString('=074E110          052 *  3 052 *  6');
    builder.addCardString('=074E120          020 H 29 002 *  5     JUMP IF DOUBLE INDEX');
    builder.addCardString('=074E130     *  3 020 ---- 002 E  2     UNDEFINED IF SCALAR');
    builder.addCardString('=074E140          071    6 002 E  2     UNDEFINED IF NOT VECTOR');
    builder.addCardString('=074E150          020 $  0 010 = 71');
    builder.addCardString('=074E160          001 E  2 056 *  4     UNDEFINED IF CAN\'T FIND');
    builder.addCardString('=074E170     *  4 070    0 020 ----');
    builder.addCardString('=074E180          050 Q  3 010 *  9     SET RESULT AND EXIT');
    builder.addCardString('=074E190     *  5 050 Q  3 010 $  1');
    builder.addCardString('=074E200          020 $  0 010 = 41     CHECK AND CONVERT SECOND INDEX');
    builder.addCardString('=074E210          020 Q  3 050 H 29');
    builder.addCardString('=074E220     *  6 020 ---- 002 E  2     UNDEFINED IF SCALAR');
    builder.addCardString('=074E230          071    5 002 E  2     UNDEFINED IF NOT MATRIX');
    builder.addCardString('=074E240          020 $  0 010 = 72');
    builder.addCardString('=074E250          001 E  2 052 *  7     UNDEFINED IF CAN\'T FIND');
    builder.addCardString('=074E260     *  7 020 ---- 050 Q  3     SET RESULT');
    builder.addCardString('=074E270     *  9 010 ----         ,    EXIT');

    builder.addCardString('=075E000+    = 75 010 $  0              ERASE VALUE(S) FOR LETTER H27');
    builder.addCardString('=075E010          024 K  2 052 *  9');
    builder.addCardString('=075E020          020 H 27 052 *  1');
    builder.addCardString('=075E030          052 * 12 010 $  1');
    builder.addCardString('=075E040     *  1 020 ---- 002 * 11     JUMP IF LETTER HAS SIMPLE VALUE');
    builder.addCardString('=075E050          050 * 90 071    5');
    builder.addCardString('=075E060          001 * 20 071    1     JUMP IF MATRIX');
    builder.addCardString('=075E070          001 * 10 010 *  9     JUMP IF VECTOR ELSE UNDEFINED');
    builder.addCardString('=075E080     * 10 004 * 90 010 $  1     VECTOR');
    builder.addCardString('=075E090          020 $  0 010 = 29     ERASE RIGHT LINKED LIST');
    builder.addCardString('=075E100     * 11 020 K  4 010 $  1');
    builder.addCardString('=075E110     * 12 050 ---- 010 $  1     UNDEFINE THE LETTER');
    builder.addCardString('=075E120     *  9 010 ----              EXIT');
    builder.addCardString('=075E130     * 20 020 * 90 014 * 21     MATRIX');
    builder.addCardString('=075E140     * 21 020 * 91 056 * 22');
    builder.addCardString('=075E150          124 K  5 025 K  1');
    builder.addCardString('=075E160     * 22 001 * 10 004 ----');
    builder.addCardString('=075E170          060 * 91 010 $  1');
    builder.addCardString('=075E180          020 $  0 010 = 28     ERASE LEFT LINKED LIST');
    builder.addCardString('=075E190          010 * 21');
    builder.addCardString('=075E200     * 90                       LOCAL STORAGE');
    builder.addCardString('=075E210     * 91                  ,    LOCAL STORAGE');

    builder.addCardString('=076E000+    = 76 010 $  0              ERASE ONE LEVEL OF CONTROL STRUCTURE');
    builder.addCardString('=076E010          024 K  2 052 *  9');
    builder.addCardString('=076E020          020 Q  8 052 *  1     ASSUME STRUCTURE EXISTS OFF Q8L');
    builder.addCardString('=076E030     *  1 020 ---- 005 *  2');
    builder.addCardString('=076E040          052 *  1 075   40');
    builder.addCardString('=076E050          020 $  0 010 = 29');
    builder.addCardString('=076E060     *  2 010 *  1 004 Q  8');
    builder.addCardString('=076E070          020 $  0 010 = 28');
    builder.addCardString('=076E080          020 $  0 010 = 19');
    builder.addCardString('=076E090     *  9 010 ----         ,');

    builder.addCardString('INITIATE        $              M  0     INITIALIZER (AT REGION M)');
    builder.addCardString('INITIATE     *  0 020 * 90 070    0     SET ACC=,1234 AND MQ=0');
    builder.addCardString('INITIATE          134 $  0 071   40     HALT FOR TIME OF DAY IN MINUTES');
    builder.addCardString('INITIATE          032 J  1 060 H  1     CONVERT TO CLOCK COUNTS AND STORE');
    builder.addCardString('INITIATE          107    0 050 H  0     SYNCHRONIZE WITH 16-BIT CLOCK');
    builder.addCardString('INITIATE     *  1 020 * 91 050 Q  1     SET UP AVAILABLE SPACE');
    builder.addCardString('INITIATE          020 * 92 050,6454');
    builder.addCardString('INITIATE          020 K  4 050,6455');
    builder.addCardString('INITIATE          020,6456 050,6457');
    builder.addCardString('INITIATE          020 * 93 050 Q  0     SET UP AVAILABLE SPACE');
    builder.addCardString('INITIATE          050 * 94 010 $  1');
    builder.addCardString('INITIATE     *  2 020 * 94 056 *  3');
    builder.addCardString('INITIATE          024 I  1 056 *  4');
    builder.addCardString('INITIATE     *  3 024 I  1 050 ----');
    builder.addCardString('INITIATE          050 * 94 010 $  1');
    builder.addCardString('INITIATE     *  4 020 K  4 050 ----');
    builder.addCardString('INITIATE          020 * 94 025 * 95');
    builder.addCardString('INITIATE          001 *  2 020 K  4');
    builder.addCardString('INITIATE          050    0 050,7776');
    builder.addCardString('INITIATE          050,7777 106    0     RESTORE PRINTER');
    builder.addCardString('INITIATE          004 * 96 111,6000     SETUP PRIMER COPY OF USER BLOCK');
    builder.addCardString('INITIATE          010 X  1              KICKOFF');
    builder.addCardString('INITIATE     * 90             ,1234     IDENTIFIER FOR TIME ENTRY');
    builder.addCardString('INITIATE     * 91             ,6454');
    builder.addCardString('INITIATE     * 92             ,6456');
    builder.addCardString('INITIATE     * 93             ,6460');
    builder.addCardString('INITIATE     * 94              ----     WORKING STORE');
    builder.addCardString('INITIATE     * 95             ,7776');
    builder.addCardString('INITIATE     * 96 000,0000,013,1777,');
    builder.addCardString('INITIATE        .          010 M  0.');

    const memory = j136e();

    const drums = new Drums();

    const cpu = new CPU(memory, builder.finalize(), drums, true, event.data.port);
    // cpu.addMemoryBreakpoint(0o5600)
    await cpu.go();

    // Load in X 1, X 4, X 5, = 9, = 10, = 22, = 24, = 25, = 26, = 77, = 78, and = 79 over J136E
    memory.set(0o0006, 0o020_0006_010_5600n);
    memory.set(0o0007, 0o013_0011_020_4360n);
    memory.set(0o0010, 0o002_5773_010_0013n);
    memory.set(0o0011, 0o025_4606_002_5760n);
    memory.set(0o0012, 0o020_4361_002_5773n);
    memory.set(0o0013, 0o020_4365_001_0015n);
    memory.set(0o0014, 0o020_4613_002_5773n);
    memory.set(0o0015, 0o020_4604_001_0017n);
    memory.set(0o0016, 0o020_4612_002_5773n);
    memory.set(0o0017, 0o020_4601_025_4605n);
    memory.set(0o0020, 0o002_5760_010_5762n);
    memory.set(0o0021, 0o020_6012_001_0032n);
    memory.set(0o0022, 0o020_6001_050_6013n);
    memory.set(0o0023, 0o020_6002_050_6014n);
    memory.set(0o0024, 0o020_5016_050_6001n);
    memory.set(0o0025, 0o020_6012_050_6002n);
    memory.set(0o0026, 0o020_0026_010_5627n);
    memory.set(0o0027, 0o002_0030_010_5765n);
    memory.set(0o0030, 0o020_6013_050_6001n);
    memory.set(0o0031, 0o020_6014_050_6002n);
    memory.set(0o0032, 0o020_0032_010_5633n);
    memory.set(0o0033, 0o020_0044_052_0034n);
    memory.set(0o0034, 0o020_0000_005_5740n);
    memory.set(0o0035, 0o025_4623_001_0037n);
    memory.set(0o0036, 0o025_4701_001_0041n);
    memory.set(0o0037, 0o020_0034_024_4702n);
    memory.set(0o0040, 0o052_0034_010_0034n);
    memory.set(0o0041, 0o020_0034_025_0044n);
    memory.set(0o0042, 0o024_0045_052_0043n);
    memory.set(0o0043, 0o010_0000_000_0000n);
    memory.set(0o0044, 0o000_0046_000_0000n);
    memory.set(0o0045, 0o000_5740_000_0000n);
    memory.set(0o0046, 0o000_0000_063_0524n);
    memory.set(0o0047, 0o000_0000_000_4417n);
    memory.set(0o0050, 0o000_0000_000_6417n);
    memory.set(0o0051, 0o000_0004_417_1605n);
    memory.set(0o0052, 0o004_3011_603_0514n);
    memory.set(0o0053, 0o004_4051_405_2405n);
    memory.set(0o0054, 0o000_0006_431_2005n);
    memory.set(0o0055, 0o000_0005_411_1605n);
    memory.set(0o0056, 0o000_0006_001_0705n);
    memory.set(0o0057, 0o000_0006_205_0104n);
    memory.set(0o0060, 0o000_0602_516_0310n);
    memory.set(0o0061, 0o000_0004_617_2215n);
    memory.set(0o0062, 0o000_0006_324_1720n);
    memory.set(0o0063, 0o000_0000_000_4717n);
    memory.set(0o0064, 0o004_4051_501_1604n);
    memory.set(0o0065, 0o100_0000_000_0000n);
    memory.set(0o0066, 0o020_6050_001_0105n);
    memory.set(0o0067, 0o071_0001_001_5767n);
    memory.set(0o0070, 0o020_6020_002_0077n);
    memory.set(0o0071, 0o020_6051_050_6025n);
    memory.set(0o0072, 0o020_0072_010_5663n);
    memory.set(0o0073, 0o002_0077_010_0074n);
    memory.set(0o0074, 0o020_4627_001_5767n);
    memory.set(0o0075, 0o020_4632_001_5767n);
    memory.set(0o0076, 0o020_4631_010_0077n);
    memory.set(0o0077, 0o052_0102_010_0100n);
    memory.set(0o0100, 0o024_4702_052_0101n);
    memory.set(0o0101, 0o020_0000_050_6051n);
    memory.set(0o0102, 0o020_0000_001_0104n);
    memory.set(0o0103, 0o050_6020_010_5766n);
    memory.set(0o0104, 0o050_6020_101_5767n);
    memory.set(0o0105, 0o020_0105_010_5667n);
    memory.set(0o0106, 0o020_0106_010_5665n);
    memory.set(0o0107, 0o010_5761_000_0000n);
    memory.set(0o0110, 0o052_0114_020_6040n);
    memory.set(0o0111, 0o001_4640_056_0112n);
    memory.set(0o0112, 0o050_6070_020_0000n);
    memory.set(0o0113, 0o050_6040_020_6070n);
    memory.set(0o0114, 0o010_0000_000_0000n);
    memory.set(0o0115, 0o050_0136_010_0116n);
    memory.set(0o0116, 0o020_5037_050_6101n);
    memory.set(0o0117, 0o020_6100_024_4703n);
    memory.set(0o0120, 0o050_6014_010_0123n);
    memory.set(0o0121, 0o050_0136_010_0122n);
    memory.set(0o0122, 0o020_6100_050_6014n);
    memory.set(0o0123, 0o020_0123_010_5675n);
    memory.set(0o0124, 0o020_0124_010_5676n);
    memory.set(0o0125, 0o020_0125_010_5700n);
    memory.set(0o0126, 0o000_4602_000_4602n);
    memory.set(0o0127, 0o020_0127_010_5676n);
    memory.set(0o0130, 0o020_0130_010_5700n);
    memory.set(0o0131, 0o000_6060_000_6060n);
    memory.set(0o0132, 0o020_0132_010_5700n);
    memory.set(0o0133, 0o000_0137_000_0137n);
    memory.set(0o0134, 0o120_0000_050_6000n);
    memory.set(0o0135, 0o020_0136_010_5631n);
    memory.set(0o0136, 0o000_0000_000_0000n);
    memory.set(0o0137, 0o027_0561_342_7056n);
    memory.set(0o0140, 0o025_2000_000_0000n);
    memory.set(0o0141, 0o024_4702_052_0155n);
    memory.set(0o0142, 0o020_0142_010_5616n);
    memory.set(0o0143, 0o020_0143_010_5633n);
    memory.set(0o0144, 0o050_6070_004_4702n);
    memory.set(0o0145, 0o020_0156_052_0146n);
    memory.set(0o0146, 0o020_0000_001_4646n);
    memory.set(0o0147, 0o025_6070_001_0151n);
    memory.set(0o0150, 0o025_4701_005_0152n);
    memory.set(0o0151, 0o020_0146_064_0146n);
    memory.set(0o0152, 0o010_0146_020_0146n);
    memory.set(0o0153, 0o124_4706_025_0156n);
    memory.set(0o0154, 0o024_0157_050_6045n);
    memory.set(0o0155, 0o010_0000_000_0000n);
    memory.set(0o0156, 0o000_0160_000_0000n);
    memory.set(0o0157, 0o000_5720_440_0000n);
    memory.set(0o0160, 0o000_0002_321_2224n);
    memory.set(0o0161, 0o000_0000_014_1707n);
    memory.set(0o0162, 0o000_0000_005_3020n);
    memory.set(0o0163, 0o000_0000_023_1116n);
    memory.set(0o0164, 0o000_0000_003_1723n);
    memory.set(0o0165, 0o000_0000_000_1120n);
    memory.set(0o0166, 0o000_0000_000_0620n);
    memory.set(0o0167, 0o000_0000_000_3020n);
    memory.set(0o0170, 0o000_0000_000_0420n);
    memory.set(0o0171, 0o000_0000_023_0716n);
    memory.set(0o0172, 0o000_0000_001_2207n);
    memory.set(0o0173, 0o000_0000_015_0130n);
    memory.set(0o0174, 0o000_0000_015_1116n);
    memory.set(0o0175, 0o100_0000_000_0000n);
    memory.set(0o0176, 0o024_4702_052_6016n);
    memory.set(0o0177, 0o020_0177_010_5610n);
    memory.set(0o0200, 0o001_0207_140_6101n);
    memory.set(0o0201, 0o020_4614_024_4401n);
    memory.set(0o0202, 0o052_0203_020_4615n);
    memory.set(0o0203, 0o025_0000_001_0217n);
    memory.set(0o0204, 0o025_4701_002_0217n);
    memory.set(0o0205, 0o020_4614_024_4730n);
    memory.set(0o0206, 0o142_4730_010_0217n);
    memory.set(0o0207, 0o020_4612_001_0213n);
    memory.set(0o0210, 0o020_0210_010_5657n);
    memory.set(0o0211, 0o000_4376_000_4376n);
    memory.set(0o0212, 0o010_0215_000_0000n);
    memory.set(0o0213, 0o020_0213_010_5657n);
    memory.set(0o0214, 0o000_4373_000_4373n);
    memory.set(0o0215, 0o020_0215_010_5665n);
    memory.set(0o0216, 0o010_5761_000_0000n);
    memory.set(0o0217, 0o020_4556_004_4561n);
    memory.set(0o0220, 0o064_4556_020_6000n);
    memory.set(0o0221, 0o064_6000_025_4532n);
    memory.set(0o0222, 0o001_6016_020_6016n);
    memory.set(0o0223, 0o025_4702_010_5626n);
    memory.set(0o0224, 0o024_4702_050_4622n);
    memory.set(0o0225, 0o020_0225_010_5616n);
    memory.set(0o0226, 0o020_4622_050_6045n);
    memory.set(0o0227, 0o020_6001_124_5111n);
    memory.set(0o0230, 0o025_5111_002_0233n);
    memory.set(0o0231, 0o020_6001_124_5173n);
    memory.set(0o0232, 0o025_5173_001_4646n);
    memory.set(0o0233, 0o020_0233_010_5616n);
    memory.set(0o0234, 0o020_6001_050_6045n);
    memory.set(0o0235, 0o020_0235_010_5601n);
    memory.set(0o0236, 0o020_0236_010_5625n);
    memory.set(0o0237, 0o020_6001_124_5073n);
    memory.set(0o0240, 0o025_5073_002_0233n);
    memory.set(0o0241, 0o020_6045_124_5073n);
    memory.set(0o0242, 0o025_5073_001_0250n);
    memory.set(0o0243, 0o020_0243_010_5617n);
    memory.set(0o0244, 0o020_0244_010_5620n);
    memory.set(0o0245, 0o020_6043_050_6047n);
    memory.set(0o0246, 0o020_0246_010_5615n);
    memory.set(0o0247, 0o010_0241_000_0000n);
    memory.set(0o0250, 0o020_0250_010_5715n);
    memory.set(0o0251, 0o020_0251_010_5602n);
    memory.set(0o0252, 0o020_6045_052_0254n);
    memory.set(0o0253, 0o020_0253_010_5617n);
    memory.set(0o0254, 0o010_0000_000_0000n);
    memory.set(0o0255, 0o024_4702_052_0264n);
    memory.set(0o0256, 0o020_6001_052_0261n);
    memory.set(0o0257, 0o050_4554_124_4740n);
    memory.set(0o0260, 0o025_4740_001_4646n);
    memory.set(0o0261, 0o020_0000_124_6045n);
    memory.set(0o0262, 0o025_6045_001_4646n);
    memory.set(0o0263, 0o020_0263_010_5617n);
    memory.set(0o0264, 0o010_0000_000_0000n);
    memory.set(0o0265, 0o024_4702_052_6031n);
    memory.set(0o0266, 0o020_4621_050_6030n);
    memory.set(0o0267, 0o020_0267_010_5631n);
    memory.set(0o0270, 0o020_4621_025_6030n);
    memory.set(0o0271, 0o050_6070_023_6070n);
    memory.set(0o0272, 0o002_6031_004_6030n);
    memory.set(0o0273, 0o060_4621_110_5220n);
    memory.set(0o0274, 0o010_6031_000_0000n);
    memory.set(0o0275, 0o052_0301_020_6002n);
    memory.set(0o0276, 0o025_4703_052_0277n);
    memory.set(0o0277, 0o020_0000_124_5016n);
    memory.set(0o0300, 0o025_5016_001_4646n);
    memory.set(0o0301, 0o010_0000_000_0000n);
    memory.set(0o5611, 0o130_5611_134_5611n);
    memory.set(0o5612, 0o024_4702_010_0110n);
    memory.set(0o5626, 0o010_0115_010_0121n);
    memory.set(0o5630, 0o010_0141_000_0000n);
    memory.set(0o5631, 0o010_0176_010_0177n);
    memory.set(0o5632, 0o124_4706_010_0224n);
    memory.set(0o5715, 0o010_0255_000_0000n);
    memory.set(0o5716, 0o010_0265_000_0000n);
    memory.set(0o5717, 0o024_4702_010_0275n);
    memory.set(0o5761, 0o131_0006_000_0000n);
    memory.set(0o5764, 0o010_0021_000_0000n);
    memory.set(0o5765, 0o010_0066_000_0000n);

    const now = new Date();
    const nowMinutes = now.getMinutes() + now.getHours() * 60;
    cpu.accumulator = BigInt(nowMinutes);
    cpu.symbolMap = {
        "W": [0o4340, 16],
        "L": [0o4360, 16],
        "U": [0o4400, 88],
        "J": [0o4530, 24],
        "I": [0o4560, 16],
        "H": [0o4600, 32],
        "E": [0o4640, 32],
        "K": [0o4700, 48],
        "N": [0o4760, 16],
        "A": [0o5000, 132],
        "D": [0o5540, 12],
        "B": [0o5554, 20],
        "=": [0o5600, 80],
        "F": [0o5720, 16],
        "G": [0o5740, 16],
        "X": [0o5760, 16],
        "P": [0o6000, 32],
        "Q": [0o6040, 16],
        "Z": [0o6060, 8],
        "T": [0o6070, 8],
        "S": [0o6100, 75],
        "V": [0o6213, 53],
        "R": [0o6300, 82]
    }
    cpu.trace=true;
    debugger;
    await cpu.go();
    debugger;
}